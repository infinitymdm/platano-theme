// /*************************
//  * VolumeMixer Extension *
//  *************************/

.masterslider.smaller {
  .masterlabel,
  .slider {
    min-width: 15em - (0.4em * 2);
  }
}

// /*******************************
//  * Applications Menu Extension *
//  *******************************/

.popup-menu {
  // '.apps-menu' is the child boxLayout (right-pane)
  StScrollView.apps-menu {
    margin: 0 4px;
    border-style: solid;
    border-color: $foreground_div;

    &:ltr {
      padding: if($ref_weight >= 1.0, 0 0 0 12px, 0 0 0 8px);
      border-left-width: 1px;
    }
    &:rtl {
      padding: if($ref_weight >= 1.0, 0 12px 0 0, 0 8px 0 0);
      border-right-width: 1px;
    }
  }
}

// /**********************
//  * Arc Menu Extension *
//  **********************/

// /*************************
//  * OpenWeather Extension *
//  *************************/

.openweather {
  &-button,
  &-menu-button-container,
  &-button-box {
  }

  &-provider {
    // generic text buttons are allocated with y-expand-ed
    padding: if($ref_weight >= 1.0, 0 16px, 0 12px);
    font-weight: 500;
    @include button(flat-normal);
    &:hover { @include button(flat-hover); }
    &:focus { @include button(flat-focus); }
    &:active { @include button(flat-active); }
    &:insensitive { @include button(flat-disabled); }
  }

  &-current {
    &-icon,
    &-summary,
    &-summarybox {
      background: none;
      color: $foreground;
    }

    &-databox-values {
      background: none;
      color: $foreground_tertiary;
    }

    &-databox-captions {
      background: none;
      color: $foreground_tertiary;
    }
  }

  &-forecast {
    &-icon,
    &-summary {
      background: none;
      color: $foreground_secondary;
    }

    &-day,
    &-temperature {
      background: none;
      color: $foreground_tertiary;
    }
  }

  &-sunrise-icon,
  &-sunset-icon,
  &-build-icon { color: $foreground_secondary; }
}

// /**************************
//  * Dash to Dock Extension *
//  **************************/

$hard_coded_alpha: 0.2;
$alpha_override: 0.54 - $hard_coded_alpha;
$icon_padding: 9px;

#dashtodockContainer {
  background: transparent;

  #dash,
  &:overview #dash,
  &.extended #dash,
  &.extended:overview #dash {
    padding: 0;
    border: none;
    transition-duration: $transition_d_long;
  }

  @each $_dock, $_radius in (top, 0 0 $r_2 $r_2),
                            (bottom, $r_2 $r_2 0 0),
                            (left, 0 $r_2 $r_2 0),
                            (right, $r_2 0 0 $r_2) {
    &.#{$_dock} #dash,
    &.#{$_dock}:overview #dash { border-radius: #{$_radius}; }

    &.#{$_dock}.extended #dash,
    &.#{$_dock}.extended:overview #dash { border-radius: 0; }
  }

  #dash { // default-mode
    background-color: $background_panel;
    box-shadow: $empty_shadow;
  }

  &.opaque #dash { // solid-mode
    background-color: $background_panel;
    // FIXME: enforce opaque background
    box-shadow: inset 0 0 0 9999px $background_panel;
  }

  &.transparent #dash { // translucent-mode
    background-color: $panel_hidden_bg; // does not work
    // FIXME: add lacked alpha via box-shadow property
    box-shadow: inset 0 0 0 9999px opacity($background_panel,
                                           $alpha_override);
  }

  &:overview #dash { // overview-mode #1
    background-color: if($variant == light, opacity($background_panel, $alpha_foreground_3rd),
                                            $panel_hidden_bg);
    box-shadow: $empty_shadow;
  }

  &.opaque:overview,
  &.transparent:overview { // overview-mode #2
    #dash {
      background-color: if($variant == light, opacity($background_panel, $alpha_foreground_3rd),
                                              transparent !important);
      box-shadow: none !important;
    }
  }

  &.extended:overview, // overview-mode #3
  &.opaque.extended:overview,
  &.transparent.extended:overview {
    #dash {
      background-color: if($variant == light, opacity($background_panel, $alpha_foreground_3rd),
                                              $panel_hidden_bg);
      box-shadow: $empty_shadow;
    }
  }

  .app-well-app,
  .show-apps {
    .overview-icon {
      padding: $icon_padding;
      background-size: contain;
    }
  }

  .app-well-app,
  .show-apps {
    &:focus .overview-icon,
    &:hover .overview-icon,
    &:selected .overview-icon { background-color: $osd_semi_fill_bg; }

    &:active .overview-icon { background-color: $osd_fill_bg; }

    &:checked:hover .overview-icon {
      background-color: mix($foreground_selection, $background_selection, percentage($alpha_track_1));
    }
  }

  .dash-item-container { // actual parent container
    background: transparent;

    > StWidget { background-size: contain; }

    .app-well-app-running-dot { // set specific shape, color and sizes
      width: 6px;
      height: 3px;
      margin-bottom: 0;
      border-radius: 0;
      background-color: $osd_sel_label;
    }

    > StWidget.focused .app-well-app-running-dot {
      width: $icon_size + $icon_padding * 2;
      background-color: $background_selection;
    }
  }

  .number-overlay,
  .notification-badge {
    min-width: if($ref_weight >= 1.0, 1.6em, 1.4em);
    min-height: if($ref_weight >= 1.0, 1.6em, 1.4em);
    margin: 0; // unset margin/padding
    padding: 0;
    border-radius: $r;
    font-weight: 700;
    text-align: center;
    box-shadow: $z-depth-2;
  }

  .number-overlay {
    background-color: $osd_bg;
    color: $osd_fg;
  }

  .notification-badge {
    background-color: $background_suggestion;
    color: $foreground_selection;
  }
}

@each $_dock in top, bottom, left, right {
  #dashtodockContainer.#{$_dock},
  #dashtodockContainer.extended.#{$_dock} {
    // fill whole focused backgrounds
    .dash-item-container > .app-well-app.focused {
      .overview-icon {
        border-radius: 0;
        background-color: $osd_semi_fill_bg;
      }

      &:hover .overview-icon {
        border-radius: 0;
        background-color: $osd_fill_bg;
      }
    }
  }
}

// /***************************
//  * Dash To Panel Extension *
//  ***************************/

$a_dtp_trk_1: if($variant == light, $alpha_track_1,
                                    $alpha_track_1 - 0.08);
$a_dtp_trk_2: if($variant == light, $alpha_track_2,
                                    $alpha_track_2 - 0.15);

@each $_position, $_line in (Top, 0 2px),
                            (Bottom, 0 -2px) {
  #panel.dashtopanelMainPanel.dashtopanel#{$_position} {
    // FIXME: prevent weird double density
    background-gradient-start: $panel_hidden_bg;
    background-gradient-end: $panel_hidden_bg;

    #panelLeft,
    #panelCenter,
    .panel-corner,
    .panel-button {
      &:hover { box-shadow: inset #{$_line} $osd_out_fg; }
      &:active,
      &:focus,
      &:checked,
      &:overview { box-shadow: inset #{$_line} $background_selection; }

      StLabel { padding-bottom: 0; } // reset baseline
    }

    @if $ver > 3.35 {
      .panel-button.clock-display {
        &:hover,
        &:active,
        &:focus,
        &:checked,
        &:overview { box-shadow: $empty_shadow; }

        &:hover .clock { box-shadow: inset #{$_line} $osd_out_fg; }

        &:active,
        &:focus,
        &:checked,
        &:overview {
          .clock { box-shadow: inset #{$_line} $background_selection; }
        }
      }
    }

    .app-well-app,
    .show-apps {
      &:focus,
      &:hover,
      &:active,
      &:checked {
        .overview-icon { // unset styling
          border-radius: 0;
          background-color: $hidden_fill_bg;
          box-shadow: $empty_shadow;
        }
      }
    }

    #dashtopanelScrollview {
      padding: 0;

      .app-well-app { // stylesheet.css gets in our way
        &:focus .dtp-container,
        &:hover .dtp-container {
          background-color: $osd_semi_fill_bg;
          box-shadow: inset 0 0 0 999px opacity($osd_fg, $a_dtp_trk_1);
        }
        &:active .dtp-container {
          background-color: $osd_fill_bg;
          box-shadow: inset 0 0 0 999px opacity($osd_fg, $a_dtp_trk_2);
        }

        // unfocused dot(s)
        .app-well-app-running-dot { background-color: $osd_sel_label; }
        // focused dot(s)
        &.focused .app-well-app-running-dot { background-color: $background_selection; }
      }
    }

    StButton.show-apps {
      &:focus,
      &:hover {
        background-color: $osd_semi_fill_bg;
        box-shadow: $empty_shadow;
      }
      &:active {
        background-color: $osd_fill_bg;
        box-shadow: inset #{$_line} $background_selection;
      }
      &:checked {
        background-color: $panel_hidden_bg;
        box-shadow: inset #{$_line} $background_selection;
        &:hover { background-color: $osd_semi_fill_bg; }
      }
    }
  }
}

// /***************************
//  * Desktop Icons Extension *
//  ***************************/

$rename_box_spacing: 6px;

.rename-popup {
  @extend %popover_content;
  padding: ($rename_box_spacing + 4px) $rename_box_spacing $rename_box_spacing;
  background-color: opacity($osd_bg, $alpha_osd);
  color: $osd_sec_fg;

  StEntry { // OSD-style-ed entry
    margin: 0 ($rename_box_spacing - 2px);
    @if $variant != light {
      @include entry(normal, $tc: $osd_fg);
      &:hover { @include entry(hover, $tc: $osd_fg); }
      &:focus { @include entry(focus, $tc: $osd_fg); }
      &:insensitive { @include entry(disabled, $tc: $osd_fg); }
    }
    @else {
      @include entry(normal, $tc: $foreground);
      &:hover { @include entry(hover, $tc: $foreground); }
      &:focus { @include entry(focus, $tc: $foreground); }
      &:insensitive { @include entry(disabled, $tc: $foreground); }
    }
  }

  .button { // standard text buttons
    padding: if($ref_weight >= 1.0, 7px 16px 8px, 5px 12px 6px);
    border-radius: $r_2;
    border: none;
    font-weight: 500;
    @if $variant != light {
      @include button(flat-normal, $tc: $foreground_accent_inv);
      &:hover { @include button(flat-hover, $tc: $foreground_accent_inv); }
      &:focus { @include button(flat-focus, $tc: $foreground_accent_inv); }
      &:active { @include button(flat-active, $tc: $foreground_accent_inv); }
      &:insensitive { @include button(flat-disabled, $tc: $osd_fg); }
    }
    @else {
      @include button(flat-normal, $tc: $foreground_accent);
      &:hover { @include button(flat-hover, $tc: $foreground_accent); }
      &:focus { @include button(flat-focus, $tc: $foreground_accent); }
      &:active { @include button(flat-active, $tc: $foreground_accent); }
      &:insensitive { @include button(flat-disabled, $tc: $foreground); }
    }
  }
}
