@import '3rd-party/budgie/budgie';

// /********
//  * Nemo *
//  ********/

.nemo-desktop.nemo-canvas-item {
  @extend %nautilus_desktop_items;
}

.nemo {
  &-canvas-item { @extend .nautilus-canvas-item; }

  &-list-dim-label { @extend .nautilus-list-dim-label; }
}

.nemo-window {
  // tone down unfocused splitted-pane
  box.nemo-inactive-pane > notebook {
    > stack > box.vertical { opacity: $alpha_foreground_3rd; }
  }

  treeview.places-treeview { // use opaque colors
    -NemoPlacesTreeView-disk-full-bg-color:
      mix($color_fg, $color_bg, percentage($alpha_track_out));
    -NemoPlacesTreeView-disk-full-fg-color: $color_bg_acc;
  }

  // workaround for invisible text in rename entry (Eeleditable.entry)
  .nemo-window-pane scrolledwindow widget > widget.entry {
    &, &:focus {
      @include transition(reset);

      &:selected { // FIXME: selection node doesn't work?
        @extend %selected_items;
      }
    }
  }

  infobar.error { // Administrative privileges
    label {
      font-size: 110%;
      font-weight: 700;
    }
  }

  // main tool-bar styling
  grid > box > box > toolbar.primary-toolbar {
    border-bottom: 1px solid $color_fg_div; // draw bottom border
  }

  // tweak notebook color
  grid > paned > box > paned > box > notebook {
    &,
    > stack:not(:only-child) { background-color: $color_base; }
  }

  // remove double-border
  grid.vertical > paned.horizontal > box.vertical {
    > scrolledwindow.frame {
      border-width: 0;
    }
  }

  // force using flat-style on bottom bar
  grid.vertical > widget {
    background-color: $color_bg_dark;

    > box {
      padding: $toolbar_padding;

      > button.image-button { @include radius($r_2); }

      separator.vertical { // remove separator
        min-width: 0;
        background-color: transparent;
      }
    }
  }
}

// /************
//  * Lollypop *
//  ************/

// header grid?
paned.horizontal > paned.horizontal stack grid.vertical > grid.horizontal {
  button.image-button {
    &, &.toggle { @include radius($r_2); }
  }
}

// playlists styling
row.trackrow {
  &, &playing {
    // lollypop can not understand outer margins
    button.image-button:not(.text-button),
    .track-menu-button { // back to square button
      &, &.toggle { // back to square button
        margin: 0;
        @include radius($r_2);
      }
    }
  }
}

// Track menu GtkPopover
// parent container of GtkWidgets 'Ratings' and 'Heart'
grid.popover-rating-loved-grid {
  // tweak bottom margin
  margin-bottom: if($ref_weight < 1.0, calc(12px + 0.35rem),
                                       calc(12px + 0.5rem));
}

// Cover-art in headerbar
image.toolbar-cover-frame { // mask L/R edge borders
  border-image: if($variant == mixed, image($color_bg_dark_inv) 0 1 / 0 1px stretch,
                                      image($color_bg_dark) 0 1 / 0 1px stretch);

  &:backdrop {
    border-image: if($variant == mixed, image($color_bg_inv) 0 1 / 0 1px stretch,
                                        image($color_bg) 0 1 / 0 1px stretch);
  }
}

headerbar > widget > box.horizontal button.image-button.popup.toggle {
  &:checked > image.selected { // Shuffle tracks?
    @include radius($r, none);
    box-shadow: inset 0 0 0 999px $color_base;
  }
}

overlay grid.sidebar {
  &:not(.view) {
    &:dir(ltr) { border-right: 1px solid $color_fg_div; }
    &:dir(rtl) { border-left: 1px solid $color_fg_div; }
  }

  viewport.frame > list { background-color: $color_bg; }

  // side-pane row height
  row.activatable.row-big {
    min-height: 0; // unlock min-height

    + row.activatable { // separator row
      min-height: 0;
      padding: 0;
    }
  }
}

// /***************************
//  * Cinnamon-Control-Center *
//  ***************************/

window.background:not(.csd) > box.vertical {
  > stack > scrolledwindow > viewport,
  > scrolledwindow > viewport {
    iconview {
      &, &.view {
        background-color: transparent;
        &:selected {
          @extend %selected_items;

          label { color: $color_fg_sel; }
        }
      }
    }

    box.vertical > toolbar {
      border: none;
      background-color: $color_bg;
      box-shadow: none;

      *:not(button) > label {
        padding: rem(5.3px, $sw: 1.0);
        color: $color_fg_3;
      }
    }

    box.vertical > list {
      &, > row {
        background-image: none;
        background-color: $color_base;
        @include transition(reset);
      }

      > row {
        &:hover,
        &:active { // unset hover/active effects
          background-image: none;
          background-color: transparent;
          @include transition(reset);
        }
        &:selected { // use -image instead for >= 3.6.x
          background-image: image($color_bg_sel);
          color: $color_fg_sel;
        }

        &:hover combobox button.combo { // revert to standard highlighting
          background-color: mix($color_fg, $color_base, percentage($alpha_track_1));
          &:hover { background-color: track($color_fg, $alpha_track_1 * 1.5); }
          &:active,
          &:checked { background-color: track($color_fg, $alpha_track_2); }
          &:disabled {
            background-color:
              mix($color_fg, $color_base, percentage(($alpha_track_1 * 2 / 3) * $alpha_foreground_dis));
          }
        }
      }
    }
  }
}

// /************************
//  * Cinnamon-Screensaver *
//  ************************/

.csstage {
  .unlockbox {
    color: $color_fg_inv;
    font-size: 110%;
    font-weight: 400;
  }

  .clock { color: $color_fg_inv; }

  .toppanel {
    border: none;
    color: $color_fg_inv;
    background-color: transparent;
  }

  @each $_class, $_radius in (audio, 0 0 $r_2 0),
                             (info, 0 0 0 $r_2) {
    .#{$_class}panel { // OSDs placed at top-left/right corners
      border: none;
      border-radius: #{$_radius};
      background-color: track($color_bg_dark_inv, $alpha_osd);
      box-shadow: $z-depth-1;
    }
  }

  .notificationwidget,
  .powerwidget {
    padding: $menuitem_padding;
    color: $color_fg_inv;
    background-color: transparent;
    font-size: 100%;
    font-weight: 500;
  }

  .auth-message {
    color: $color_err;
    font-size: 90%;
    font-weight: 700;
  }

  .caps-message {
    color: $color_warn;
    font-size: 90%;
    font-weight: 700;
  }

  .framedimage { // avatar?
    border-radius: $r_2;
    border: none;
    background-color: track($color_fg_inv, $alpha_track_1);
  }

  .passwordentry {
    @extend %flat_entry_sizing;
    @include entry(flat-normal, $tc: $color_fg_inv);
    caret-color: $color_fg_inv;
    font-family: monospace;
    &:focus { @include entry(flat-focus, $tc: $color_fg_inv); }
    &:disabled { @include entry(flat-disabled, $tc: $color_fg_inv); }
    &:backdrop { // for alt-text keyboard layout?
      color: $color_bg_sel;
    }

    selection { @extend %selected_items; }

    image.left {
      margin-right: 8px;
      color: inherit;
    }

    @if $maj_ver == 3 {
      progress {
        @include radius(0, none);
        margin: 0; // unset spacing
        padding: 0;
      }
    }
    @else {
      progress > trough > progress {
        @include radius(0, none);
        margin: 0;
        padding: 0;
      }
    }
  }

  .transparentbutton { // = 'unlock'/'switch-user' button
    min-width: rem($widget_size);
    min-height: rem($widget_size);
    @extend %inv-action-area-button;
  }

  .volumeslider {
    min-height: 24px;
    min-width: 100px;
    padding: 3px 0px;
    background-color: track($color_fg_inv, $alpha_track_out);
    color: $color_bg_sccs;
    &:disabled { background-color: track($color_bg_sccs, $alpha_track_out); }
  }

  .trackname {
    font-size: 90%;
    color: $color_fg_inv_2;
    background-image: none;
    background-color: transparent;
  }

  .albumartist {
    font-size: 80%;
    color: $color_fg_inv_3;
    background-image: none;
    background-color: transparent;
  }

  viewport {
    &,
    &.frame {
      border-style: none;
      background-color: transparent;
      background-image: none;
    }
  }
}

// /*********
//  * XFce4 *
//  *********/

.XfceHeading {
  border: 0 none transparent;
  background-color: if($variant == mixed, $color_bg_dark_inv, $color_bg_dark);
  color: if($variant == mixed, $color_fg_inv, $color_fg);
  &:backdrop {
    background-color: if($variant == mixed, $color_bg_inv, $color_bg);
    color: if($variant == mixed, track($color_fg_inv, $alpha_foreground_bdp),
                                 track($color_fg, $alpha_foreground_bdp));
  }

  entry:not(.flat) {
    @if $variant == mixed { @extend %inv_entry; }
  }
}

$panel_child_spacing: if($ref_weight < 1.0, 2px, 3px);

.xfce4-panel {
  background-color: $color_bg_panel;
  color: if($variant == mixed, $color_fg_inv, $color_fg);
  font-weight: 700;
  text-shadow: none;
  -gtk-icon-shadow: none;

  &, // unset borders
  frame > border { border: 0 none transparent; }

  &#XfcePanelWindow { // main panel container >= 4.13.3?
    // FIXME: unneeded 1px borders are reserved by its code itself (< 4.14?)
    border-color: $color_bg_panel; // keep this for safety

    &, &.marching-ants { transition: none; } // unset transitions
  }

  button:not(:selected) { all: unset; } // unset all styling first

  button {
    background-color: transparent;
    color: if($variant == mixed, $color_fg_inv, $color_fg);
    font-weight: 700;
    &:hover:not(:active):not(:checked) {
      color: if($variant != light, $color_fg_sel, black);
      box-shadow: inset 0 -2px $color_fg_trk_out;
    }
    &:checked {
      @if $variant != light {
        @include button(flat-lined-checked, $tc: $color_fg_sel);
      }
      @else {
        @include button(flat-lined-checked, $tc: black);
      }
    }
    &:active {
      @if $variant != light { @include button(flat-hover, $tc: $color_fg_sel); }
      @else { @include button(flat-hover, $tc: black); }
      box-shadow: inset 0 -2px $color_bg_sel;
    }

    label { margin-bottom: 0; } // unset baseline

    &.flat.toggle { // generic panel buttons
      label,
      image { padding: 0 $panel_child_spacing; }
    }

    &#launcher-arrow { // launcher applet
      // FIXME: quite weird pseudo-class transitions, especially :hover
      // state can't be cleared properly ( -> an upstream issue)
      &, + button.toggle {
        &:hover { box-shadow: none; } // hide indicators
      }

      + button.toggle:checked { // 'arrow' toggle button
        color: $color_bg_sel;
        box-shadow: none;
      }
    }

    &#xfce4-notification-plugin { padding: 0 1px; } // for 4.12.2
  }

  menu {
    font-weight: 400; // for enforcing regular weight
    text-shadow: none;
    @if $maj_ver == 3 { -gtk-icon-effect: none; }
    @else { -gtk-icon-filter: none; }
  }

  widget.tasklist > button.toggle {
    font-weight: 400;
    &:hover {
      @if $variant != light { @include button(flat-hover, $tc: $color_fg_sel); }
      @else { @include button(flat-hover, $tc: black); }
    }
    &:checked {
      @if $variant != light { background-color: track($color_fg_sel, $alpha_track_1); }
      @else { background-color: track(black, $alpha_track_1); }
    }

    box.horizontal {
      label {
        &:dir(ltr) { padding-right: $panel_child_spacing; }
        &:dir(rtl) { padding-left: $panel_child_spacing; }
      }

      image {
        &:dir(ltr) { margin-left: $panel_child_spacing; }
        &:dir(rtl) { margin-right: $panel_child_spacing; }
      }
    }
  }

  &.vertical { // unset child spacing in vertical layout
    button.flat.toggle,
    widget.tasklist > button.toggle {
      label,
      image {
        &:dir(ltr), &:dir(rtl) {
          margin: 0;
          padding: 0;
        }
      }
    }
  }
}

XfdesktopIconView.view {
  border-radius: 2px;
  background: transparent;
  color: $color_fg_sel;
  text-shadow: $z-depth-1-label; // non-sense for me
  &:active {
    background-color: $color_bg_sel;
    text-shadow: none;
  }

  .rubberband { @extend %rubberband; }
}

window#whiskermenu-window {
  background-color: $color_bg_dark;

  // no CSD class even if the sw compositor was enabled.
  > frame > border {
    border-radius: 0;
    border: 1px solid $color_fg_div_sld;
  }

  // why wasn't .popup class implemented in this window node? :/
  > decoration { box-shadow: $z-depth-3; }

  stack > box > box.horizontal { // ugly resize-grip
    &:first-child widget,
    &:last-child > widget:last-child { color: $color_fg_trk_out; }
  }

  entry { // enforce flat-style
    @extend %flat_entry_sizing;
    @include entry(flat-normal);
    &:focus { @include entry(flat-focus); }
    &:disabled { @include entry(flat-disabled); }
  }

  scrolledwindow {
    > viewport button.radio {
      &:not(:disabled) {
        border-radius: 0;
        background-image: none;
        animation: none;
        transition: none;
      }
      &:hover { background-color: $color_bg_trk; }
      &:checked {
        background-color: track($color_bg_sel, $alpha_track_1);
        color: $color_lbl_sel;
      }
    }

    treeview.view:selected:hover {
      background-color: mix($color_fg, $color_base, percentage($alpha_track_1));
      color: $color_fg;
    }
  }
}

$tabwin_padding: if($ref_weight < 1.0, 8px, 12px);

#xfwm-tabwin {
  -XfwmTabwinWidget-icon-size: $icon_size * 3;
  -XfwmTabwinWidget-preview-size: $icon_size * 6;
  -XfwmTabwinWidget-listview-icon-size: $icon_size * 2;

  all: unset;

  &.background {
    border: 0 none transparent;
    border-radius: $r_8;
    @if $variant == mixed {
      background-color: track($color_bg_dark_inv, $alpha_osd);
      color: $color_fg_inv;
    }
    @else {
      background-color: track($color_bg_dark, $alpha_osd);
      color: $color_fg;
    }
  }

  > box.vertical {
    padding: $tabwin_padding;

    > label {
      margin-top: $tabwin_padding;
      font-weight: 400;
    }
  }

  button.flat {
    @if $variant == mixed { @extend %inv-action-area-button; }
    @else { @extend %action-area-button; }
    padding: $tabwin_padding;
    font-weight: 500;
    &:not(:disabled) { background-image: none; } // unset ink-reactions
    &:not(:hover):not(:active):not(:checked):not(:disabled) {
      color: if($variant == mixed, $color_fg_inv_2, $color_fg_2);
    }

    box.vertical {
      > label { padding-top: $tabwin_padding / 2; }

      > image { padding: ($tabwin_padding / 2) 0; }
    }

    box.horizontal > label {
      &:dir(ltr) { padding-left: $tabwin_padding / 2; }
      &:dir(rtl) { padding-right: $tabwin_padding / 2; }
    }
  }

  .tabwin-app-grid button.flat {
    min-width: $icon_size * 6 + $tabwin_padding * 2;
    min-height: $icon_size * 6 + $tabwin_padding * 2;
  }
}

dialog.xfsm-logout-dialog.keycap { // keycap class!? crazy...
  @include radius(0, none);
  border: 1px solid $color_fg_div_sld;
  background-color: $color_bg;
  color: $color_fg;
  box-shadow: none;

  label.xfsm-logout-label {
    color: $color_fg_3;
    font-weight: 700;
  }

  // hide unneeded separator
  separator.horizontal { background-color: transparent; }
}

// /**********
//  * Thunar *
//  **********/

window.thunar {
  toolbar#location-toolbar {
    // why didn't devs use .text/.image button class?
    .linked.path-bar > button.path-bar-button { @extend %pathbar_button; }

    entry:not(.flat) {
      min-height: rem($toolitem_size, $sw: 1.0);
      margin: 1px 0; // = outlined button's border-widths
    }
  }

  > grid.horizontal > paned.horizontal { border-top: 1px solid $color_fg_div; }

  notebook {
    // hide unneeded border
    stack > scrolledwindow.frame.standard-view { border-top-width: 0; }

    // EelCanvasItem
    widget.view { @extend .nautilus-canvas-item; }
  }
}

// /**************
//  * FeedReader *
//  **************/

// left-paned headerbar
paned.headerbar_pane.titlebar > headerbar.header_right.titlebar {
  > box.linked.raised > button.toggle { // should be .text-button
    &:dir(ltr) {
      @include radius(0);
      &:first-child { @include radius($r_2 0 0 $r_2); }
      &:last-child { @include radius(0 $r_2 $r_2 0); }
    }
    &:dir(rtl) {
      @include radius(0);
      &:first-child { @include radius(0 $r_2 $r_2 0); }
      &:last-child { @include radius($r_2 0 0 $r_2); }
    }
  }
}

// article-list
overlay.article-list > stack {
  > scrolledwindow > viewport.frame > list {
    background-color: $color_bg;

    > row.activatable {
      &:hover { background-color: $color_bg_trk; }
      &:selected {
        &,
        &:focus {
          background-color: track($color_bg_sel, $alpha_track_1);
          &:dir(ltr) { box-shadow: inset 4px 0 $color_bg_sel; }
          &:dir(rtl) { box-shadow: inset -4px 0 $color_bg_sel; }

          label {
            &,
            &.headline-read,
            &.preview { color: $color_fg; }
          }
        }
      }
    }
  }
}

revealer > widget > headerbar.imageOverlay.titlebar {
  > box > button.close.titlebutton { // non-CSD inline-headerbar
    min-width: rem($widget_size);
    min-height: rem($widget_size);
    padding: 0;
  }
}

// /************
//  * Synaptic *
//  ************/

window > box.vertical > box.horizontal {
  > toolbar {
    background-color: transparent;
    box-shadow: none;

    toolitem > box {
      label,
      entry {
        min-height: rem(13.3px);
        padding-top: rem($baseline);
        padding-bottom: rem($baseline);
        font-size: 90%;
      }

      > label { color: $color_fg_dis; }
    }
  }

  > widget { background-color: transparent; }
}

// /**********************
//  * Eclipse/SWT (neon) *
//  **********************/

window.background:not(.solid-csd) > box.vertical {
  > scrolledwindow widget > toolbar {
    box-shadow: none; // remove inline-shadows

    button { // hard-coded crazy zero-padding
      &, &.flat {
        min-height: if($ref_weight < 1.0, $icon_size * 1.5, $icon_size * 1.75);
        min-width: if($ref_weight < 1.0, $icon_size * 1.5, $icon_size * 1.75);
        margin: 2px 0;
        @include radius($r_2);
      }
    }

    separator { margin: 2px 0; }
  }

  > scrolledwindow > widget > widget {
    border-width: 0 0 1px;
    border-style: none none solid;
    border-color: transparent transparent $color_fg_div_sld;
  }

  widget > frame > widget > widget > scrolledwindow > textview {
    // override hard-coded crazy rgb(0,0,0)
    text { background-image: image($color_base); }
  }

  scrolledwindow widget > widget {
    > checkbutton check,
    > radiobutton radio { // disable ripple animations
      &:hover,
      &:active,
      &:hover:checked,
      &:hover:indeterminate { animation: none; }
    }
  }
}

// /*******************
//  * Firefox Quantum *
//  *******************/

%_html_button_spacing {
  min-width: unset; // do not set min-width/height
  min-height: unset;
  padding: if($ref_weight < 1.0, 4px 8px 5px, 7px 11px 8px);
}

%_html_entry_spacing {
  min-width: if($ref_weight < 1.0, 24px, 24px + 4px);
  min-height: if($ref_weight < 1.0, 24px, 24px + 4px);
  padding: if($ref_weight < 1.0, 0 4px, 0 7px);
}

%browser_csd_titlebutton {
  // define global titlebutton class sizing
  @include button(flat-normal);
  @include radius($r, none);
  margin: 0; // unset margins
  padding: 0;

  &.close {
    color: if($variant == mixed, $color_fg_inv_2, $color_fg_2);
    &:hover {
      background-color: $color_bg_dest;
      color: $color_fg_sel;
    }
    &:active,
    &:backdrop:active {
      background-color: $color_bg_sel;
      color: $color_fg_sel;
    }
    &:backdrop {
      @if $variant == mixed {
        color: track($color_fg_inv, $alpha_foreground_bdp);
      }
      @else {
        color: track($color_fg, $alpha_foreground_bdp);
      }
      &:hover {
        background-color: track($color_bg_dest, $alpha_foreground_bdp);
        @if $variant == mixed {
          color: mix($color_fg_sel, $color_bg_dark_inv, percentage($alpha_foreground_bdp));
        }
        @else {
          color: mix($color_fg_sel, $color_bg_dark, percentage($alpha_foreground_bdp));
        }
      }
    }
  }

  &.minimize,
  &.maximize {
    color: if($variant == mixed, $color_fg_inv_2, $color_fg_2);
    &:hover {
      @if $variant ==mixed {
        background-color: track($color_fg_inv, $alpha_track_1);
        color: $color_fg_inv;
      }
      @else {
        background-color: track($color_fg, $alpha_track_1);
        color: $color_fg;
      }
    }
    &:active,
    &:active:backdrop {
      @if $variant ==mixed {
        background-color: track($color_fg_inv, $alpha_track_2);
        color: $color_fg_inv;
      }
      @else {
        background-color: track($color_fg, $alpha_track_2);
        color: $color_fg;
      }
    }
    &:backdrop {
      @if $variant == mixed {
        color: track($color_fg_inv_2, $alpha_foreground_bdp);
      }
      @else {
        color: track($color_fg_2, $alpha_foreground_bdp);
      }
      &:hover {
        @if $variant ==mixed {
          background-color: track($color_fg_inv, $alpha_track_1);
          color: track($color_fg_inv, $alpha_foreground_bdp);
        }
        @else {
          background-color: track($color_fg, $alpha_track_1);
          color: track($color_fg, $alpha_foreground_bdp);
        }
      }
    }
  }
}

#MozillaGtkWidget.background {
  @if $maj_ver == 3 {
    @if $mnr_ver < 23 {
      headerbar.titlebar { // legacy
        padding: 0 if($ref_weight < 1.0, (28px - $icon_size * 1.25) / 2,
                                         (28px - $icon_size * 1.5) / 2);

        &.default-decoration button.titlebutton {
          @extend %browser_csd_titlebutton;
          min-width: if($ref_weight < 1.0, $icon_size * 1.25,
                                           $icon_size * 1.5);
          min-height: if($ref_weight < 1.0, $icon_size * 1.25,
                                            $icon_size * 1.5);
        }
      }
    }
  }

  window.background,
  menu {
    > menu { border: unset; } // hide ugly double borders
  }

  > widget {
    // 'PageInfo' window's ViewGroup > radio?
    > radiobutton,
    > checkbutton {
      &:focus { outline-width: 0; } // hide outlines
    }

    border { border-color: $color_fg_div_sld; }

    separator { background-color: $color_fg_div_sld; }

    > scrolledwindow > textview text {
      &:selected { @extend %selected_items; }
    }

    > button {
      &.combo, // generic button and combo spacing
      & { @extend %_html_button_spacing; }

      // toolbar combo buttons in 'downloads' sub-window
      &:not(.combo) > button { @extend %_html_button_spacing; }
    }

    > entry {
      @extend %_html_entry_spacing;
      // enforce fallback radius
      @include radius($r_4, none);
    }
  }
}

@import 'resources/mate_flag';

@if $mate_support == yes {
  // /**************
  //  * Mate-Panel *
  //  **************/

  // Most parts are themed in Gnome-panel section
  PanelToplevel.background { @extend %gnome_panel_toplevel; }

  #PanelWidget,
  #PanelPlug,
  #PanelApplet {
    @extend %gnome_panel_applet;
    background-color: $color_bg_panel; // >= 1.18.6
  }

  PanelSeparator {
    border-width: 0;
    background: none;
    background-image: none;
    color: $color_fg_panel_inv;
  }

  @each $layout, $size, $dir in (horizontal, 7px 14px, right),
                                (vertical, 14px 7px, bottom) {
    // a grip
    PanelToplevel.#{$layout} MatePanelAppletFrameDBus {
      background-repeat: no-repeat;
      background-size: #{$size};
      background-color: transparent;

      @if $layout == horizontal {
        @if $variant == light {
          background-image: -gtk-scaled(url("assets/panel-grip.png"),
                                        url("assets/panel-grip@2.png"));
        }
        @else {
          background-image: -gtk-scaled(url("assets/panel-grip-dark.png"),
                                        url("assets/panel-grip-dark@2.png"));
        }
        &:dir(ltr) { background-position: left; }
        &:dir(rtl) { background-position: right; }
      }
      @else if $layout == vertical {
        @if $variant == light {
          background-image: -gtk-scaled(url("assets/panel-grip-v.png"),
                                        url("assets/panel-grip-v@2.png"));
        }
        @else {
          background-image: -gtk-scaled(url("assets/panel-grip-v-dark.png"),
                                        url("assets/panel-grip-v-dark@2.png"));
        }
        background-position: top;
      }

      > MatePanelAppletFrameDBus { background: none; }
    }
  }

  // 'hide' arrow buttons
  PanelToplevel.mate-panel-menu-bar > grid.horizontal > button {
    min-height: 4px;
    min-width: 4px;
    padding: 0;
    @include radius(0);
    border-style: solid;
    border-color: $color_fg_panel_inv;
    @if $variant == mixed { @extend %inv_flat_button; }
    @else { @extend %flat_button; }

    > image { padding: 0 rem(4px, $sw: 1.0); }

    &:first-child {
      &:dir(ltr) { border-width: 0 1px 0 0; }
      &:dir(rtl) { border-width: 0 0 0 1px; }
    }
    &:not(:first-child) {
      &:dir(ltr) { border-width: 0 0 0 1px; }
      &:dir(rtl) { border-width: 0 1px 0 0; }
    }
  }

  .mate-panel-menu-bar {
    menubar,
    #PanelApplet-window-menu-applet-button {
      @extend %gnome_panel_menubar;

      > menuitem { @extend %gnome_panel_menuitem; }
    }

    #clock-applet-button label {
      // embed padding into label node directly (x 1.5)
      padding: 0 rem(4px * 1.5, $sw: 1.0);
    }
  }

  .mate-panel-menu-bar.vertical { // vertical layout
    menubar,
    #PanelApplet-window-menu-applet-button {
      > menuitem {
        padding: rem(4px, $sw: 1.0) 0;
        &:hover { box-shadow: inset 2px 0 $color_bg_sel; }
      }
    }

    #tasklist-button,
    #clock-applet-button,
    #showdesktop-button {
      &:hover { box-shadow: inset 2px 0 $color_fg_trk_out; }
      &:checked,
      &:hover:checked { box-shadow: inset 2px 0 $color_bg_sel; }

      label { margin-bottom: 0; } // unset baseline
    }

    #clock-applet-button label { padding: rem(4px * 1.5, $sw: 1.0) 0; }
  }

  // Brisk-Menu applet
  .mate-panel-menu-bar button.flat.toggle {
    &.brisk-button {
      padding: 0 rem(4px, $sw: 1.0);
      @include radius(0);
      @if $variant == mixed { @extend %inv_flat_button; }
      @else { @extend %flat_button; }
      font-weight: 700;
      &:hover {
        @if $variant != light {
          @include button(flat-normal, $tc: $color_fg_sel);
        }
        @else {
          @include button(flat-normal, $tc: black);
        }
        box-shadow: inset 0 -2px $color_fg_trk_out;
      }
      &:active { animation: none; }
      &:checked {
        @if $variant != light {
          @include button(flat-lined-checked, $tc: $color_fg_sel);
        }
        @else {
          @include button(flat-lined-checked, $tc: black);
        }
      }

      label { margin-bottom: 0; } // unset baseline
    }

    // vertical panel mode?
    &.brisk-button-vertical {
      padding: 0;
      &:hover { box-shadow: inset 2px 0 $color_fg_trk_out; }
      &:checked { box-shadow: inset 2px 0 $color_bg_sel; }
    }
  }

  .brisk-menu {
    border: 1px solid $color_fg_div_sld;
    background-color: $color_bg_dark;

    entry { // search-entry
      margin: rem(4px);
      @extend %flat_entry_sizing;
      @include radius($r_4 $r_4 0 0, none);
      @include entry(flat-normal);
      &:focus { @include entry(flat-focus); }
      &:disabled { @include entry(flat-disabled); }
    }

    box.horizontal scrolledwindow { // right-pane
      &:dir(ltr) { margin: rem(4px) rem(4px) rem(4px) 0; }
      &:dir(rtl) { margin: rem(4px) 0 rem(4px) rem(4px); }

      &.frame {
        border: unset;
        &:dir(ltr) {
          border-left: 1px solid if($variant == dark, track(white, $alpha_div_2),
                                                      $color_fg_div);
        }
        &:dir(rtl) {
          border-right: 1px solid if($variant == dark, track(white, $alpha_div_2),
                                                       $color_fg_div);
        }
      }
    }

    .categories-list { // left-pane
      &:dir(ltr) { margin: rem(4px) 0 rem(4px) rem(4px); }
      &:dir(rtl) { margin: rem(4px) rem(4px) rem(4px) 0; }

      button.flat {
        font-weight: 500;
        transition-duration: $transition_d_short; // shorter duration
        // almost covers :hover pseudo-class
        &:checked {
          background-color: $color_bg_trk;
          color: $color_lbl_sel;
          &:dir(ltr) { @include radius($r_2 $r $r $r_2); }
          &:dir(rtl) { @include radius($r $r_2 $r_2 $r); }
        }

        image { padding: rem(8px) 0; }
      }

      separator.horizontal {
        background-color: if($variant == dark, track(white, $alpha_div_2),
                                               $color_fg_div);
      }
    }

    // hide separator above session-buttons
    box.vertical > box.horizontal > box.vertical > separator.horizontal {
      min-height: 0;
      background-color: transparent;
    }

    button.flat.image-button.session-button { // enlarge L/R padding
      padding: 0 rem($txt_button_lr_space);
    }

    @at-root %brisk_right_pane,
    list.content-view.view { // right-pane
      background-color: $color_bg_dark;

      row.activatable {
        padding: 0;
        background-image: none;
        transition-duration: $transition_d_none;

        > button.flat {
          font-weight: 400;
          transition-duration: $transition_d_none; // needs quicker response

          // set vertical padding with icon's padding
          > box.horizontal > image { padding: rem(5.3px) 0; }
        }
      }
    }

    @if $maj_ver == 3 {
      @if $mnr_ver < 23 {
        .apps-list { @extend  %brisk_right_pane; }
      }
    }
  }

  .mate-panel-applet-slider {
    background-color: transparent;

    frame { // draw actual widget
      border: 1px solid $color_fg_div_sld;
      border-radius: $r_4;
      background-color: $color_bg_dark;

      // unset borders
      *,
      > border { border: unset; }
    }
  }

  // /***********************
  //  * Mate-Control-Center *
  //  ***********************/

  // almost out of control, and looks ugly
  window#MyControlCenter > frame > box.horizontal {
    > widget > scrolledwindow.frame {
      border: none;
      // draw pane-separator with borders
      // FIXME: rendering quality is quite poor
      &:dir(ltr) { border-left: 1px solid $color_fg_div_sld; }
      &:dir(rtl) { border-right: 1px solid $color_fg_div_sld; }

      > widget.view { // content-view
        all: unset;
        background-color: $color_bg; // does not work
      }
    }
  }

  // /**************
  //  * Mate-Tweak *
  //  **************/

  .background:not(.csd) > box.horizontal {
    > notebook { // right-pane
      // remove unwanted frames/borders
      &.frame {
        border: none;

        > stack {
          border-width: 1px;
          border-style: solid;
          border-color: $color_bg;
          box-shadow: none;
          &:dir(ltr) { border-left-color: $color_fg_div_pane; }
          &:dir(rtl) { border-right-color: $color_fg_div_pane; }
        }
      }
    }
  }

  // /*******
  //  * Eom *
  //  *******/

  .eom-window {
    statusbar { // always use dark-variant
      margin: 0 -10px; // hide weird lateral gaps
      padding: 0 $toolbar_padding;
      background-color: $color_bg_dark_inv;
      color: $color_fg_inv;
    }
  }

  // /*********
  //  * Pluma *
  //  *********/

  .pluma-window {
    paned.horizontal notebook {
      > header.top { // revive top-border when tabs are shown
        border-top: 1px solid $color_fg_div;
        background-color: $color_bg;
      }
    }

    statusbar {
      margin: 0 -10px; // hide weird lateral gaps
      padding: 0 $toolbar_padding;
      background-color: $color_bg_dark;

      frame,
      .frame { border-style: none; }
    }

    // side-pane styling
    paned.horizontal box.vertical notebook {
      &.frame { border-style: solid none; }
    }

    // print-preview styling
    .pluma-print-preview toolbar.horizontal {
      border-width: 1px 0;
      border-style: solid none;
      border-color: $color_fg_div transparent;
      background-color: $color_bg_dark;
    }
  }
}

// /********
//  * Caja *
//  ********/

.caja {
  &-canvas-item { @extend .nautilus-canvas-item; }

  &-list-dim-label { @extend .nautilus-list-dim-label; }
}

.caja-desktop { // desktop icon-grid styling
  &.caja-canvas-item { @extend %nautilus_desktop_items; }

  > widget.entry { // = EelEditableLabel.entry
    &, &:focus {
      transition: none;
      &:selected { @extend %selected_items; }
    }
  }
}

.caja-navigation-window {
  // side-panel styling
  .caja-side-pane {
    scrolledwindow {
      @extend %sidebar_template;

      treeview.view {
        background-color: transparent;
        // font-weight: 500;
        &:selected { @extend %selected_items; }
      }
    }

    notebook {
      border-top: 1px solid $color_fg_div;

      .frame { border: none; }
    }

    button.flat:last-child { // 'close' button on header
      @extend %toolitem_size;
    }
  }

  // main toolbar styling
  toolbar.primary-toolbar { border-bottom: 1px solid $color_fg_div; }

  .caja-pathbar { // path-bar styling
    button {
      &:first-child { // remove meaningless gaps
        &:dir(ltr) {
          margin-right: -2px;
          @include radius($r_2 0 0 $r_2);
        }
        &:dir(rtl) {
          margin-left: -2px;
          @include radius(0 $r_2 $r_2 0);
        }
      }
      &:not(:first-child):not(:last-child) {
        margin: 0 -2px;
        @include radius(0);
      }
      &:last-child {
        &:dir(ltr) {
          margin-left: -2px;
          @include radius(0 $r_2 $r_2 0);
        }
        &:dir(rtl) {
          margin-right: -2px;
          @include radius($r_2 0 0 $r_2);
        }
      }

      &, &.slider-button { @extend %toolitem_size; }
    }
  }

  button.image-button.toggle { // most-left toggle button in path-bar pane
    @extend %toolitem_size;
    @include radius($r_2);
  }

  .caja-notebook {
    border-top: 1px solid $color_fg_div; // top only

    .frame { border-width: 0 0 1px; } // bottom only

    treeview.view:not(:focus):selected {
      // protect selection backgrounds in 'extra pane' mode
      background-image: image($color_bg_sel);
    }
  }

  statusbar {
    margin: 0 -10px; // hide weird lateral gaps
    padding: 0 $toolbar_padding;
    background-color: $color_bg_dark;
  }

  // workaround for invisible text in rename entry
  scrolledwindow widget > widget.entry {
    &, &:focus {
      transition: none;
      &:selected { @extend %selected_items; }
    }
  }
}

#caja-extra-view-widget {
  border-bottom: 1px solid $color_fg_div;
  background-color: $color_bg; // needs overriding

  > box > box > label { font-weight: 700; }
}

// /*****************
//  * Atril/Xreader *
//  *****************/

.atril-window,
.xreader-window {
  scrolledwindow.frame {
    border-style: solid none none;

    > .view { // = evview?
      transition: none;
      &:selected,
      &:active { @extend %selected_texts; }
    }
  }

  toolbar > toolbutton button.flat.image-button { // back to square buttons
    @include radius($r_2);
  }

  // 'presentation' mode fullscreen?
  &.fullscreen.background > box.vertical {
    background-color: black; // turn to pitch-black
    transition-duration: $transition_d_none; // unset transitions

    // use opaque borders
    > toolbar:not(.primary-toolbar).horizontal {
      border-bottom-color: $color_fg_div_sld;
    }

    // revert to standard backgrounds
    > paned.horizontal { background-color: $color_bg; }
  }
}

@if $mate_support == yes {
  // /*************************
  //  * Mate-MediaControl-OSD *
  //  *************************/

  // OSDs are much blurred?
  MsdOsdWindow {
    &.background.osd {
      border-radius: $r_8;
      @if $variant == mixed {
        border: 1px solid track($color_bg_dark_inv, $alpha_osd);
        background-color: track($color_bg_dark_inv, $alpha_osd);
      }
      @else {
        border: 1px solid track($color_bg_dark, $alpha_osd);
        background-color: track($color_bg_dark, $alpha_osd);
      }
      box-shadow: none;

      // FIXME: seems images have inverted fore/back colors?
      image { color: if($variant == mixed, $color_fg_inv, $color_fg); }

      .trough {
        border-radius: 0;
        border: none;
        @if $variant == mixed {
          background-color: track($color_fg_inv, $alpha_track_out);
        }
        @else {
          background-color: track($color_fg, $alpha_track_out);
        }
      }

      .progressbar {
        border-radius: 0;
        border: none;
        background-color: $color_bg_sccs;
      }
    }
  }

  // /***************************
  //  * Mate-Notification-Slate *
  //  ***************************/

  // use budgie-style OSDs
  .slate-notification {
    &-window {
      @extend %budgie_notification_window_base;

      .drop-shadow {
        @extend %budgie_notification_window_styling;
        margin: $shadow_margin_3; // enlarge the shadow area
        border-radius: $r_8;
      }
    }

    @extend %budgie_notification;
    border-radius: $r_8;
  }
}

// /****************
//  * Libre-Office *
//  ****************/

window.background:not(.solid-csd) {
  > widget > separator { color: $color_fg_div_sld; } // for toolbars

  // for 'Notebookbar' toolbar
  > notebook:not(.frame) {
    border: 0 none transparent; // unset borders
    background-color: $color_base;

    > stack {
      border: none;
      box-shadow: none;
    }
  }
}

// /************
//  * Inkscape *
//  ************/

// 2nd-row toolbars
box#AuxToolbox {
  border-top: 1px solid $color_fg_div;

  toolbar {
    @if $ref_weight < 1.0 {
      min-height: rem($toolitem_size, $sw: 1.0) + $toolbar_padding * 2;
    }
    border: none;
  }

  box#StyleSwatch label { font-size: 90%; } // shrink labels
}

// left/right-side, vertical toolbars
#SnapToolbar,
#ToolToolbar {
  > button,
  > toolitem > button,
  > toolbutton > button {
    // dim disabled icons
    &:disabled {
      image { opacity: $alpha_foreground_dis; }

      &:checked { background-color: track($color_fg, $alpha_track_1); }
    }
  }
}

// scrolled color-palette
#PreviewHolderScroller > viewport.frame {
  padding: 1px 0;
  border-style: solid none; // add fake border to top/bottom
  border-width: 1px 0;
  border-color: transparent;
}

// misc
#DesktopMainTable spinbutton > entry {
  &:dir(ltr) { margin-right: rem(8px); } // gap between entry and buttons
  &:dir(rtl) { margin-left: rem(8px); }
  // workaround for truncated labels in GimpSpinScale
  // FIXME: need to override weird inner-padding?
  padding: 0;

  // re-fit to the parent entry node spacing
  @if $maj_ver == 3 {
    > progress { margin: 0; }
  }
  @else {
    > progress trough > progress { margin: 0; }
  }
}

#InkscapePanel {
  box#PanelContents,
  box#PaintSelector {
    button {
      &.toggle,
      &.radio {
        @extend %toolitem_size;
        margin: 0;
        @include radius($r_2);
      }
    }
  }
}

box#InkSpinScale { // >= 0.92+
  // cover up ugly stock style.css
  border-image: image($color_bg) 2 / 2px;
  box-shadow: inset 0 0 0 999px $color_bg;

  trough {
    &:not(:disabled) { background-color: track($color_bg_acc, $alpha_track_out); }
  }
}

box#DockBox > paned#DockBoxPane {
  // dock control buttons have 8px * 8px child widget?
  widget#GdlDock paned widget > widget > button.flat {
    min-width: $icon_size;
    min-height: $icon_size;
    padding: $icon_size / 4;
  }
}

// /**************
//  * Emacs24/25 *
//  **************/

@each $_version in '', '24' {
  window#Emacs#{$_version} {
    widget#emacs#{$_version} {
      > widget {
        > scrollbar {
          background-color: $color_base;

          // scrollbar node width '16px' is hard-coded?
          &.vertical {
            trough {
              border-width: 0 1px 0;
              border-style: solid;
              border-color: $color_fg_div_sld;
            }

            slider { min-width: 16px - (1px * 2); }
          }
        }
      }
    }
  }
}

// /************
//  * Electron *
//  ************/

// workaround for the context-menus in Electron apps
// do not use the alpha-blended colors
@if $maj_ver == 3 {
  @if $mnr_ver < 23 {
    window.popup:not(.csd) {
      menu {
        background-color: $color_bg_dark;

        menuitem {
          background-color: $color_bg_dark;
          color: mix($color_fg, $color_bg_dark, percentage($alpha_foreground_2nd));
          &:hover {
            background-color: mix($color_fg, $color_bg_dark, percentage($alpha_track_2));
            color: $color_fg;
          }
          &:disabled { // popup frame pulls this?
            background-color: $color_bg_dark;
            color: mix($color_fg_fix, $color_bg_dark, percentage($alpha_foreground_dis));

            label, // reset for generic non-composited Gtk apps
            arrow { color: mix($color_fg, $color_bg_dark, percentage($alpha_foreground_dis)); }
          }
        }
      }
    }
  }
}

// /********************
//  * Transmission-Gtk *
//  ********************/

window.background:not(.solid-csd) > box.vertical > grid.horizontal {
  // add spacing for 'Ratio' label
  > label {
    padding: 0 rem(5.3px, $sw: 1.0) rem($baseline, $sw: 1.0);
  }
}

// /**************************
//  * Remmina Remote Desktop *
//  **************************/

@if $maj_ver == 3 {
  @if $mnr_ver < 23 {
    window.background:not(.solid-csd) {
      // inline headerbar
      > box.vertical > headerbar:not(.titlebar) {
        > box.horizontal {
          > entry,
          > entry.default { // .default is added when focused only? crazy...
            @if $variant == mixed { @extend %inv_entry; }
          }

          // hide unneeded separator
          > separator { background-color: transparent; }
        }
      }
    }
  }
}

// /***********
//  * Synapse *
//  ***********/

window.background:not(.solid-csd) > box.vertical {
  > widget widget,
  > box.vertical widget {
    &:selected { // selected-row?
      @extend %selected_items;
    }
  }
}

// /***************
//  * Chrome(ium) *
//  ***************/

%chromium_unfocused_tab {
  color: if($variant == mixed,
            mix($color_fg_inv, $color_bg_dark_inv, percentage($alpha_foreground_3rd)),
            mix($color_fg, $color_bg_dark, percentage($alpha_foreground_3rd)));
}

window.background.chromium {
  menubar {
    @extend %chromium_unfocused_tab; // for SSDs
  }

  headerbar.titlebar {
    @extend %chromium_unfocused_tab; // for CSDs

    // from nav_button_provider_gtk3.cc (> 62.0.3202?)
    button.titlebutton { // title-buttons
      @extend %browser_csd_titlebutton;
      min-width: $titlebutton_small;
      min-height: $titlebutton_small;
    }
  }

  button { // for active-tab top edge borders
    border-color: $color_bg_sel;
  }

  > button:not(.suggested-action):not(.destructive-action),
  > treeview.view button {
    // and then reset above borders for generic buttons
    border-color: $color_fg_div;
  }

  > treeview.view button { background-color: $color_bg; } // header buttons

  > scrollbar button { // stepper buttons
    border-color: $color_bg;
    background-color: $color_bg;
  }

  > button.suggested-action:selected { // for 'focused' prominent button
    background-color: mix($color_fg_sel, $color_bg_sgst, percentage($alpha_track_1));
  }

  @if $variant == mixed { // do not mix with foregrounds
    > spinner { color: $color_bg_acc; }
  }
}

// /*********
//  * Tilix *
//  *********/

headerbar > box.horizontal.linked {
  > button.image-button.session-new-button { // down-arrow button
    // hard-coded 2px L/R padding
    min-width: calc(#{rem($widget_size)} - (1px + 2px) * 2);
  }
}

// left-side revealer
window.background > overlay > revealer { // parent container
  @each $_position, $_side_margin in (left, right),
                                     (right, left) {
    &.#{$_position} > scrolledwindow.frame {
      margin-#{$_side_margin}: 16px;
      border: none;
      box-shadow: $z-depth-3; // depth-4 is semantically right,
                              // but too deep
    }
  }
}

list.tilix-session-sidebar {
  // use -image property instead
  background-image: image($color_bg_dark);

  button.tilix-sidebar-close-button {
    min-height: rem($small_widget);
    min-width: rem($small_widget);
    padding: 0;
  }
}

// in-line titlebars
widget > box.terminal-titlebar {
  > button.flat.popup.toggle {
    min-height: $menuitem_height;
    @include radius(0);
    &:dir(ltr) { padding: 0 rem(13.3px) 0 0; }
    &:dir(rtl) { padding: 0 0 0 rem(13.3px); }
    &:checked {
      border-image:
        radial-gradient(circle farthest-corner at center,
                        $color_bg_sel 100%,
                        transparent)
                        0 0 2 / 0 0 2px;
      background-color: transparent;
    }

    label.tilix-terminal-title {
      // move button spacing into label node
      min-height: $menuitem_height;
      margin: 0;
      padding: 0 rem($txt_button_lr_space);
      color: $color_fg_2;
      &:disabled { color: $color_fg_dis; }
      &:not(:disabled) {
        border-image:
          radial-gradient(circle farthest-corner at center,
                          $color_bg_sel 100%,
                          transparent)
                          0 0 2 / 0 0 2px;
        background-color: transparent;
      }
    }

    &:hover,
    &:active,
    &:checked {
      &, label.tilix-terminal-title {
        &, &:disabled { color: $color_fg; }
      }
    }
  }

  > button.image-button { // 'plus' and 'close'
    &, &.toggle {
      min-width: $menuitem_height;
      min-height: $menuitem_height;
      margin: 2px;
      padding: 0;
    }
  }

  &.compact { // 'Small' option
    > button.flat.popup.toggle {
      &:dir(ltr),
      &:dir(rtl) {
        min-width: $icon_size;
        min-height: $icon_size;
        padding: 0;
      }

      label.tilix-terminal-title {
        padding: rem($baseline, $sw: 1.0)
                 rem($baseline * 2)
                 rem($baseline * 2, $sw: 1.0);
      }
    }

    > button.image-button {
      &, &.toggle {
        min-width: $icon_size;
        min-height: $icon_size;
        margin: 0;
        padding: rem($baseline * 2, $sw: 1.0);
      }
    }
  }
}

// tab 'close' button when 'use tabs instead of sidebars'
notebook.tilix-background tab.reorderable-page {
  button.tilix-small-button { // hard-coded 2px padding
    @extend %tab_close_button;
    min-width: calc(#{$icon_size} - 3px + #{rem($menuitem_padding)});
  }
}

// /********
//  * PSPP *
//  ********/

// upstream should convert this to treeview node
notebook.psppire-data-editor widget.view {
  border-radius: 0; // unset roundness of cells

  entry.flat { // = editable cell
    &,
    &:focus {
      min-height: $icon_size;
      min-width: $icon_size;
      padding: 0 3px;
      @include radius(0, none);
      border: 0 solid $color_bg_sel;
      background-color: $color_base;
      box-shadow: none;
      transition: none;
      &:dir(ltr) { border-left-width: 2px; }
      &:dir(rtl) { border-right-width: 2px; }

      selection { @extend %selected_items; }
    }
  }

  spinbutton {
    min-height: $icon_size;
    min-width: $icon_size;
    padding: 0;
    @include radius(0, none);

    &,
    entry.flat {
      border: none;
      background-color: $color_base;
    }

    button {
      &.up, &.down {
        min-height: $icon_size;
        min-width: $icon_size;
        background-color: $color_base;
      }
    }

    entry selection { @extend %selected_items; }
  }

  button:not(.flat) { // = column_header buttons
    @extend %column_header_button;
  }
}

// /**************
//  * Vala-Panel *
//  **************/

// That app does not have any position specific style-classes,
// so embed indicators at the bottom of tasklist buttons as default.
window#ValaPanel.background { // solid-mode
  background-color: $color_bg_panel;
  color: if($variant == mixed, $color_fg_inv, $color_fg);

  > decoration { all: unset; } // unset root decoration

  widget.-vala-panel-background > separator { // separator applet
    background-color: $color_fg_panel_inv;
  }
}

button.flat.-panel-button { // generic panel buttons
  min-width: $icon_size;
  min-height: $icon_size;
  padding: 0;
  @include radius(0);
  font-weight: 700;
  @if $variant == mixed {
    @include button(flat-normal, $tc: $color_fg_inv);
    @include ink-reaction(normal, $fc: $color_fg_inv, $tr: ink-normal-dec);
  }
  @else {
    @include button(flat-normal, $tc: $color_fg);
    @include ink-reaction(normal, $fc: $color_fg, $tr: ink-normal-dec);
  }
  @if $variant != light {
    &:hover { @include button(flat-hover, $tc: $color_fg_sel); }
    &:active {
      @include button(flat-active, $tc: $color_fg_sel);
      @include ink-reaction(
                 active-dec, $fc: $color_fg_sel, $tr: ink-active-dec);
    }
    &:disabled {
      @include button(flat-disabled, $tc: $color_fg_inv);
    }
  }
  @else {
    &:hover { @include button(flat-hover, $tc: black); }
    &:active {
      @include button(flat-active, $tc: black);
      @include ink-reaction(
                 active-dec, $fc: black, $tr: ink-active-dec);
    }
    &:disabled {
      @include button(flat-disabled, $tc: $color_fg);
    }
  }
  &:checked {
    @if $variant != light {
      @include button(flat-lined-checked, $tc: $color_fg_sel);
    }
    @else {
      @include button(flat-lined-checked, $tc: black);
    }
  }

  label { margin-bottom: 0; } // unset baseline

  box.vertical & {
    &:checked { box-shadow: inset 2px 0 $color_bg_sel; }
  }

  // FIXME: weird asymmetrical spacing exists at the right side of Application-
  // Menu icon even if the 'caption' GtkLabel was hidden, so add damned
  // compensator at the opposite side...
  > widget > box.horizontal {
    &:dir(ltr) { margin-left: 2px; }
    &:dir(rtl) { margin-right: 2px; }
  }

  &.text-button { // clock applet
    label { padding: 0 rem(4px * 1.5, $sw: 1.0); }

    box.vertical & label { padding: rem(4px * 1.5, $sw: 1.0) 0; }
  }
}

button.flat.-panel-icon-button {
  @extend %budgie_icon_tasklist_button;

  &:hover {
    @if $variant == mixed {
      box-shadow: inset 0 -2px track($color_fg_inv, $alpha_foreground_bdp);
    }
    @else {
      box-shadow: inset 0 -2px track($color_fg, $alpha_foreground_bdp);
    }
  }
  &:active,
  &:checked {
    box-shadow: inset 0 -2px $color_bg_sel;
  }

  box.vertical & {
    &:hover {
      @if $variant == mixed {
        box-shadow: inset 2px 0 track($color_fg_inv, $alpha_foreground_bdp);
      }
      @else {
        box-shadow: inset 2px 0 track($color_fg, $alpha_foreground_bdp);
      }
    }
    &:active,
    &:checked {
      box-shadow: inset 2px 0 $color_bg_sel;
    }
  }
}

.unpinned button.flat.-panel-icon-button,
.pinned button.flat.-panel-icon-button.running {
  @extend %running_budgie_icon_tasklist_button;

  > image {
    background-image:
      if($variant == light,
         image($color_bg_sel),
         image(saturate(lighten($color_bg_sel, percentage($alpha_track_2)),
                 percentage($alpha_track_2))));
    background-size: (6px / 1.1) 2px; // 1:1.1 aspect deformation exists
    background-position: bottom center;
  }

  &:hover,
  &:active,
  &:checked {
    box-shadow: inset 0 -2px $color_bg_sel;
  }

  box.vertical & {
    > image {
      background-size: 2px (6px / 1.1);
      background-position: left center;
    }

    &:hover,
    &:active,
    &:checked {
      box-shadow: inset 2px 0 $color_bg_sel;
    }
  }
}

// menubar-style'ed app menu
%vala_panel_menuitem {
  padding: 0 rem(4px, $sw: 1.0);
  @include radius(0, none);
  font-weight: 700;

  box.vertical & {
    padding: rem(4px, $sw: 1.0) 0;
    &:hover { box-shadow: inset 2px 0 $color_bg_sel; }
  }
}

menubar.-vala-panel-background {
  border: none;

  @if $maj_ver == 3 { // override global values
    > menuitem { @extend %vala_panel_menuitem; }
  }
  @else {
    > box > menuitem { @extend %vala_panel_menuitem; }
  }
}

// run dialog
.-panel-run-dialog {
  scrolledwindow.frame { margin: 6px 0 0; }

  row.activatable {
    .dim-label { opacity: $alpha_foreground_2nd; }

    &:hover,
    &:active,
    &:selected {
      .dim-label { opacity: 1.0; }
    }
  }
}

// non-CSD preference dialog
dialog.background:not(.csd) {
  .dialog-vbox stacksidebar.sidebar scrolledwindow {
    .frame { border: 1px solid $color_fg_div; }

    list {
      &:dir(ltr),
      &:dir(rtl) { box-shadow: none; }
    }
  }

  // hide unneeded animations (child radio node already has)
  .dialog-vbox grid.horizontal > grid.horizontal > modelbutton.flat {
    &:not(:disabled) {
      background-color: transparent;
      background-image: none;
      animation: none;
    }
  }
}

widget.-vala-panel-appmenu-core { // appmenu applets
  menubar {
    border-bottom: 0 none transparent;

    @if $maj_ver == 3 {
      > menuitem { @extend %vala_panel_appmenu_menuitem; }
    }
    @else {
      > box > menuitem { @extend %vala_panel_appmenu_menuitem; }
    }
  }
}

%vala_panel_appmenu_menuitem {
  @include radius(0, none);
  font-weight: 400;
  &:backdrop { opacity: 1.0; } // do not dimm in backdrop state
  &:hover {
    background-color: transparent;
    box-shadow: inset 0 -2px $color_bg_sel;

    box.vertical & { // for vertical vala-panel
      box-shadow: inset 2px 0 $color_bg_sel;
    }

    @each $along_side, $_line in (top, 0 3px),
                                 (bottom, 0 -3px),
                                 (left, 3px 0),
                                 (right, -3px 0) {
      .budgie-container.#{$along_side} & { // for budgie-panel
        box-shadow: inset #{$_line} $color_bg_sel;
      }
    }
  }

  @if $variant != light {
    .budgie-panel.transparent & {
      image { -gtk-icon-shadow: $z-depth-1; }

      label { text-shadow: $z-depth-1; }
    }
  }

  label { padding-bottom: 0; } // unset baseline
}

// /************
//  * Ubiquity *
//  ************/

window#live_installer {
  widget#title_eventbox.menubar { // title header container
    background-color: if($variant == mixed, $color_bg_dark_inv, $color_bg_dark);
    color: if($variant == mixed, $color_fg_inv, $color_fg);
    font-weight: 700;

    label#page_title,
    image#page_logo {
      color: if($variant == mixed, $color_fg_inv, $color_fg);
    }
  }

  widget#progress_eventbox.menubar { // bottom container
    border-top: 1px solid $color_fg_div;
    background-color: $color_base;
    color: $color_fg;

    // 4px from <data>
    progressbar trough { border-radius: 4px; }
  }
}

// /*********
//  * Pamac *
//  *********/

// left-pane
box.vertical > stack > box > revealer > stack > scrolledwindow {
  > viewport.frame > list {
    @extend %sidebar_template;
    &:dir(ltr) { border-right: 1px solid $color_fg_div; }
    &:dir(rtl) { border-left: 1px solid $color_fg_div; }

    > row.activatable {
      &:selected {
        &:dir(ltr) { @include radius(0 $r $r 0); }
        &:dir(rtl) { @include radius($r 0 0 $r); }

        &, &:focus { outline-width: 0; } // unset focus outlines

        &, &:hover {
          background-color: $color_bg_trk;

          &, label { color: $color_lbl_sel; }
        }
      }

      > label { font-weight: 500; }
    }
  }
}

// /*********
//  * Geany *
//  *********/

window#GeanyMainWindow {
  toolbar#GeanyToolbar { border-bottom: 1px solid $color_fg_div; }

  paned.vertical {
    > notebook.frame { // bottom-frame
      &:dir(ltr) { border-width: 0 0 1px 1px; }
      &:dir(rtl) { border-width: 0 1px 1px 0; }

      treeview.view:selected {
        background-color: $color_bg_trk;
        color: $color_lbl_sel;
      }
    }

    paned.horizontal > notebook.frame {
      border: none; // remove double borders around the L/R panes

      > stack > scrolledwindow { // left-pane
        @extend %sidebar_template;

        // Geany overrides theme's font settings anyway
        treeview.view { @extend %sidebar_treeview; }
      }
    }
  }

  // stock CSS gets in our way
  button#geany-close-tab-button { @include radius($r_2, none); }
}

// /**********
//  * Lutris *
//  **********/

// FIXME: I really want to purge this crap! :/

window.background > stack > box.horizontal > revealer { // left/right stack
  &:first-child {
    > scrolledwindow > viewport.frame > list.sidebar {
      &:dir(ltr) { border-right: 1px solid $color_fg_div; }
      &:dir(rtl) { border-left: 1px solid $color_fg_div; }

      > row.activatable {
        min-height: calc(#{rem($small_widget)} + 4px);
        &:hover:not(:selected) { // damned lutris.css gets in our way
          box-shadow: inset 0 0 0 999px mix($color_fg, $color_bg, percentage($alpha_track_1));
        }
        &:selected {
          @include radius(0);
          color: $color_fg;
          &:dir(ltr) {
            box-shadow: inset 0 0 0 999px
                        mix($color_lbl_sel, $color_bg, percentage($alpha_track_1)),
                        inset 4px 0 $color_bg_sel;
          }
          &:dir(rtl) {
            box-shadow: inset 0 0 0 999px
                        mix($color_lbl_sel, $color_bg, percentage($alpha_track_1)),
                        inset -4px 0 $color_bg_sel;
          }
        }

        button.flat { // should use .image-button.small-button class!
          min-width: rem($small_widget);
          min-height: rem($small_widget);
          @include radius($r);
        }
      }
    }
  }

  > scrolledwindow.game-scrolled {
    &:dir(ltr) { border-left: 1px solid $color_fg_div; }
    &:dir(rtl) { border-right: 1px solid $color_fg_div; }

    // alignment is locked by "Play" button 146px width placed above,
    // means we can't use font-sensitive scaling at all
    widget.game-panel > button.image-button {
      min-width: $icon_size * 2;
      min-height: $icon_size * 2;
    }
  }
}

// /*************
//  * Filezilla *
//  *************/

// FIXME: this is not our issue, wxPizza should use GtkFrame instead.
window.background {
  > widget:not(combobox):not(spinbutton):not(toolbar) {
    entry {
      border-radius: 0;
      border: 1px solid $color_fg_div_sld;
    }
  }
}

// /************
//  * Sequeler *
//  ************/

grid.horizontal {
  &.library-titlebar {
    // override stylesheet.css
    border-image: image($color_bg) 0 0 1 / 0 0 1px;

    label { color: $color_fg_3; }
  }

  &.library-toolbar {
    border-image: image($color_fg_div_sld) 1 0 0 / 1px 0 0;

    separator.vertical { // hide unneeded separators
      min-width: 0;
      min-height: 0;
      background: none;
    }

    button.flat { @include radius(0); }
  }
}

flowbox flowboxchild.library-box { // GtkFlowBox in sidebar
  &, &:hover {
    grid.library-inner-box { // override stylecsheet.css
      grid,
      label { color: $color_fg; }
    }
  }

  &:selected {
    @extend %selected_sidebar_row;
    &, &:hover {
      background-image: image(track($color_lbl_sel, $alpha_track_1));

      grid.library-inner-box {
        grid,
        label { color: $color_lbl_sel; }
      }
    }
  }
}
