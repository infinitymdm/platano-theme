//  *****************
//  * Common States *
//  *****************/

* {
  padding: 0;
  background-clip: padding-box;

  outline-color: $color_fg_trk_out;
  -gtk-outline-radius: $r_2;

  -gtk-secondary-caret-color: $color_bg_sel;

  // disable drop-shadows as default
  text-shadow: none;
  -gtk-icon-shadow: none;
}

@each $_node, // visible focus styling
      $_style,
      $_width,
      $_offset in (button, solid, 2px, -4px),
                  (modelbutton, solid, 2px, -2px),
                  (flowboxchild, solid, 2px, -2px),
                  (checkbutton, solid, 2px, 0),
                  (radiobutton, solid, 2px, 0),
                  (iconview, none, 0, 0),
                  (switch, none, 0, 0),
                  (scale, none, 0, 0),
                  (trough, none, 0, 0),
                  (row, solid, 2px, -2px),
                  (tab, none, 0, 0),
                  (label, solid, 2px, 0), {
  @if $maj_ver == 3 {
    #{$_node} {
      outline-style: #{$_style};
      outline-width: #{$_width};
      outline-offset: #{$_offset};

      @if $_style == solid {
        .titlebar &,
        headerbar & { // enforce hiding all in these elements
          outline-style: none;
          outline-width: 0;
        }
      }
    }
  }
  @else {
    #{$_node}:focus(visible) {
      outline-style: #{$_style};
      outline-width: #{$_width};
      outline-offset: #{$_offset};

      @if $_style == solid {
        .titlebar &,
        headerbar & { // enforce hiding all in these elements
          outline-style: none;
          outline-width: 0;
        }
      }
    }
  }
}

// /***************
//  * Base States *
//  ***************/

.background {
  background-color: $color_bg;
  color: $color_fg;
}

@if $maj_ver == 4 {
  // icon sizing
  .normal-icons { -gtk-icon-size: $icon_size; }

  .large-icons,
  image.drag-icons { -gtk-icon-size: $icon_size * 2; }
}

*:disabled {
  @if $maj_ver == 4 { -gtk-icon-filter: opacity($alpha_foreground_3rd); }
  @else { -gtk-icon-effect: dim; }
}

// for backdrop, tone down element surfaces with transparentize
%fade_effect {
  > * { @include transition(acc-acc, $p: $transition_p_hdb); }

  &:backdrop > * {
    opacity: $alpha_foreground_bdp;
    @include transition(dec-dec, $p: $transition_p_hdb);
  }
}

.gtkstyle-fallback {
  background-color: $color_bg;
  color: $color_fg_2;
  &:hover {
    background-color: mix($color_fg, $color_bg, percentage($alpha_track_1));
    color: $color_fg;
  }
  &:active {
    background-color: mix($color_fg, $color_bg, percentage($alpha_track_2));
    color: $color_fg;
  }
  &:disabled {
    background-color: $color_bg;
    color: $color_fg_dis;
  }
  &:selected {
    background-color: $color_bg_sel;
    color: $color_fg_sel;
  }
}

%view,
.view {
  background-color: $color_base;
  color: $color_fg;
  &:hover,
  &:active,
  &:selected { @include radius($r_2); }
  &:disabled { color: $color_fg_dis; }
  &:backdrop {
  }
  &:selected {
    &, &:focus { @extend %selected_items; }
  }
}

@if $maj_ver == 3 {
  .view,
  textview {
    text { @extend %text; }
  }

  textview border { background-color: $color_bg; }
}
@else {
  textview {
    > text { @extend %text; }

    border { background-color: $color_bg; }
  }
}

%text {
  background-color: $color_base;
  color: $color_fg;
  &:disabled { color: $color_fg_dis; }

  selection { @extend %selected_texts; }
}

iconview { @extend %view; }

%rubberband {
  border: 1px solid $color_bg_sel;
  background-color: track($color_bg_sel, $alpha_track_out);
}

rubberband {
  &,
  flowbox &,
  treeview & { @extend %rubberband; }
}

.rubberband { // content-view class needs this style-class, too
  &,
  .content-view & { @extend %rubberband; }
}

label {
  caret-color: currentColor; // this shouldn't be needed.

  &.separator { color: $color_fg_3; }

  &:disabled { color: $color_fg_dis; }
  &:selected,
  row:selected & { // no need to set backgrounds
    color: $color_fg_sel;
    &:disabled { color: $color_fg_dis_sel; }
  }

  selection { @extend %selected_texts; }

  // always use dark foreground in Gnome-Software
  &.kudo-label { color: $color_fg_fix; }
}

%dim_label,
.dim-label { opacity: $alpha_foreground_3rd; }

%osd,
.osd { opacity: $alpha_osd; }

.monospace { font-family: Monospace; }

// vbox and hbox separators
separator {
  min-height: 1px;
  min-width: 1px;
  background-color: $color_fg_div;

  popover &,
  menu > &,
  menuitem & { // dark variant specific
    @if $variant == dark {
      background-color: track(white, $alpha_div_2);
    }
  }
}

%arrow_size,
arrow {
  min-height: $icon_size;
  min-width: $icon_size;
}

// /**************
//  * GtkFlowBox *
//  **************/

flowbox {
  flowboxchild {
    padding: rem($menu_padding, $sw: 1.0);
    @include radius(0, $r_2);
    &:selected { @extend %selected_items; }
  }
}

frame.content-view flowbox > flowboxchild.tile {
  margin: if($ref_weight < 1.0, 6px, 8px);
  padding: if($ref_weight < 1.0, 6px, 8px);
  @include radius(2px, none);
  background-color: $color_base;
  color: $color_fg_2;
  box-shadow: $z-depth-1;
  @include transition(dec);
  &:selected {
    background-color: track($color_bg_sel, $alpha_track_out);
    color: $color_fg;
    box-shadow: $z-depth-2;
    @include transition(dec);
  }
  &:disabled {
    background-color: $color_bg_trk;
    color: $color_fg_dis_2;
    box-shadow: none;
  }
}

// /*************
//  * Assistant *
//  *************/

assistant { // sidebar styling
  .sidebar {
    padding: rem($menuitem_padding, $sw: 1.0) 0;
    &:dir(ltr) { border-right: 1px solid $color_fg_div; }
    &:dir(rtl) { border-left: 1px solid $color_fg_div; }

    label {
      padding: rem($menuitem_padding, $sw: 1.0)
               rem($txt_button_lr_space, $sw: 1.0)
               rem(($menuitem_padding + $baseline), $sw: 1.0);
      color: $color_fg_2;
      font-weight: 500;
      &.highlight {
        color: $color_lbl_sel;
        background-color: $color_bg_trk;
        &:dir(ltr) { @include radius(0 $r $r 0); }
        &:dir(rtl) { @include radius($r 0 0 $r); }
      }
    }
  }

  &.csd .sidebar { border-top-style: none; }
}

// /*********************
//  * Spinner Animation *
//  *********************/

spinner {
  min-width: $icon_size;
  min-height: $icon_size;
  -gtk-icon-source: -gtk-icontheme('process-working-symbolic');
  background: none;
  color: $color_fg_acc;
  opacity: 0; // non spinning spinner makes no sense
  &:checked {
    opacity: 1.0;
    animation: spinner $transition_d_spin $transition_t_lin infinite;
    &:backdrop { opacity: 1.0; }
  }
  &:disabled { color: track($color_fg_acc, $alpha_foreground_bdp); }
  &:backdrop { opacity: 0; }

  .osd &,
  .app-notification &,
  .floating-bar &,
  headerbar &,
  messagedialog & {
    @if $variant == mixed {
      color: $color_fg_acc_inv;
      &:disabled { color: track($color_fg_acc_inv, $alpha_foreground_bdp); }
    }
  }
}

// /**********************
//  * General Typography *
//  **********************/

@if $maj_ver == 4 {
  .type {
    &-large-title {
      @include fontscaling(2.4);
      font-weight: 300;
    }

    &-title {
      @include fontscaling(1.3);
      font-weight: 700;
    }

    &-heading {
      @include fontscaling(1.1);
      font-weight: 500;
    }

    &-body {
      @include fontscaling(1.0);
      font-weight: 400;
    }

    &-caption {
      @include fontscaling(0.9);
      font-weight: 400;
    }
  }
}

// /****************
//  * Text Entries *
//  ****************/

entry {
  // subtract border widths
  min-height: calc(#{rem($widget_size)} - 2px * 2);
  min-width: calc(#{rem($widget_size)} - 2px * 2);
  padding: 0 rem($entry_lr_space);
  border: 2px solid transparent; // initialize borders
  @include radius($r_2, none);
  background-clip: border-box;
  @include transition(dec);
  @include entry(normal);
  &:focus { @include entry(focus); }
  &:disabled { @include entry(disabled); }

  .background & {
    @include radius($r, none);
  }

  @if $maj_ver == 4 {
    block-cursor { @include entry(block-cursor); }
  }

  @at-root %flat_entry_sizing,
  toolbar *:not(.linked) &,
  popover *:not(.linked):not(combobox) > &:not(.combo),
  &.flat {
    min-height: rem($widget_size);
    min-width: rem($widget_size);
    border-width: 0;
    @include radius($r_4 $r_4 0 0, none);
  }

  @at-root %flat_entry_styling,
  toolbar *:not(.linked) &,
  popover *:not(.linked):not(combobox) > &:not(.combo),
  &.flat {
    @include entry(flat-normal);
    &:focus { @include entry(flat-focus); }
    &:disabled { @include entry(flat-disabled); }
  }

  selection { @extend %selected_texts; }

  image { // icons inside the entry
    &.left { margin-right: rem($entry_lr_space); }
    &.right { margin-left: rem($entry_lr_space); }
  }

  @if $maj_ver == 4 {
    placeholder { @extend %dim_label; }
  }

  @if $maj_ver == 3 {
    progress { @extend %entry_progress; }
  }
  @else {
    progress > trough > progress { @extend %entry_progress; }
  }

  @if $maj_ver == 3 {
    toolbar *:not(.linked) & progress,
    &.flat progress { @include radius(0, none); }
  }
  @else {
    toolbar *:not(.linked) & progress > trough > progress,
    &.flat progress > trough > progress { @include radius(0, none); }
  }

  // entry error, warning and missing style
  @each $e_type, $e_color in (error, $color_err),
                             (warning, $color_warn) {
    &.#{$e_type} {
      @include entry(normal, $fc: $e_color);
      &:focus { @include entry(focus, $fc: $e_color); }
      &:disabled { @include entry(disabled, $tc: $e_color); }

        selection { @extend %selected_items; }

      toolbar *:not(.linked) &,
      &.flat {
        @include entry(flat-normal, $fc: $e_color);
        &:focus { @include entry(flat-focus, $fc: $e_color); }
        &:disabled { @include entry(flat-disabled, $tc: $e_color); }
      }
    }
  }

  @if $maj_ver == 3 { // entry icons colors
    image { @extend %entry_icon; }
  }
  @else {
    > image { @extend %entry_icon; }
  }

  @if $maj_ver == 4 {
    &:focus > placeholder { opacity: 0; } // hide placeholders when focused

    &.password image.caps-lock-indicator {
      color: track(currentColor, $alpha_foreground_3rd); // dim CapsLock icon
    }
  }

  &:drop(active) {
    &, &:focus { box-shadow: inset 0 0 0 2px $color_fg_drop; }

    @if $variant == mixed {
      headerbar & { box-shadow: inset 0 0 0 2px $color_fg_drop_inv; }
    }
  }

  treeview & { // reset styling inside tree-view
    &, &.flat {
      &, &:focus {
        min-width: 0;
        min-height: 0;
        padding: 0 2px;
        @include radius(0, none);
        background-color: $color_base;
        box-shadow: none;
        @include transition(reset);

        @if $maj_ver == 4 {
          progress > trough > progress { @include radius(0, none); }
        }
        @else {
          progress {  @include radius(0, none); }
        }
      }
    }
  }

  @if $variant == mixed {
    headerbar & { @extend %inv_entry; }

    &.osd,
    .osd & {
      @extend %flat_entry_sizing;
      @include entry(flat-normal, $tc: $color_fg_inv);
      caret-color: $color_fg_inv;
      &:focus {
        @include entry(flat-focus, $tc: $color_fg_inv);
      }
      &:disabled {
        @include entry(flat-disabled, $tc: $color_fg_inv);
      }

      selection { @extend %selected_items; }

      @if $maj_ver == 4 {
        block-cursor {
          @include entry(block-cursor, $tc: $color_fg_inv, $c: $color_base_inv);
        }
      }
    }
  }

  .linked &:not(.flat) {
    &:not(:first-child):not(:last-child) {
      @include radius(0, none);
      @include linked-entry-outline($cld: center);

      @if $maj_ver == 3 {
        progress { @include radius(0, none); }
      }
      @else {
        progress > trough > progress { @include radius(0, none); }
      }
    }
    &:dir(ltr) {
      &:first-child {
        @include radius($r_2 0 0 $r_2, none);
        @include linked-entry-outline($dir: ltr, $cld: first);

        .background & {
          @include radius($r 0 0 $r, none);
        }

        @if $maj_ver == 3 {
          progress { @include radius($r 0 0 $r, none); }
        }
        @else {
          progress > trough > progress {
            @include radius($r 0 0 $r, none);
          }
        }
      }
      &:last-child {
        @include radius(0 $r_2 $r_2 0, none);
        @include linked-entry-outline($dir: ltr, $cld: last);

        .background & {
          @include radius(0 $r $r 0, none);
        }

        @if $maj_ver == 3 {
          progress { @include radius(0 $r $r 0, none); }
        }
        @else {
          progress > trough > progress {
            @include radius(0 $r $r 0, none);
          }
        }
      }
    }
    &:dir(rtl) {
      &:first-child {
        @include radius(0 $r_2 $r_2 0, none);
        @include linked-entry-outline($dir: rtl, $cld: first);

        .background & {
          @include radius(0 $r $r 0, none);
        }

        @if $maj_ver == 3 {
          progress { @include radius(0 $r $r 0, none); }
        }
        @else {
          progress > trough > progress {
            @include radius(0 $r $r 0, none);
          }
        }
      }
      &:last-child {
        @include radius($r_2 0 0 $r_2, none);
        @include linked-entry-outline($dir: rtl, $cld: last);

        .background & {
          @include radius($r 0 0 $r, none);
        }

        @if $maj_ver == 3 {
          progress { @include radius($r 0 0 $r, none); }
        }
        @else {
          progress > trough > progress {
            @include radius($r 0 0 $r, none);
          }
        }
      }
    }
    &:only-child:last-child {
      &:dir(ltr), &:dir(rtl) {
        @include radius($r, none);
        @include linked-entry-outline($cld: only);

        @if $maj_ver == 3 {
          progress { @include radius($r, none); }
        }
        @else {
          progress > trough > progress { @include radius($r, none); }
        }
      }
    }
  }

  .linked &.flat,
  toolitem .linked &:not(.flat) {
    &:not(:first-child):not(:last-child) {
      @include radius(0, none);
    }
    &:dir(ltr) {
      &:first-child { @include radius($r_4 0 0 0, none); }
      &:last-child { @include radius(0 $r_4 0 0, none); }
    }
    &:dir(rtl) {
      &:first-child { @include radius(0 $r_4 0 0, none); }
      &:last-child { @include radius($r_4 0 0 0, none); }
    }
    &:only-child:last-child {
      &:dir(ltr), &:dir(rtl) {
        @include radius($r_4 $r_4 0 0, none);
      }
    }
  }

  .linked.vertical &:not(.flat) {
    &:not(:first-child):not(:last-child) {
      @include linked-entry-outline($dir: vert, $cld: vert-center);

      &, .background & {
        @include radius(0, none);
        border-left-width: 2px;
        border-right-width: 2px;
      }

      @if $maj_ver == 3 {
        progress { @include radius(0, none); }
      }
      @else {
        progress > trough > progress { @include radius(0, none); }
      }
    }
    &:first-child {
      @include linked-entry-outline($dir: vert, $cld: first);

      &, .background & {
        @include radius($r_4 $r_4 0 0, none);
        border-left-width: 2px;
        border-right-width: 2px;
      }

      @if $maj_ver == 3 {
        progress { @include radius($r_4 $r_4 0 0, none); }
      }
      @else {
        progress > trough > progress {
          @include radius($r_4 $r_4 0 0, none);
        }
      }
    }
    &:last-child {
      @include linked-entry-outline($dir: vert, $cld: last);

      &, .background & {
        @include radius(0 0 $r_4 $r_4, none);
        border-left-width: 2px;
        border-right-width: 2px;
      }

      @if $maj_ver == 3 {
        progress { @include radius(0 0 $r_4 $r_4, none); }
      }
      @else {
        progress > trough > progress {
          @include radius(0 0 $r_4 $r_4, none);
        }
      }
    }
    &:only-child:last-child {
      &, .background & {
        @include radius($r, none);
        @include linked-entry-outline($cld: only);
      }

      @if $maj_ver == 3 {
        progress { @include radius($r, none); }
      }
      @else {
        progress > trough > progress { @include radius($r, none); }
      }
    }
  }

  .linked.vertical &.flat {
    &:not(:first-child):not(:last-child) {
      @include radius(0, none);
    }
    &:first-child { @include radius($r_4 $r_4 0 0, none); }
    &:last-child { @include radius(0 0 $r_4 $r_4, none); }
    &:only-child:last-child {
      @include radius($r_4 $r_4 0 0, none);
    }
  }

  &.entry-tag { // for libgd apps
    min-height: $icon_size;
    margin: rem($baseline * 2);
    padding: 0 rem($entry_lr_space);
    @include radius($r, none);
    border: 0 none transparent;
    background-image: image($color_bg_sgst);
    box-shadow: none;
    &:not(:hover):not(:active) { color: $color_fg_sel_2; }
    &:hover,
    &:active { color: $color_fg_sel; }

    &:dir(ltr) {
      margin-left: rem($entry_lr_space);
      margin-right: rem(-$entry_lr_space / 2);
    }
    &:dir(rtl) {
      margin-left: rem(-$entry_lr_space / 2);
      margin-right: rem($entry_lr_space);
    }

    &.button {
      &,
      &:hover,
      &:active { // unset styling
        background-color: transparent;
        background-image: none;
        border-image: none;
        border: none;
        box-shadow: none;
        animation: none;
      }
      &:not(:hover):not(:active) { color: $color_fg_sel_2; }
      &:hover,
      &:active { color: $color_fg_sel; }
    }
  }

  > window.background:not(.csd) { // 'candidate' pop-down window
    border-radius: 0;
    background-color: $color_base;

    // non-CSD decoration
    decoration { box-shadow: $z-depth-1; }

    frame > border { border: none; }

    treeview.view {
      &:selected { // fallback to standard hovering
        background-color: $color_bg_trk;
        color: $color_fg;
      }
    }
  }

  .inline-toolbar &,
  actionbar & {
    min-height: calc(#{rem($small_widget)} - 2px * 2);
    padding: 0 rem($entry_lr_space);
    &.flat { min-height: rem($small_widget); }
  }
}

%entry_icon {
  &:not(:hover):not(:active) { color: track(currentColor, $alpha_foreground_2nd); }
  &:active { color: $color_bg_sel; }
  &:disabled { color: track(currentColor, $alpha_foreground_dis); }
}

%entry_progress {
  margin: 0 rem(-$entry_lr_space);
  padding: 0 rem($entry_lr_space);
  @include radius($r, none);
  background-color: track($color_bg_acc, $alpha_track_out);
}

%inv_entry {
  @include entry(normal, $c: $color_base_inv,
                         $tc: $color_fg_inv);
  caret-color: $color_fg_inv;
  &:focus {
    @include entry(focus, $c: $color_base_inv,
                          $tc: $color_fg_inv);
    caret-color: $color_fg_inv;
  }
  &:disabled {
    @include entry(disabled, $c: $color_base_inv,
                             $tc: $color_fg_inv);
  }

  selection { @extend %selected_items; }

  @if $maj_ver == 4 {
    block-cursor {
      @include entry(block-cursor, $tc: $color_fg_inv, $c: $color_base_inv);
    }
  }
}

// /***********
//  * Buttons *
//  ***********/

button {
  // subtract border widths
  min-height: calc(#{rem($widget_size)} - 1px * 2);
  min-width: calc(#{rem($widget_size)} - 1px * 2);
  padding: 0 rem($txt_button_lr_space);
  border: 1px solid transparent; // initialize borders
  @include radius($r_2);
  background-clip: border-box;
  @include button(normal);
  font-weight: 500;
  @include ink-reaction(normal, $tr: ink-normal-dec);
  &:hover { @include button(hover); }
  &:disabled { @include button(disabled); }
  &:checked { @include button(checked); }
  &:checked:hover { @include button(checked-hover); }
  &:checked:disabled { @include button(checked-disabled); }

  // active state for non-native apps
  &:active {
    background-color: mix($color_fg, $color_base, percentage($alpha_track_2));
  }

  // active state for native apps
  .background &:active {
    @include button(active);
    @include ink-reaction(active-dec, $tr: ink-active-dec);
  }

  @at-root %flat_button,
  &.flat {
    min-height: rem($widget_size);
    min-width: rem($widget_size);
    border: none;
    @include button(flat-normal);
    @include ink-reaction(normal, $tr: ink-normal-dec);
    &:hover { @include button(flat-hover); }
    &:active {
      @include button(flat-active);
      @include ink-reaction(active-dec, $tr: ink-active-dec);
    }
    &:disabled { @include button(flat-disabled); }
    &:checked { @include button(flat-checked); }
    &:checked:disabled { @include button(flat-checked-disabled); }
  }

  label { margin-bottom: rem($baseline, $sw: 1.0); }

  &.image-button,
  &.circular,
  &.close {
    min-height: calc(#{rem($widget_size)} - 0.5px * 2);
    min-width: calc(#{rem($widget_size)} - 0.5px * 2);
    padding: 0;
    @include radius($r);
    @include ink-reaction(normal, $bs: 10, $tr: ink-normal-dec);
    &:active { @include ink-reaction(active-dec, $bs: 10,
                                     $tr: ink-active-dec); }

    &.flat {
      min-height: rem($widget_size);
      min-width: rem($widget_size);
    }

    &:not(.text-button) {
      label,
      image { padding: 0; }
    }
  }

  &.text-button,
  &.text-button.image-button,
  &.lock {
    @include radius($r_2);
    padding: 0 rem($txt_button_lr_space / 2);

    label,
    image { padding: 0 rem($txt_button_lr_space / 2); }
  }

  headerbar & { // GtkHeaderBar specific
    &:not(.flat),
    label.text-button:not(.flat) {
      &:not(.suggested-action):not(.destructive-action) {
        @if $variant == mixed { @extend %inv_button; }
      }
    }

    label.text-button { // workaround for Gnome-Software
      padding: 0;
      &:dir(ltr) { padding-right: rem($entry_lr_space / 2); }
      &:dir(rtl) { padding-left: rem($entry_lr_space / 2); }
    }

    &.flat {
      &:not(.suggested-action):not(.destructive-action) {
        @if $variant == mixed {
          @include button(flat-normal, $tc: $color_fg_inv);
          @include ink-reaction(normal, $fc: $color_fg_inv,
                                        $tr: ink-normal-dec);
          &:hover { @include button(flat-hover, $tc: $color_fg_inv); }
          &:active {
            @include button(flat-active, $tc: $color_fg_inv);
            @include ink-reaction(active-dec, $fc: $color_fg_inv,
                                              $tr: ink-active-dec);
          }
          &:disabled { @include button(flat-disabled, $tc: $color_fg_inv); }
        }
        &:checked { // enforce outlined-checked styling
          @include button(checked);
          &:hover { @include button(checked-hover); }
          &:disabled {
            @if $variant == mixed {
              @include button(checked-disabled, $tc: $color_fg_inv);
            }
            @else { @include button(checked-disabled); }
          }
        }
      }
    }
  }

  headerbar *:not(.linked) > &:not(.flat),
  headerbar > &:not(.flat) { // set radius
    &:not(.suggested-action):not(.destructive-action) {
      &:not(.titlebutton):not(.selection-menu) {
        &:not(.text-button):not(.lock):not(.color):not(.image-button) {
          // enforce circular buttons
          @include radius($r, none);
        }
      }

      &.text-button {
        &, &.image-button { @include radius($r_2, none); }
      }

      &.lock,
      &.color { @include radius($r_2, none); }
    }
  }

  headerbar:not(.selection-mode) *:not(.linked) > &:not(.flat),
  headerbar:not(.selection-mode) > &:not(.flat) { // set spacing
    &:not(.suggested-action):not(.destructive-action) {
      &:not(.titlebutton):not(.selection-menu) {
        &:not(.text-button):not(.lock):not(.color):not(.image-button) {
          min-height: calc(#{rem($widget_size)} - 0.5px * 2);
          min-width: calc(#{rem($widget_size)} - 0.5px * 2);
          padding: 0;
        }
      }
    }
  }

  headerbar.selection-mode *:not(.linked) > &:not(.flat),
  headerbar.selection-mode > &:not(.flat) { // set spacing
    &:not(.suggested-action):not(.destructive-action) {
      &:not(.titlebutton):not(.selection-menu) {
        &:not(.text-button):not(.lock):not(.color):not(.image-button) {
          min-height: calc(#{rem($widget_size)} + 0.5px * 2);
          min-width: calc(#{rem($widget_size)} + 0.5px * 2);
          padding: 0;
        }
      }
    }
  }

  headerbar.selection-mode & {
    &:not(.suggested-action):not(.destructive-action) {
      &:not(.titlebutton),
      &.selection-menu { // enforce flat buttons
        min-height: calc(#{rem($widget_size)} + 0.5px * 2);
        min-width: calc(#{rem($widget_size)} + 0.5px * 2);
        @if $variant == mixed {
          @include button(flat-normal, $tc: $color_fg_inv);
          &:hover { @include button(flat-hover, $tc: $color_fg_inv); }
          &:active { @include button(flat-active, $tc: $color_fg_inv); }
          &:disabled { @include button(flat-disabled, $tc: $color_fg_inv); }
          &:checked {
            background-color: $color_bg_sel;
            color: $color_fg_sel;
          }
          &:checked:disabled {
            @include button(flat-checked-disabled, $tc: $color_fg_inv);
          }
        }
        @else {
          @include button(flat-normal, $tc: $color_fg);
          &:hover { @include button(flat-hover, $tc: $color_fg); }
          &:active { @include button(flat-active, $tc: $color_fg); }
          &:disabled { @include button(flat-disabled, $tc: $color_fg); }
          &:checked {
            background-color: $color_bg_sel;
            color: $color_fg_sel;
          }
          &:checked:disabled {
            @include button(flat-checked-disabled, $tc: $color_fg);
          }
        }
      }
    }
  }

  %button_drop_target,
  &:drop(active) {
    color: $color_fg_drop;
    background-color: $color_bg_drop;

    @if $variant == mixed {
      headerbar & { color: $color_fg_drop_inv; }
    }
  }

  separator { // remove vertical separator
    min-height: 0;
    min-width: 0;
    border-color: transparent;
    background-color: transparent;
  }

  // overlay / OSD style
  @if $variant == mixed {
    &.osd,
    .osd & {
      &, &.flat {
        min-height: rem($widget_size);
        min-width: rem($widget_size);
        @include button(flat-normal, $tc: $color_fg_acc_inv);
        &:hover { @include button(flat-hover, $tc: $color_fg_acc_inv); }
        &:active { @include button(flat-active, $tc: $color_fg_acc_inv); }
        &:disabled { @include button(flat-disabled, $tc: $color_fg_inv); }
        &:checked { @include button(flat-checked, $tc: $color_fg_acc_inv); }
        &:checked:disabled {
          @include button(flat-checked-disabled, $tc: $color_fg_acc_inv);
        }
      }
    }
  }
  @else {
    &.osd,
    .osd & {
      &, &.flat {
        min-height: rem($widget_size);
        min-width: rem($widget_size);
        @include button(flat-normal, $tc: $color_fg_acc);
        &:hover { @include button(flat-hover, $tc: $color_fg_acc); }
        &:active { @include button(flat-active, $tc: $color_fg_acc); }
        &:disabled { @include button(flat-disabled, $tc: $color_fg); }
        &:checked { @include button(flat-checked, $tc: $color_fg_acc); }
        &:checked:disabled {
          @include button(flat-checked-disabled, $tc: $color_fg_acc);
        }
      }
    }
  }

  // big standalone buttons like in Documents pager
  &.osd {
    @at-root %osd_image_button,
    &.image-button { // enforce flat-buttons
      min-height: rem($widget_size);
      min-width: rem($widget_size);
      padding: rem($txt_button_lr_space / 2);
      &:not(:disabled) {
        background-color: if($variant == light, track($color_bg_dark, $alpha_osd),
                                                track($color_bg_dark_inv, $alpha_osd));
        &:hover {
          background-color:
            if($variant == light,
               track(mix($color_bg_dark, $color_fg_acc, percentage($alpha_foreground_2nd)),
                     $alpha_osd),
               track(mix($color_bg_dark_inv, $color_fg_acc, percentage($alpha_foreground_2nd)),
                     $alpha_osd));
        }
      }
    }
    &:disabled { opacity: 0; }

    .linked > & { // 'rotate CW/CCW' linked-buttons
      &.image-button {
        &:not(:disabled) {
          padding: rem($txt_button_lr_space / 2);
          @include radius($r_2);
          background-color: if($variant == light,
                               track($color_bg_dark, $alpha_osd),
                               track($color_bg_dark_inv, $alpha_osd));
          &:hover {
            background-color:
              if($variant == light,
                 track(mix($color_bg_dark, $color_fg_acc, percentage($alpha_foreground_2nd)),
                       $alpha_osd),
                 track(mix($color_bg_dark_inv, $color_fg_acc, percentage($alpha_foreground_2nd)),
                       $alpha_osd));
          }
        }
        &:first-child {
          &:dir(ltr) { @include radius($r_2 0 0 $r_2); }
          &:dir(rtl) { @include radius(0 $r_2 $r_2 0); }
        }
        &:last-child {
          &:dir(ltr) { @include radius(0 $r_2 $r_2 0); }
          &:dir(rtl) { @include radius($r_2 0 0 $r_2); }
        }
      }
    }
  }

  // Suggested and Destructive Action buttons
  @each $b_type, $b_color in (suggested-action, $color_bg_sgst),
                             (destructive-action, $color_bg_dest) {
    &, &.flat {
      &.#{$b_type} { // 1px border exists
        min-height: calc(#{rem($widget_size)} - 1px * 2);
        min-width: calc(#{rem($widget_size)} - 1px * 2);
        @include button(raised-normal, $c: $b_color,
                                       $tc: $color_fg_sel_2);
        @include ink-reaction(normal, $fc: $color_fg_sel,
                              $tr: ink-normal-dec);
        &:hover {
          @include button(raised-hover, $c: $b_color,
                                        $tc: $color_fg_sel);
        }
        &:active {
          @include button(raised-active, $c: $color_bg_sel,
                                         $tc: $color_fg_sel);
          @include ink-reaction(active-dec, $fc: $color_fg_sel,
                                $tr: ink-active-dec);
        }
        &:checked {
          @include button(raised-checked);
          &:disabled {
            border-color: mix($b_color, $color_bg, percentage($alpha_track_1));
            background-color: mix($b_color, $color_bg, percentage($alpha_track_1));
            color: $color_fg_dis_sel;
          }
        }
        &:disabled {
          @include button(raised-disabled, $tc: $color_fg);
        }
      }
    }
  }

  stackswitcher & { // do not shrink button width
    &:first-child,
    &:last-child,
    &:not(:first-child):not(:last-child) {
      min-height: rem($widget_size);
    }

    &.image-button.radio { // outlined linked-array
      min-width: rem($widget_size);
      @include radius(0);
      &:dir(ltr) { border-right-width: 0; }
      &:dir(rtl) { border-left-width: 0; }
      &:first-child {
        &:dir(ltr) { @include radius($r_2 0 0 $r_2); }
        &:dir(rtl) { @include radius(0 $r_2 $r_2 0); }
      }
      &:last-child {
        &:dir(ltr) {
          @include radius(0 $r_2 $r_2 0);
          border-right-width: 1px;
        }
        &:dir(rtl) {
          @include radius($r_2 0 0 $r_2);
          border-left-width: 1px;
        }
      }
    }

    &.text-button:not(.circular) { // exclude circular class
      &, &.flat { // use tab-like switcher styling
        min-width: rem($widget_size * 3);
        @include radius(0);
        border: none;
        @include button(flat-normal, $tc: $color_fg_3);
        box-shadow: inset 0 -1px $color_fg_trk_out;
        @include ink-reaction(normal, $tr: ink-normal-dec);
        &:hover { @include button(flat-lined-hover); }
        &:active {
          @include button(flat-active);
          @include ink-reaction(active-dec, $tr: ink-active-dec);
        }
        &:disabled { @include button(flat-disabled); }
        &:checked {
          @include button(flat-lined-checked, $tc: $color_lbl_sel);
          &:hover { @include button(flat-hover, $tc: $color_lbl_sel); }
        }

        headerbar &:not(.suggested-action):not(.destructive-action) {
          &:not(:hover):not(:active):not(:checked):not(:disabled) {
            color: if($variant == mixed, $color_fg_inv_2, $color_fg_2);
          }

          @if $variant == mixed {
            @include ink-reaction(
                       normal, $fc: $color_fg_inv, $tr: ink-normal-dec);
            &:hover { @include button(flat-lined-hover, $tc: $color_fg_inv); }
            &:active {
              @include button(flat-active, $tc: $color_fg_inv);
              @include ink-reaction(
                         active-dec, $fc: $color_fg_inv, $tr: ink-active-dec);
            }
            &:disabled {
              @include button(flat-disabled, $tc: $color_fg_inv);
            }
            &:checked {
              @include button(flat-lined-checked, $tc: $color_lbl_sel_inv);
              &:hover { @include button(flat-hover, $tc: $color_lbl_sel_inv); }
            }
          }
        }
      }
    }

    &.circular.text-button.radio { // for shortcut windows
      &, &.flat {
        min-width: rem($widget_size);
        min-height: rem($widget_size);
        padding: 0;
        @include radius($r);

        // we just concern that numeric button only
        label { margin-bottom: 0; }
      }
    }
  }

  .stack-switcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.
    label {
      padding: 0 rem($txt_button_lr_space / 2) rem($baseline, $sw: 1.0);
    }

    image {
      padding: rem($txt_button_lr_space / 4) rem($txt_button_lr_space / 2);
    }

    &.text-button {
      // compensate text-button paddings
      padding: 0 rem($txt_button_lr_space / 2);
    }

    &.image-button:not(.text-button) {
      image { padding: 0; } // reset padding
    }

    &.needs-attention {
      label,
      image { @extend %needs_attention; }

      &:active,
      &:checked {
        label,
        image {
          animation: none;
          background-image: none;
        }
      }
    }
  }

  // linked-array
  .linked.horizontal:not(stackswitcher) > & {
    @include radius(0); // optimize radius and widths
    &:dir(ltr) { border-right-width: 0; }
    &:dir(rtl) { border-left-width: 0; }
    &:first-child {
      &:dir(ltr) { @include radius($r_2 0 0 $r_2); }
      &:dir(rtl) { @include radius(0 $r_2 $r_2 0); }
    }
    &:last-child {
      &:dir(ltr) {
        @include radius(0 $r_2 $r_2 0);
        border-right-width: 1px;
      }
      &:dir(rtl) {
        @include radius($r_2 0 0 $r_2);
        border-left-width: 1px;
      }
    }
    &:only-child {
      &:dir(ltr), &:dir(rtl) {
        @include radius($r_2);
        border-width: 1px;
      }
    }

    &.flat {
      border: none;
      &:first-child {
        &:dir(ltr) { @include radius($r_2 0 0 $r_2); }
        &:dir(rtl) { @include radius(0 $r_2 $r_2 0); }
      }
      &:last-child {
        &:dir(ltr) {
          @include radius(0 $r_2 $r_2 0);
          border-right-width: 0;
        }
        &:dir(rtl) {
          @include radius($r_2 0 0 $r_2);
          border-left-width: 0;
        }
      }
      &:only-child {
        &:dir(ltr), &:dir(rtl) {
          @include radius($r_2);
          border-width: 0;
        }
      }
    }
  }

  // vertical array
  .linked.vertical > & {
    @include radius(0); // optimize radius and widths
    border-bottom-width: 0;
    &:first-child { @include radius($r_2 $r_2 0 0); }
    &:last-child {
      @include radius(0 0 $r_2 $r_2);
      border-bottom-width: 1px;
    }
    &:only-child {
      @include radius($r_2);
      border-width: 1px;
    }

    &.flat {
      border: none;
      &:first-child { @include radius($r_2 $r_2 0 0); }
      &:last-child {
        @include radius(0 0 $r_2 $r_2);
        border-bottom-width: 0;
      }
      &:only-child {
        @include radius($r_2);
        border-width: 0;
      }
    }
  }

  // generic switcher image buttons
  .linked > &:not(.text-button):not(.combo),
  .linked.vertical > &:not(.text-button):not(.combo) {
    &, &.radio {
      padding: 0;

      label {
        margin-bottom: 0;
        padding: 0 rem($txt_button_lr_space / 2) rem($baseline, $sw: 1.0);
      }

      widget image,
      box.horizontal > image { // for some special cases
        padding: 0  rem($txt_button_lr_space / 2);
      }
    }
  }

  // inline-toolbar and action-bar buttons
  .inline-toolbar *:not(.linked) > &,
  actionbar *:not(.linked) > & {
    &,
    &.image-button,
    &.text-button {
      &:not(.suggested-action):not(.destructive-action) {
        @include button(flat-normal);
        &:hover { @include button(flat-hover); }
        &:active { @include button(flat-active); }
        &:disabled { @include button(flat-disabled); }
        &:checked { @include button(flat-checked); }
        &:checked:disabled { @include button(flat-checked-disabled); }
      }
    }
  }

  .inline-toolbar &,
  actionbar & {
    &,
    &:not(.text-button).image-button,
    &.circular {
      min-width: rem($small_widget);
      min-height: rem($small_widget);
      padding: 0;

      label {
        padding-left: rem($entry_lr_space);
        padding-right: rem($entry_lr_space);
      }
    }

    &.text-button,
    &.color {
      min-height: rem($small_widget);
      padding: 0 rem($entry_lr_space);
      @include radius($r_2);
    }

    &.suggested-action,
    &.destructive-action { border: none; }
  }

  .inline-toolbar .linked > &,
  actionbar .linked > & {
    &,
    &:not(.text-button).image-button,
    &.circular,
    &.image-button.toggle {
      min-width: rem($small_widget);
      min-height: rem($small_widget);
      padding: 0;

      label {
        padding-left: rem($entry_lr_space);
        padding-right: rem($entry_lr_space);
      }

      image { padding: 0; } // reset padding
    }

    &.text-button {
      min-height: rem($small_widget);
      padding: 0 rem($entry_lr_space);
      @include radius($r_2);
    }
  }
}

%needs_attention {
  background-image: -gtk-scaled(url("assets/needs-attention.png"),
                                url("assets/needs-attention@2.png"));
  background-repeat: no-repeat;
  background-position: right 2px;
  background-size: $attention;
  animation: needs_attention $transition_d_long $transition_t_dec forwards;
  &:dir(rtl) { background-position: left 2px; }
}

// menu buttons on GtkPopover
modelbutton.flat,
menuitem button.flat {
  min-height: $menuitem_height;
  min-width: $menuitem_width;
  padding: 0 rem($entry_lr_space);
  @include button(flat-normal);
  @include transition(reset);
  &:hover { @include button(flat-hover); }
  &:active { @include button(flat-active); }
  &:checked { @include button(flat-checked); }
  &:checked:disabled { @include button(flat-checked-disabled); }
  &:disabled { @include button(flat-disabled); }

  check,
  radio {
    &:first-child { margin-right: rem($txt_button_lr_space); }
    &:last-child { margin-left: rem($txt_button_lr_space); }
  }
}

modelbutton.flat arrow {
  @extend %arrow_size;
  background: none;
  &:hover { background: none; }
  &.left { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); }
  &.right { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); }
}

// color-picker buttons
button.color {
  padding: 0; // fill with child colorswatch
  &, &:active {
    background-image: none;
    animation: none; // hide parent inks
  }

  > colorswatch:first-child:last-child { // :first-child:last-child for
                                         // a specificity bump, it gets
                                         // overridden by the colorpicker style
    &, overlay {
      @include radius($r_2, none);
      box-shadow: none; // switch from raised to depth-0
    }
  }

  // draw ink reactions onto overlay directly
  // and use black ink always
  colorswatch overlay {
    // margin: -1px; // cover up parent 1px borders
    @include button(flat-normal, $tc: black);
    @include ink-reaction(normal, $fc: black, $tr: ink-normal-dec);
  }

  &:hover colorswatch overlay,
  &:checked colorswatch overlay {
    @include button(flat-hover, $tc: black);
  }

  &:active colorswatch overlay {
    @include button(flat-active, $tc: black);
    @include ink-reaction(active-dec, $fc: black, $tr: ink-active-dec);
  }

  &:disabled colorswatch {
    &, &:disabled {
      &, overlay { opacity: $alpha_foreground_dis; }
    }
  }
}

// toolpalette buttons
toolpalette {
  toolitemgroup {
    > button { @include radius(0); }

    arrow { @extend %arrow_size; }
  }

  toolbutton {
    > button.toggle { // use square buttons
      @include radius($r_2);
    }
  }
}

@if $maj_ver == 4 {
  // font-selector buttons
  fontbutton { // standard raised button styling
    @include button(normal);
    min-height: calc(#{rem($widget_size)} - 1px * 2);
    min-width: calc(#{rem($widget_size)} - 1px * 2);
    padding: 0 rem($txt_button_lr_space);
    @include radius($r_2);
    &:hover { @include button(hover); }
    &:active { @include button(active); }
    &:disabled { @include button(disabled); }
    &:checked { @include button(checked); }
    &:checked:disabled { @include button(checked-disabled); }
  }
}

// button box is always shown with flat-buttons
buttonbox {
  &, &.dialog-action-area {
    &:not(.linked) button {
      &:not(.suggested-action):not(.destructive-action) {
        @extend %action-area-button;
      }
    }
  }

  dialog.background & {
    &.dialog-action-area.linked button { @extend %action-area-button; }
  }

  dialog.background:not(.csd) > box.dialog-vbox > box.dialog-action-box > & {
    &.dialog-action-area:not(.linked) button { // switch to fixed height
      min-height: $widget_size - 10.3px;
    }
  }
}

%inv_button {
  @include button(normal, $c: $color_base_inv,
                          $tc: $color_fg_inv);
  @include ink-reaction(
             normal, $fc: $color_fg_inv, $tr: ink-normal-dec);
  &:hover {
    @include button(hover, $c: $color_base_inv,
                           $tc: $color_fg_inv);
  }
  &:active {
    @include button(active, $c: $color_base_inv,
                            $tc: $color_fg_inv);
    @include ink-reaction(
               active-dec, $fc: $color_fg_inv, $tr: ink-active-dec);
  }
  &:disabled {
    @include button(disabled, $c: $color_base_inv,
                              $tc: $color_fg_inv);
  }
  &:checked {
    @include button(checked);
    &:hover { @include button(checked-hover); }
    &:disabled {
      @include button(checked-disabled, $c: $color_base_inv,
                                        $tc: $color_fg_inv);
    }
  }
}

%inv_flat_button {
  @include button(flat-normal, $tc: $color_fg_inv);
  @include ink-reaction(normal, $fc: $color_fg_inv, $tr: ink-normal-dec);
  &:hover { @include button(flat-hover, $tc: $color_fg_inv); }
  &:active {
    @include button(flat-active, $tc: $color_fg_inv);
    @include ink-reaction(active-dec, $fc: $color_fg_inv, $tr: ink-active-dec);
  }
  &:disabled { @include button(flat-disabled, $tc: $color_fg_inv); }
  &:checked { @include button(flat-checked, $tc: $color_fg_inv); }
  &:checked:disabled {
    @include button(flat-checked-disabled, $tc: $color_fg_inv);
  }
}

%action-area-button {
  @include button(flat-normal, $tc: $color_fg_acc_2);
  @include ink-reaction(normal, $fc: $color_fg_acc, $tr: ink-normal-dec);
  font-weight: 700;
  &:hover {
    @include button(flat-hover, $tc: $color_fg_acc);
  }
  &:active {
    @include button(flat-active, $tc: $color_fg_acc);
    @include ink-reaction(active-dec, $fc: $color_fg_acc, $tr: ink-active-dec);
  }
  &:disabled {
    @include button(flat-disabled, $tc: $color_fg);
  }
  &:checked {
    @include button(flat-checked, $tc: $color_fg_acc);
    &:disabled {
      @include button(flat-checked-disabled, $tc: $color_fg_acc);
    }
  }
}

%inv-action-area-button {
  @include button(flat-normal, $tc: $color_fg_acc_inv_2);
  @include ink-reaction(normal, $fc: $color_fg_acc_inv, $tr: ink-normal-dec);
  font-weight: 500;
  &:hover {
    @include button(flat-hover, $tc: $color_fg_acc_inv);
  }
  &:active {
    @include button(flat-active, $tc: $color_fg_acc_inv);
    @include ink-reaction(active-dec, $fc: $color_fg_acc_inv, $tr: ink-active-dec);
  }
  &:disabled {
    @include button(flat-disabled, $tc: $color_fg_inv);
  }
  &:checked {
    @include button(flat-checked, $tc: $color_fg_acc_inv);
    &:disabled {
      @include button(flat-checked-disabled, $tc: $color_fg_acc_inv);
    }
  }
}

// /*********
//  * Links *
//  *********/

%link,
*:link {
  @at-root %normal_link,
  & {
    color: $color_fg_lnk;
    &:hover,
    &:active { color: $color_fg_lnk; }

    *:selected & {
      color: $color_fg_sel_2;
      &:hover,
      &:active { color: $color_fg_sel; }
    }
  }

  @at-root %visited_link,
  &:visited {
    color: $color_fg_lnk_vst;
    &:hover,
    &:active { color: $color_fg_lnk_vst; }

    *:selected & {
      color: $color_fg_sel_3;
      &:hover,
      &:active { color: $color_fg_sel_2; }
    }
  }

  @at-root %selected_link,
  &:selected { color: $color_fg_sel_2; }

  &:disabled { opacity: $alpha_foreground_bdp; }
}

link {
  &:link { @extend %normal_link; }
  &:visited { @extend %visited_link; }
}

button.flat.link { // specificity bump with .flat class
  @extend %link;
  &:hover { background-color: track(currentColor, $alpha_track_1); }

  > label {
    color: inherit;
    text-decoration-line: underline;
  }
}

// /*****************
//  * GtkSpinButton *
//  *****************/

spinbutton {
  &:not(.vertical) {
    // in this horizontal configuration, the whole spinbutton
    // behaves as the entry, so we extend the entry styling
    // and nuke the style on the internal entry
    min-height: calc(#{rem($widget_size)} - 2px * 2);
    min-width: calc(#{rem($widget_size)} - 2px * 2);
    border: 2px solid transparent; // initialize borders
    @include radius($r_4, none);
    @include entry(normal);
    @include transition(std);
    &:focus { @include entry(focus); }
    &:disabled { @include entry(disabled); }

    // FIXME: this should not be set at all, but otherwise it gets the wrong
    // color
    &:disabled { color: $color_fg_dis; }

    @if $maj_ver == 3 {
      entry,
      toolbar & entry,
      popover & > entry:not(.combo) { // specificity bump
        &, // unset all of fallback mode
        &:focus,
        &:disabled { @extend %spin_entry_reset; }

        progress {  @include radius($r_4, none); }
      }
    }
    @else { // NEEDS_REVIEW
      text {
      }

      progress > trough > progress { @include radius($r_4, none); }
    }

    button {
      min-width: $icon_size;
      min-height: calc(#{rem($widget_size)} - 2px * 2);
      padding: 0 rem($entry_lr_space / 2);
      @include radius(0);
      @include button(flat-normal);
      &:hover { @include button(flat-hover); }
      &:active { @include button(flat-active); }
      &:disabled { @include button(flat-disabled); }

      &.down { // '-' button
        &:hover,
        &:active {
          background-color: track($color_err, $alpha_track_1);
          color: $color_err;
        }
      }
      &.up { // '+' button
        &:hover,
        &:active {
          background-color: track($color_bg_sccs, $alpha_track_1);
          color: $color_bg_sccs;
        }
      }
    }
  }

  @if $variant == mixed {
    .osd & {
      &:not(.vertical),
      &.vertical { // specificity bump
        // set default foregrounds in top node
        background-color: track($color_fg_inv, $alpha_track_1);
        color: $color_fg_inv;
        caret-color: $color_fg_inv;
        &:focus {
          background-color: track($color_fg_inv, $alpha_track_2);
          color: $color_fg_inv;
          caret-color: $color_fg_inv;
        }

        @if $maj_ver == 3 {
          entry {
            &, &:focus {
              color: $color_fg_inv;
              caret-color: $color_fg_inv;

              selection { @extend %selected_items; }
            }
            &:disabled { color: $color_fg_dis_inv; }
          }
        }
        @else { // NEEDS_REVIEW
          text {
            &, &:focus {
              color: $color_fg_inv;
              caret-color: $color_fg_inv;

              selection { @extend %selected_items; }
            }
            &:disabled { color: $color_fg_dis_inv; }
          }
        }

        button {
          color: $color_fg_inv_2;
          &:disabled { color: $color_fg_dis_inv; }

          &.down {
            &:hover,
            &:active { color: $color_err; }
          }

          &.up {
            &:hover,
            &:active { color: $color_bg_sccs; }
          }
        }
      }
    }
  }

  &.vertical {
    min-height: calc(#{rem($widget_size)} - 2px * 2);
    min-width: calc(#{rem($widget_size)} - 2px * 2);
    padding: 0;
    border: 2px solid transparent; // initialize borders
    @include radius($r_4, none);
    @include entry(normal);
    @include transition(std);
    &:focus { @include entry(focus); }
    &:disabled { @include entry(disabled); }

    @if $maj_ver == 3 {
      entry,
      toolbar & entry,
      popover & > entry:not(.combo) { // specificity bump
        &, // unset all of fallback mode
        &:focus,
        &:disabled { @extend %spin_entry_reset; }

        progress {  @include radius($r_4, none); }
      }
    }
    @else { // NEEDS_REVIEW
      text {
      }

      progress > trough > progress { @include radius($r_4, none); }
    }

    button {
      min-width: calc(#{rem($widget_size)} - 2px * 2);
      min-height: calc(#{rem($widget_size)} - 2px * 2);
      padding: 0;
      @include radius($r_4);
      @include button(flat-normal);
      &:hover { @include button(flat-hover); }
      &:active { @include button(flat-active); }
      &:disabled { @include button(flat-disabled); }

      &.up { // '+' button
        @include radius($r_4 $r_4 0 0);
        &:hover,
        &:active {
          background-color: track($color_bg_sccs, $alpha_track_1);
          color: $color_bg_sccs;
        }
      }

      &.down { // '-' button
        @include radius(0 0 $r_4 $r_4);
        &:hover,
        &:active {
          background-color: track($color_err, $alpha_track_1);
          color: $color_err;
        }
      }
    }
  }

  // Misc
  treeview & {
    entry {
      &, &:focus {
        min-width: 0;
        min-height: 0;
        padding: 0;
        @include radius(0, none);
        background-color: $color_base;
        box-shadow: none;
        @include transition(reset);
        &:selected { @extend %selected_items; }
      }
    }
  }
}

%spin_entry_reset {
  margin: 0;
  background: none;
  border: none;
  box-shadow: none;
}

// /**************
//  * ComboBoxes *
//  **************/

combobox {
  arrow {
    @extend %arrow_size;
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
  }

  .background & {
    arrow,
    cellview { min-height: $min_combo; }
  }

  &:drop(active) {
    button.combo { @extend %button_drop_target; }
  }

  button.combo {
    min-width: 0;
    min-height: $min_combo; // this affects to cellview as well
    padding: $combo_button_padding_0 rem($entry_lr_space);
    border: none;
    @include radius($r_4);
    @include combobutton(solid-normal);
    @include ink-reaction(tab-normal, $tr: ink-normal-combo, $bs: 12, $i: 2);
    // damned LO can't renders outlines correctly
    outline-width: 0;
    &:hover { @include combobutton(solid-hover); }
    &:active { @include combobutton(solid-active); }
    &:checked {
      @include combobutton(solid-checked);
      @include ink-reaction(tab-active, $tr: ink-active-combo, $bs: 12);
    }
    &:disabled { @include combobutton(solid-disabled); }

    .background & { outline-width: 2px; } // revive standard outlines

    // some rare cases
    row.activatable:hover & {
      background-color: $color_base; // tone down
      &:hover,
      &:active,
      &:checked { background-color: track($color_fg, $alpha_track_1); }
      &:disabled {
        background-color:
          mix($color_fg, $color_base, percentage(($alpha_track_1 * 2 / 3) * $alpha_foreground_dis));
      }
    }
  }

  entry.combo:not(.flat) + button.combo {
    // concern 2px entry borders
    padding: $combo_button_padding_2 $combo_button_padding_6;
  }

  headerbar &,
  headerbar .linked > & {
    > button.combo {
      @if $variant == mixed { @extend %inv_combobox; }
    }
  }

  @if $variant == mixed {
    @at-root %inv_combobox,
    .osd & {
      background-color: track($color_fg_inv_2, $alpha_track_1 / 2);
      color: $color_fg_inv_2;
      &:hover,
      &:active,
      &:checked {
        background-color: track($color_fg_inv, $alpha_track_1);
        color: $color_fg_inv;
      }
      &:disabled {
        background-color: track($color_fg_dis_inv, $alpha_track_1 / 2 * $alpha_foreground_dis);
        color: $color_fg_dis_inv;
      }

      @if $maj_ver == 4 {
        block-cursor {
          @include entry(block-cursor, $tc: $color_fg_inv, $c: $color_base_inv);
        }
      }
    }
  }
}

.linked {
  &:not(.vertical) > combobox {
    &:not(:first-child):not(:last-child) {
      &:dir(ltr),
      &:dir(rtl) { 
        button.combo { @include radius(0); }
      }
    }
    &:first-child {
      &:dir(ltr),
      &:dir(rtl) { 
        button.combo { @include radius($r_4 0 0 $r_4); }
      }
    }
    &:last-child {
      &:dir(ltr),
      &:dir(rtl) {
        button.combo { @include radius(0 $r_4 $r_4 0); }
      }
    }
    &:only-child {
      &:dir(ltr),
      &:dir(rtl) {
        button.combo { @include radius($r_4); }
      }
    }
  }
}

// workaround for LibreOffice with fallback-mode liked-buttons
@each $order, $radius, $edge in (first-child, $r_2 0 0 $r_2, right),
                                (last-child, 0 $r_2 $r_2 0, left) {
  .linked:not(combobox) > button.combo:#{$order} {
    border-radius: #{$radius};
    border-#{$edge}-width: 0;

    &:only-child { @include radius($r_4); }
  }
}

.linked.horizontal > entry.combo + button.combo { // fake combo entry+button
  &:last-child { // specificity bump
    &:dir(ltr) {
     @include radius(0 $r_2 $r_2 0);

     .background & {
       @include radius(0 $r $r 0);
     }
   }
    &:dir(rtl) {
      @include radius($r_2 0 0 $r_2);

     .background & {
        @include radius($r 0 0 $r);
      }
    }
  }

  toolitem & {
    &:last-child { // toolbar flat-style
      &:dir(ltr) { @include radius(0 $r_4 $r_4 0); }
      &:dir(rtl) { @include radius($r_4 0 0 $r_4); }
    }
  }
}

.linked.horizontal {
  > entry:not(.flat) + button { // non-combo entry + button
    &:not(.flat):last-child { // specificity bump
      &:dir(ltr) {
        @include radius(0 $r_2 $r_2 0);

        .background & {
          @include radius(0 $r $r 0);
        }
      }
      &:dir(rtl) {
        @include radius($r_2 0 0 $r_2);

        .background & {
          @include radius($r 0 0 $r);
        }
      }
    }

    + button:not(.flat):last-child { // search-entry + up/down buttons
      &:dir(ltr) { @include radius(0 $r $r 0); }
      &:dir(rtl) { @include radius($r 0 0 $r); }
    }
  }

  > button:not(.flat) + entry:not(.flat) + button:not(.flat) { // a rare case
    &:last-child {
      &:dir(ltr) {
        @include radius(0 $r_2 $r_2 0);
        border-left-width: 0;
      }
      &:dir(rtl) {
        @include radius($r_2 0 0 $r_2);
        border-right-width: 0;
      }
    }
  }
}

// /************
//  * Toolbars *
//  ************/

%toolitem_size {
  min-width: rem($toolitem_size / 2, $sw: 1.0);
  min-height: rem($toolitem_size, $sw: 1.0);
  padding: 0 rem($toolitem_size / 4, $sw: 1.0);
}

toolbar {
  @if $maj_ver == 3 {
    -GtkWidget-window-dragging: true;
  }

  padding: $toolbar_padding;
  background-color: $color_bg;

  &:not(.osd) {
    // sizing
    button,
    .linked > button {
      &, &.flat {
        &,
        &.text-button,
        &.image-button { @extend %toolitem_size; }
      }
    }

    // enforce square image buttons
    *:not(.linked) > button.image-button { @include radius($r_2); }

    combobox {
      button.combo,
      .linked > button.combo { @extend %toolitem_size; }

      .background & .linked > entry.combo:not(.flat) { // optimize radius
        &:dir(ltr) { @include radius($r_4 0 0 0, none); }
        &:dir(rtl) { @include radius(0 $r_4 0 0, none); }

        + button.combo {
          &:dir(ltr) { @include radius(0 $r_4 $r_4 0, none); }
          &:dir(rtl) { @include radius($r_4 0 0 $r_4, none); }
        }
      }
    }

    entry {
      &, &.combo {
        &, &.flat {
          min-height: calc(#{rem($toolitem_size, $sw: 1.0)} - 2px * 2);
        }
      }
    }

    spinbutton:not(.vertical) {
      &,
      entry,
      button {
        min-height: calc(#{rem($toolitem_size, $sw: 1.0)} - 2px * 2);
      }
    }
  }

  // toolbar separators
  separator {
    min-width: 0;
    min-height: 0;
    background-color: $color_fg_div; // keep initial color
  }

  &.horizontal {
    *:not(.linked) > {
      button,
      entry,
      combobox,
      spinbutton { margin: 0 2px; }
    }

    separator { margin: 0 rem($menuitem_padding); }
  }

  &.vertical {
    *:not(.linked) > {
      button,
      entry,
      combobox,
      spinbutton { margin: 2px 0; }
    }

    separator { margin: rem($menuitem_padding) 0; }

    frame & {
      &:dir(ltr) { border-right: 1px solid $color_fg_div; }
      &:dir(rtl) { border-left: 1px solid $color_fg_div; }
    }
  }

  // OSD
  @at-root %osd_toolbar,
  &.osd {
    margin: $shadow_margin_3;
    padding: $toolbar_padding rem($menuitem_padding);
    @include radius($r_8);
    background-color: if($variant == light, $color_bg_dark, $color_bg_dark_inv);
    color: if($variant == light, $color_fg, $color_fg_inv);
    box-shadow: $z-depth-3;

    &.toolbar { // unset drop-shadows for Gnome-documents since that app can't
                // deal with outer margins at all.
      margin: unset;
      box-shadow: none;
    }

    button,
    .linked > button {
      &, &.flat {
        @if $variant == mixed {
          @extend %inv-action-area-button;
        }
        @else {
          @extend %action-area-button;
        }
        min-height: rem($widget_size);
        min-width: rem($widget_size);
      }
    }

    button { // enforce overriding radius
      &, &.flat { @include radius($r); }
    }

    .linked > button {
      &, &.flat { // enforce overriding radius
        &:first-child,
        &:last-child {
          &:dir(ltr), &:dir(rtl) { @include radius($r); }
        }
      }
    }
  }
}

// searchbar, location-bar, inline-toolbar, statusbar & actionbar
@each $_type, $_width in ('.inline-toolbar', 0 1px 1px),
                         ('.location-bar', 0 0 1px) {
  #{$_type} {
    padding: $toolbar_padding;
    border-style: solid;
    border-width: #{$_width};
    border-color: $color_fg_div;
    background-color: $color_bg_dark;
  }
}

searchbar {
  padding: if($maj_ver == 4, 0, $toolbar_padding);
  background-image: linear-gradient(to bottom,
                                    $color_bg_dark calc(100% - 2px),
                                    $color_fg_div calc(100% - 2px),
                                    $color_fg_div calc(100% - 1px),
                                    transparent calc(100% - 1px),
                                    transparent 100%);
  background-repeat: no-repeat;

  @if $maj_ver == 4 {
    > revealer > box { padding: $toolbar_padding; }
  }
}

actionbar {
  background-color: $color_bg_dark;

  // actual padding
  > revealer > box { padding: $toolbar_padding; }
}

@if $maj_ver == 3 {
  @if $mnr_ver > 23 {
    statusbar { padding: $toolbar_padding; }
  }
}
@else {
  statusbar { padding: $toolbar_padding; }
}

// /***************
//  * Header bars *
//  ***************/

.titlebar,
headerbar {
  background-color: if($variant == mixed, $color_bg_dark_inv, $color_bg_dark);
  background-clip: border-box;

  // text colors
  color: if($variant == mixed, $color_fg_inv_2, $color_fg_2);

  label,
  image {
    &:disabled {
      color: if($variant == mixed, $color_fg_dis_inv, $color_fg_dis);
    }
  }

  // titles
  label.title {
    margin-bottom: rem($baseline, $sw: 1.0);
    padding: 0 rem($txt_button_lr_space);
    font-weight: 700;
  }

  label.subtitle {
    @extend %dim_label;
    padding: 0 rem($txt_button_lr_space);
    font-size: if($ref_weight < 1.0, 80%, 90%);
  }

  button { // titles inside the buttons
    box.vertical,
    grid {
      label.title {
        margin: rem(-$baseline * 2) 0;
        padding: 0 rem($txt_button_lr_space);
        font-size: if($ref_weight < 1.0, 90%, 100%);
      }

      label.subtitle {
        margin: rem(-$baseline * 2) 0;
        padding: 0 rem($txt_button_lr_space);
        padding-bottom: rem($baseline);
      }
    }
  }

  // menu
  menu menuitem { // reset text color
    color: $color_fg_2;
    &:hover { color: $color_fg; }
    &:disabled {
      &, label { color: $color_fg_dis; }
    }

    accelerator { color: $color_fg_3; }

    separator { color: $color_fg_div; }
  }

  // check and radio
  checkbutton.text-button,
  radiobutton.text-button {
    @if $variant == mixed {
      color: $color_fg_inv_2;
      &:hover,
      &:active,
      &:checked { color: $color_fg_inv; }
      &:disabled,
      &:disabled:active,
      &:disabled:indeterminate { color: $color_fg_dis_inv; }
    }
  }
}

.titlebar {
  &.default-decoration {
    min-height: $titlebutton_small;
    padding: if($ref_weight < 1.0, 2px 3px, 4px 5px);
    border-radius: $r_2 $r_2 0 0;
    border-width: 1px 0 0;
    border-top-color: $color_fg_div_top;

    &:backdrop {
      > * { opacity: 1.0; } // unset %fade_effect
      border-top-color: if($variant == mixed, $color_bg_inv, $color_bg);
      background-color: if($variant == mixed, $color_bg_inv, $color_bg);
    }

    .title { // fade_effect doesn't work
      color: if($variant == mixed, $color_fg_inv, $color_fg);
      &:backdrop { color: $color_fg_title_unf; }

      margin: 0 rem($menuitem-padding, $sw: 1.0) rem($baseline, $sw: 1.0);
    }
  }

  .tiled &,
  .tiled-top &,
  .tiled-bottom &,
  .tiled-left &,
  .tiled-right &,
  .maximized &,
  .fullscreen & {
    border-top-color: if($variant == mixed, $color_bg_dark_inv,
                                            $color_bg_dark);
    border-radius: 0;
  }
}

headerbar { // solid-CSDs
  .solid-csd & {
    &:dir(rtl), &:dir(ltr) { // specificity bump
      &, &:not(:only-child):last-child {
        margin: -1px -1px 0 -1px; // hide inset border-frame in decoration node
        border-radius: 0;
        border-top: 0 none transparent; // unset top-edge
      }
    }
  }

  .solid-csd box &:not(:only-child):last-child { // revive separators
    &:dir(ltr) { border-left: 1px solid $color_fg_div; }
    &:dir(rtl) { border-right: 1px solid $color_fg_div; }
  }
}

headerbar {
  &.selection-mode { // selection-mode
    border-width: 1px 0;
    border-top-color: $color_fg_div_sel_top;
    background-color: $color_bg_sel_dark;
    @include transition(std);
    &:backdrop {
      @if $variant == mixed {
        border-top-color: mix($color_bg_sel_dark,
                              $color_bg_inv, percentage($alpha_foreground_bdp));
        background-color: mix($color_bg_sel_dark,
                              $color_bg_inv, percentage($alpha_foreground_bdp));
      }
      @else {
        border-top-color: mix($color_bg_sel_dark,
                              $color_bg, percentage($alpha_foreground_bdp));
        background-color: mix($color_bg_sel_dark,
                              $color_bg, percentage($alpha_foreground_bdp));
      }
    }

    button.selection-menu {
      padding-left: rem($txt_button_lr_space);
      padding-right: rem($txt_button_lr_space);

      arrow {
        @extend %arrow_size;
        -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
      }
    }

    .tiled &,
    .tiled-top &,
    .tiled-bottom &,
    .tiled-left &,
    .tiled-right &,
    .maximized &,
    .fullscreen & {
      border-top-color: $color_bg_sel_dark;
      border-radius: 0;

      &:backdrop {
        @if $variant == mixed {
          border-top-color: mix($color_bg_sel_dark,
                                $color_bg_inv, percentage($alpha_foreground_bdp));
        }
        @else {
          border-top-color: mix($color_bg_sel_dark,
                                $color_bg, percentage($alpha_foreground_bdp));
        }
      }
    }
  }
}

@if $maj_ver == 3 { // for Epiphany
  @if $mnr_ver > 23 {
    window.incognito-mode headerbar,
    headerbar.incognito-mode {
      @extend %incognito_headerbar_bg;
    }

    window.incognito-mode {
      &.tiled,
      &.tiled-top,
      &.tiled-bottom,
      &.tiled-left,
      &.tiled-right,
      &.maximized,
      &.fullscreen {
        headerbar { @extend %maxd_incognito_headerbar_bg; }
      }
    }

    headerbar.incognito-mode {
      .tiled &,
      .tiled-top &,
      .tiled-bottom &,
      .tiled-left &,
      .tiled-right &,
      .maximized &,
      .fullscreen & { @extend %maxd_incognito_headerbar_bg; }
    }
  }
}
@else {
  window.incognito-mode {
    headerbar { @extend %incognito_headerbar_bg; }

    &.tiled,
    &.tiled-top,
    &.tiled-bottom,
    &.tiled-left,
    &.tiled-right,
    &.maximized,
    &.fullscreen {
      headerbar { @extend %maxd_incognito_headerbar_bg; }
    }
  }
}

%incognito_headerbar_bg {
  border-top-color: if($variant == mixed,
                       mix(white, $color_bg_tooltip_inv, percentage($alpha_div_1)),
                       mix(white, $color_bg_tooltip, percentage($alpha_div_2)));
  background-color: if($variant == mixed, $color_bg_tooltip_inv, $color_bg_tooltip);
  &:backdrop {
    border-top-color: if($variant == mixed, $color_bg_inv, $color_bg);
    background-color: if($variant == mixed, $color_bg_inv, $color_bg);
  }
}

%maxd_incognito_headerbar_bg {
  border-top-color: if($variant == mixed, $color_bg_tooltip_inv, $color_bg_tooltip);
  &:backdrop { border-top-color: if($variant == mixed, $color_bg_inv, $color_bg); }
}

headerbar {
  &:not(.default-decoration) {
    min-height: rem($widget_size) + ($toolbar_padding * 2);
  }

  @extend %fade_effect; // add fade_effect
  @if $maj_ver == 4 { border-spacing: 6px; }
  // draw borders
  border-width: 1px 0 1px;
  border-style: solid;
  // do not use transparentize
  border-color: $color_fg_div;
  border-top-color: $color_fg_div_top;

  &:backdrop {
    border-top-color: if($variant == light, $color_bg, $color_bg_inv);
    background-color: if($variant == light, $color_bg, $color_bg_inv);
  }

  @if $maj_ver == 4 {
    &.titlebar headerbar:not(.titlebar) { // nested headerbar mode
      background: none; // resetting needed by sliding animations
    }
  }

  .tiled &,
  .tiled-top &,
  .tiled-bottom &,
  .tiled-left &,
  .tiled-right &,
  .maximized &,
  .fullscreen & {
    border-top-color: if($variant == light, $color_bg_dark, $color_bg_dark_inv);
    border-radius: 0;

    &:backdrop {
      border-top-color: if($variant == light, $color_bg, $color_bg_inv);
    }
  }

  // reduce hidden gap reserved for separators
  > box.horizontal {
    @if $maj_ver == 3 {
      &.left { margin-right: -6px; }

      &.right { margin-left: -6px; }
    }
    @else {
      &.left,
      &.right { border-spacing: 0; }
    }
  }

  // To avoid double-padding, set it only for titlebar in case it
  // is placed on the header-bar.
  &.titlebar,
  .csd &,
  .solid-csd &,
  box &:only-child {
    @extend %headerbar_child_margins;
    padding: 0 $toolbar_padding; // only add lateral spacer
  }
}

%headerbar_child_margins {
  button, // set spacer with vertical margin
  menubutton,
  entry,
  spinbutton,
  scale { margin: $toolbar_padding 0; }

  > box.vertical,
  > stack > box.vertical {
    > label.title {
      margin: if($ref_weight < 1.0, rem(-$baseline * 2) 0, 0);
    }

    > label.subtitle { margin: rem(-$baseline * 2) 0; }
  }

  menubutton > button { margin: 0; } // reset child button node T/B margins
}

.background:not(.maximized):not(.fullscreen):not(.tiled):not(.solid-csd) {
  &:not(.tiled-top):not(.tiled-bottom):not(.tiled-left):not(.tiled-right) {
    headerbar,
    .titlebar { // set rounded corners
      border-top-left-radius: $r_2;
      border-top-right-radius: $r_2;
    }

    box.horizontal headerbar {
      &:not(:last-child) {
        &:dir(ltr) {
          border-top-left-radius: $r_2;
          border-top-right-radius: 0;
        }
        &:dir(rtl) {
          border-top-left-radius: 0;
          border-top-right-radius: $r_2;
        }
      }

      &:last-child {
        &:dir(ltr) { border-top-left-radius: 0; }
        &:dir(rtl) { border-top-right-radius: 0; }
      }
    }

    box.vertical headerbar:not(.titlebar) { // inline-mode
      &:not(:last-child) {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }
    }
  }
}

.background:not(.maximized):not(.fullscreen):not(.tiled):not(.solid-csd) {
  &:not(.tiled-top):not(.tiled-bottom):not(.tiled-left):not(.tiled-right) {
    headerbar.titlebar {
      headerbar:not(.titlebar):not(:only-child) { // for hdyleaflet
        &:first-child {
          &:dir(ltr) { border-top-right-radius: 0; }
          &:dir(rtl) { border-top-left-radius: 0; }
        }
        &:last-child {
          &:dir(ltr) { border-top-left-radius: 0; }
          &:dir(rtl) { border-top-right-radius: 0; }
        }
      }
    }
  }
}

// force using rounded corners in case of paned titlebars
window:not(.maximized):not(.fullscreen):not(.tiled):not(.solid-csd) {
  &:not(.tiled-top):not(.tiled-bottom):not(.tiled-left):not(.tiled-right) {
    paned.titlebar,
    grid.titlebar {
      border-top-left-radius: $r_2;
      border-top-right-radius: $r_2;

      separator:first-child + headerbar { // only-child case
        border-top-left-radius: $r_2;
      }

      headerbar:first-child {
        border-top-left-radius: $r_2;
        border-top-right-radius: 0;
      }

      headerbar:last-child {
        border-top-left-radius: 0;
        border-top-right-radius: $r_2;
      }
    }
  }
}

// workaround for inline-mode headerbars
.background:not(.csd):not(.ssd):not(.solid-csd) {
  box headerbar,
  headerbar {
    &, &:not(:last-child) {
      @extend %headerbar_child_margins;
      padding: 0 $toolbar_padding; // only add lateral spacer
      border-radius: 0;
      border-top: 0 none transparent;

      // unset fade-effect
      &:backdrop > * { opacity: 1.0; }
    }
  }

  &.tiled,
  &.tiled-top,
  &.tiled-bottom,
  &.tiled-left,
  &.tiled-right,
  &.maximized,
  &.fullscreen {
    box headerbar,
    headerbar {
      &, &:not(:last-child) {
        border-top: 0 none transparent;
        background-color: if($variant == light, $color_bg_dark, $color_bg_dark_inv);
      }
    }
  }
}

@if $maj_ver == 3 {
  // Development versions of apps to use a differently styled headerbar
  @if $mnr_ver > 23 {
    headerbar.titlebar:not(.selection-mode) {
      // devel-mode does not work properly in selection-mode?
      window.devel & { @extend %devel_headerbar; }
    }
  }
}
@else {
  headerbar.titlebar:not(.selection-mode) {
    window.devel & { @extend %devel_headerbar; }
  }
}

%devel_headerbar {
  @if $variant == light {
    background-image: -gtk-scaled(
                      url("assets/dev-mode.png"),
                      url("assets/dev-mode@2.png"));
  }
  @else {
    background-image: -gtk-scaled(
                      url("assets/dev-mode-dark.png"),
                      url("assets/dev-mode-dark@2.png"));
  }
  background-position: 75% top;
  background-size: $dev_asset_size $dev_asset_size;
  background-repeat: no-repeat;
  &:backdrop {
    @if $variant == light {
      background-image: image(track($color_bg, $alpha_foreground_bdp)),
                        -gtk-scaled(
                        url("assets/dev-mode.png"),
                        url("assets/dev-mode@2.png"));
    }
    @else {
      background-image: image(track($color_bg_inv, $alpha_foreground_bdp)),
                        -gtk-scaled(
                        url("assets/dev-mode-dark.png"),
                        url("assets/dev-mode-dark@2.png")),
    }
  }
}

dialog.background.csd > headerbar.titlebar {
  // enforce square shape in 'Cancel' and 'Open' button
  > button:not(.image-button):not(.text-button):not(.toggle):not(.popup) {
    // specificity bump
    &:not(.suggested-action):not(.destructive-action) {
      &:not(.titlebutton):not(.selection-menu) {
        @include radius($r_2, none);
        padding: 0 rem($txt_button_lr_space);
      }
    }
  }
}

@if $maj_ver == 3 { // for hdyleaflet >= 3.31.90
  @if $mnr_ver > 23 {
    headerbar.titlebar { @extend %hdyleaflet; }
  }
}
@else {
  headerbar.titlebar { @extend %hdyleaflet; }
}

%hdyleaflet {
  headerbar:not(.titlebar):not(:only-child) {
    background-color: transparent;

    + separator { background-color: $color_fg_div_sld_dark; }
  }

  &.selection-mode headerbar:not(.titlebar):not(:only-child) {
    border-top-color: $color_fg_div_sel_top;
    &:backdrop { // override default border-top color
      @if $variant == mixed {
        border-top-color: mix($color_bg_sel_dark,
                              $color_bg_inv, percentage($alpha_foreground_bdp));
      }
      @else {
        border-top-color: mix($color_bg_sel_dark,
                              $color_bg, percentage($alpha_foreground_bdp));
      }
    }

    + separator { background-color: transparent; }
  }

  &:backdrop { // prevent double fade_effect
    hdyleaflet,
    *:not(hdyleaflet) headerbar:not(.titlebar):not(:only-child) > * {
      opacity: 1.0;
    }
  }
}

// /************
//  * Pathbars *
//  ************/

%pathbar_button_shape {
  @include radius(0); // optimize radius and widths
  &:dir(ltr) { border-right-width: 0; }
  &:dir(rtl) { border-left-width: 0; }
  &:first-child {
    &:dir(ltr) { @include radius($r_2 0 0 $r_2); }
    &:dir(rtl) { @include radius(0 $r_2 $r_2 0); }
  }
  &:last-child {
    &:dir(ltr) {
      @include radius(0 $r_2 $r_2 0);
      border-right-width: 1px;
    }
    &:dir(rtl) {
      @include radius($r_2 0 0 $r_2);
      border-left-width: 1px;
    }
  }
  &:only-child {
    &:dir(ltr), &:dir(rtl) { @include radius($r_2); }
  }
}

.linked.path-bar {
  button {
    @if $maj_ver == 3 {
      @if $mnr_ver < 23 { @extend %pathbar_button_shape; }
      @else { // exclude Nautilus's specific pathbar box
        *:not(.path-bar-box) & { @extend %pathbar_button_shape; }
      }
    }
    @else {
      *:not(.path-bar-box) & { @extend %pathbar_button_shape; }
    }
  }
}

.path-bar {
  button {
    @at-root %pathbar_button,
    &,
    &.text-button,
    &.image-button,
    &.toggle {
      padding: 0 rem($pathbar_min_size, $sw: 1.0);

      label,
      image {
        margin-left: rem($pathbar_min_size);
        margin-right: rem($pathbar_min_size);
        padding-left: 0;
        padding-right: 0;
      }
    }

    &.slider-button {
      min-width: $icon_size;
      padding: 0 rem($pathbar_min_size, $sw: 1.0);

      image { margin: 0 rem($pathbar_min_size); }
    }
  }
}

@if $maj_ver == 3 { // Nautilus >= 3.30
  @if $mnr_ver > 23 {
    headerbar .path-bar-box {
      .path-bar {
        @extend %slashed_nautilus_pathbar;

        box:not(:only-child):last-child button {
          @extend %pathbar_button_tail;
        }
      }

      .linked.nautilus-path-bar { // >= 3.31.90
        @extend %non_slashed_nautilus_pathbar;

        button:not(:only-child):last-child { @extend %pathbar_button_tail; }
      }
    }
  }
}
@else {
  headerbar .path-bar-box {
    .linked.nautilus-path-bar {
      @extend %non_slashed_nautilus_pathbar;

      button:not(:only-child):last-child { @extend %pathbar_button_tail; }
    }
  }
}

%slashed_nautilus_pathbar {
  button {
    margin-left: rem($baseline * 2, $sw: 1.0);
    margin-right: rem($baseline * 2, $sw: 1.0);
    // enforce switching to flat-style
    &:not(:checked) {
      border-color: transparent;
      background-color: transparent;
      &:hover,
      &:active {
        background-color: track(if($variant == mixed, $color_fg_inv, $color_fg),
                                $alpha_track_1);
      }
    }
  }
}

%non_slashed_nautilus_pathbar {
  button {
    @extend %pathbar_button;
    @extend %pathbar_button_shape;

    &:last-child:not(:disabled) { // down-arrow buttons
      @include button(checked);
      &:hover { @include button(checked-hover); }
    }
  }
}

%pathbar_button_tail {
  // FIXME: these compensators can reserve enough wide 'tail' margins
  // at the last button node for preventing ugly button node truncations.
  &:dir(ltr) { margin-right: $icon_size * 1.5; }
  &:dir(rtl) { margin-left: $icon_size * 1.5; }
}

// /**************
//  * Tree Views *
//  **************/

treeview.view {
  @if $maj_ver == 3 {
    @at-root * {
      -GtkTreeView-horizontal-separator: 4;
      -GtkTreeView-grid-line-width: 0;
      -GtkTreeView-grid-line-pattern: '';
      -GtkTreeView-tree-line-width: 1;
      -GtkTreeView-tree-line-pattern: '';
      -GtkTreeView-expander-size: 16;
    }
  }

  // this is actually the tree lines color,
  // while this is the grid lines color, better then nothing to avoid borders
  // being overridden by the previously set props
  border-left-color: $color_fg_trk_out;
  border-top-color: $color_fg_div;

  border-radius: 0; // rest border radius in lists

  // clear backgrounds
  background-color: transparent;
  background-image: none;
  box-shadow: none;

  &:hover,
  &:active {
    border-radius: 0;
    background-color: $color_bg_trk;
  }
  &:selected {
    border-radius: 0;
    &, &:focus { @extend %selected_items; }
  }

  // override foreground colors
  &, entry,
  entry > label {
    color: $color_fg_2;
    &:hover,
    &:active,
    &:focus { color: $color_fg; }
    &:selected {
      &, &:focus { @extend %selected_items; }
    }
    &:disabled {
      color: $color_fg_dis;
      &:selected { color: $color_fg_dis_sel; }
    }
  }

  &.separator {
    min-height: if($ref_weight < 1.0, 1px + 2px,
                                      1px + (2px * 2));

    &,
    &:hover,
    &:active { // unify all pseudo-class specific styling
      color: $color_fg_div_sld;
    }
  }

  &.sidebar { // for lollypop
    background-color: $color_bg;
    font-weight: 500;
  }

  &:drop(active) {
    border-style: solid none;
    border-width: 1px;
    border-color: $color_fg_drop;

    &.after { border-top-style: none; }

    &.before { border-bottom-style: none; }
  }

  &.expander {
    min-width: $icon_size;
    min-height: $icon_size;
    &:dir(ltr) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }
    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    &:selected {
      color: if($variant == dark, $color_fg_sel_2, $color_fg_2);
      &:hover,
      &:active {
        color: if($variant == dark, $color_fg_sel, $color_fg);
      }
    }
  }

  &.progressbar { // progressbar bit in treeviews
    box-shadow: inset 0 (-$progress_size) $color_bg_acc;
    &:selected { box-shadow: inset 0 (-$progress_size) $color_fg_sel; }
  }

  &.trough { // progressbar trough in treeviews
    box-shadow: inset 0 (-$progress_size) track($color_bg_acc, $alpha_track_out);
    &:selected {
      box-shadow: inset 0 (-$progress_size) track($color_fg_sel, $alpha_track_out);
    }
  }

  &, paned & { // redraw some stuff for RhythmBox
    background-color: $color_base;

    &:hover,
    row:hover { color: $color_fg; }

    &:selected,
    row:selected { @extend %selected_items; }
  }

  header {
    button {
      @extend %column_header_button;
      background-color: $color_bg;
      color: $color_fg_3;
      &:hover {
        @extend %column_header_button;
        background-color: $color_bg_trk;
        color: $color_fg_2;
      }
      &:active {
        background-color: $color_bg_trk;
        color: $color_fg;
      }
      &:disabled {
        @extend %column_header_button;
        background-color: $color_bg;
        color: $color_fg_dis;
      }
    }
  }

  button.dnd,
  header.button.dnd { // for treeview-like derive widgets
    &,
    &:hover,
    &:active,
    &:selected {
      min-height: $menuitem_height;
      padding: 0 rem($menuitem_padding);
      border: 1px solid $color_fg_div;
      @include radius(0);
      background-color: $color_bg_sel;
      color: $color_fg_sel;
      box-shadow: none;
      font-weight: 400;
      @include transition(reset);
    }
  }

  header button:last-child,
  &:last-child button { // treeview-like derived widgets in Banshee
                        // and Evolution
    border-right-style: none;
  }

  // see tests/testaccel to test
  acceleditor > label { background-color: $color_bg_sel; }
}

%column_header_button {
  min-height: $menuitem_height;
  margin: unset; // stop conflicting with 'notebook header button' nodes
  padding: 0 rem($menuitem_padding);
  border-style: none solid solid none;
  border-width: 1px;
  border-color: $color_fg_div;
  @include radius(0);
  box-shadow: none;
  font-weight: 400;
}

// /*********
//  * Menus *
//  *********/

.menubar,
menubar {
  @if $maj_ver == 3 {
    -GtkWidget-window-dragging: true;
  }

  padding: 0;
  background-color: if($variant == light, $color_bg_dark, $color_bg_dark_inv);
  &:backdrop { background-color: if($variant == light, $color_bg, $color_bg_inv); }

  .background & {
    border-bottom: 1px solid if($variant == mixed,
                                mix(black, $color_bg_dark_inv, percentage($alpha_div_0)),
                                $color_fg_div_sld);
    @extend %fade_effect; // add fade_effect
  }

  @if $maj_ver == 3 {
    > menuitem { @extend %menuitem; }
  }
  @else {
    > box > menuitem,
    > item { // item nodes for inline-menubar inside the popover nodes
      @extend %menuitem;
    }

    > item:selected { // = menuitem:hover pseudo-class styling
      background-color: $color_bg_trk;
      color: if($variant == light, $color_fg, $color_fg_inv);
    }

    // remove padding and rounding from menubar submenu decoration
    .csd.popup decoration { border-radius: 0; }
  }
}

%menuitem {
  padding: rem($menuitem_padding, $sw: 1.0) rem($entry_lr_space, $sw: 1.0);
  @include radius($r_4 $r_4 0 0, none);
  background-color: transparent;
  color: if($variant == light, $color_fg_2, $color_fg_inv_2);
  @include transition(std);
  &:hover { // Seems like it :hover even with keyboard focus
    background-color: $color_bg_trk;
    color: if($variant == light, $color_fg, $color_fg_inv);
  }
  &:disabled { color: if($variant == light, $color_fg_dis, $color_fg_dis_inv); }

  label { padding-bottom: rem($baseline, $sw: 1.0); }
}

.menu,
.context-menu,
menu {
  &,
  .solid-csd.popup & {
    padding: rem($menu_padding) 1px;
    border-radius: 0;
    border-width: 1px; // adds borders in a non composited env
    border-style: solid;
    border-color: $color_fg_div_sld;
    background-color: $color_bg_dark;
    background-clip: border-box;
  }

  .csd.popup & { // axes borders in a composited env
    // FIXME: we need to put this margin to somewhere else
    @if $maj_ver == 3 {
      margin: rem($menu_padding) 0;
    }
    padding: rem($menu_padding) 0;
    border-radius: $r_4; // same with the combobox
  }

  font: initial; // decouple the font of context-menus from parent nodes

  menuitem {
    // FIXME: we want to drop vertical padding from menuitem,
    // but damned FF can't apply min-height property.
    min-height: $icon_size;
    min-width: $menuitem_width;
    padding: rem($menuitem_padding) rem($entry_lr_space);
    background-clip: border-box;
    color: $color_fg_2;
    font: initial;
    &:hover {
      background-color: $color_bg_trk;
      color: $color_fg;
    }
    &:disabled { color: $color_fg_dis; }

    label { padding-bottom: rem($baseline, $sw: 1.0); }

    // submenu indicators
    arrow {
      @extend %arrow_size;
      &:dir(ltr) {
        -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
        margin-left: rem($entry_lr_space);
      }
      &:dir(rtl) {
        -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl');
        margin-right: rem($entry_lr_space);
      }
    }

    // avoids labels color being overridden, see
    // https://bugzilla.gnome.org/show_bug.cgi?id=767058
    label,
    arrow {
      &:dir(rtl),
      &:dir(ltr) { color: inherit; }
    }
  }

  > arrow { // overflow buttons
    @extend %arrow_size;
    margin: 0 1px;
    @include button(flat-normal);
    @include transition(dec);
    &:hover { @include button(flat-hover); }
    &:active { @include button(flat-active); }
    &:disabled {
      border-color: transparent;
      background-color: transparent;
      color: transparent;
    }

    // do not use .top/.bottom style-class (outdated?)
    &:first-child {
      margin-top: rem(-$menu_padding);
      padding: 0 0 rem($menu_padding);
      -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
      @include radius($r_4 $r_4 0 0, none);
      border-bottom: 1px solid if($variant == dark, track(white, $alpha_div_2),
                                                    $color_fg_div);
    }
    &:last-child {
      margin-top: rem($menu_padding * 2);
      margin-bottom: rem(-$menu_padding * 3);
      padding: rem($menu_padding) 0 0;
      -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
      @include radius(0 0 $r_4 $r_4, none);
      border-top: 1px solid if($variant == dark, track(white, $alpha_div_2),
                                                 $color_fg_div);
    }
  }

  > separator { margin: rem($menu_padding) 0; }
}

menuitem {
  accelerator { color: track(currentColor, $alpha_foreground_3rd); }

  separator { margin: rem($menu_padding) 0; }
}

window.popup {
  &, &.solid-csd { border-radius: 0; }

  &.csd { // round corners for CSD menus
    border-radius: $r_4; // same with the combobox

    @if $maj_ver == 4 {
      // clear root background to draw child menu node radius correctly
      &.background { background-color: transparent; }
    }
  }
}

combobox > window.popup { // combobox specific context-menu popup
  // To prevent unwanted 'popup shift', these spacing parameter
  // tweaks are needed.

  decoration { @include transition(reset); } // do not set transitions

  > menu,
  #gtk-combobox-popup-menu { // specificity bump with node-id
    // subtract child baseline padding
    padding: rem($menu_padding - $baseline) 0;
    @include transition(reset); // do not set transitions

    > menuitem {
     // Create 1px L/R gap, otherwise hovered fill-area will hang over the
     // parent 4px rounded edges especially in case of smaller (tiny)
     // font-scaling * font-size. 
      margin: 0 1px;
      padding-top: $combo_button_padding_0;
      padding-bottom: $combo_button_padding_0;
      font-weight: 500; // = GtkComboButton

      cellview {
        min-height: $min_combo; // = combobox child cellview spacing
        margin: 0 -1px; // reset parent margins
      }
    }
  }
}

#IBus { // ibus-candidate popups
  &Candidate {
    border: 1px solid $color_fg_div;
    background-color: $color_bg_dark;

    > box > label { color: $color_fg_3; }

    widget label {
      color: $color_fg_2;
      font-size: 110%;
      -gtk-secondary-caret-color: $color_bg_sgst; // =< 1.5.14
      &:selected { color: $color_fg_sel; }
    }

    button.flat.image-button { margin: rem($menu_padding); }
  }

  &Handle { // a grip inside the ibus-candidate popups
    // override ugly grey backgrounds
    background-image: image($color_bg_dark);
  }

  @if $maj_ver == 3 {
    @if $mnr_ver > 23 {
      &Emojier {
        &WhiteLabel,
        &GoldLabel,
        &SelectedLabel { padding: $toolbar_padding; }
      }
    }
  }
  @else {
    &Emojier {
      &WhiteLabel,
      &GoldLabel,
      &SelectedLabel { padding: $toolbar_padding; }
    }
  }
}

// /************
//  * Popovers *
//  ************/

%popover_basic {
  background-color: $color_bg_dark;
  box-shadow: $z-depth-3;
}

%popover_backdrop {
  box-shadow: $z-depth-1;
}

%popover_border {
  @include radius(0, none);
  border: 1px solid $color_fg_div_sld;

  .csd & { @include radius($r_4, none); }
}

%popover_menu {
  margin: 0;
  padding: 0;

  separator.horizontal {
    margin-top: rem($menu_padding);
    margin-bottom: rem($menu_padding);
  }
}

%popover_boxpointer {
  border: 1px solid $color_fg_div_sld;
  background-color: $color_bg_dark;
}

%popover_misc {
  > list,
  > .view,
  > toolbar,
  &.osd > toolbar {
    border-style: none;
    border-image: none;
    background-color: transparent;
  }

  &, list {
    separator { margin: 0; } // unset outer margins
  }

  list {
    > row,
    > .activatable { // limited transitions by default
      padding: 0; // unset padding
      transition-property: opacity,
                           background-image;
    }
  }

  button {
    menuitem.flat,
    &.flat {
      color: $color_fg_2;
      font-weight: 400;
      font-size: 100%;
      // transition-duration: 0s; // better than 'none'
      &:hover { color: $color_fg; }
      // enforce insensitive foregrounds
      &:disabled { color: $color_fg_dis_2; }
    }
  }
}

%popover_osd {
  &.osd { @extend %osd; }

  &.touch-selection, // do not use OSD-style
  &.magnifier {
    button.image-button {
      @extend %action-area-button;
    }
  }
}

@if $maj_ver == 3 {
  %popover,
  popover.background {
    @extend %popover_basic;
    @extend %popover_border;
    padding: 0;
    &:backdrop { @extend %popover_backdrop; }

    &.menu {
      @extend %popover_menu;
      // compensate outer margins
      > stack { margin: -$popover_padding; }
    }

    @extend %popover_misc;
  }
}
@else {
  %popover,
  popover {
    &.background {
      padding: 0;
      background-color: transparent;
    }

    &.menu > arrow,
    > arrow { @extend %popover_boxpointer; }

    > contents {
      @extend %popover_basic;
      @extend %popover_border;
      &:backdrop { @extend %popover_backdrop; }

      &.menu { @extend %popover_menu; }
    }

    &.menu {
      padding: 0; // NEEDS_REVIEW

      box { // button containers
        &.inline-buttons {
          padding: 0 $popover_padding;
          border: none;
        }

        &.circular-buttons { padding-bottom: $popover_padding; }
      }

      // NEEDS_REVIEW: we might revert to standard T/B margins
      separator { margin: $popover_padding 0; }

      accelerator { // = check/radio spacing
        margin: 0 rem($menuitem_padding);
        padding: 0 ($icon_size / 3);
      }

      &:not(.osd) {
        button.flat.image-button.model,
        modelbutton {
          &:selected { @include button(flat-checked); }
        }
      }
    }

    @extend %popover_misc;
  }
}

@if $maj_ver == 3 {
  popover.background { @extend %popover_osd; }
}
@else {
  popover { @extend %popover_osd; }
}

// /*************
//  * Notebooks *
//  *************/

%header_frame {
  @each $_header, $_margin in (top, -1px -1px 0 -1px),
                              (bottom, 0 -1px -1px -1px),
                              (left, -1px 0 -1px -1px),
                              (right, -1px -1px -1px 0) {
    &.#{$_header} { margin: #{$_margin}; }
  }
}

%notebook_stack {
  &:only-child {
    border: none;
    background-color: transparent;
    box-shadow: none;
  }

  // the :not(:only-child) is for "hidden" notebooks
  &:not(:only-child) { background-color: $color_base; }
}

%static_tabs {
  background-color: $color_bg;
  tabs { background-color: transparent; }

  @each $_header, $_border in (top, 0 -1px),
                              (bottom, 0 1px),
                              (left, -1px 0),
                              (right, 1px 0) {
    &.#{$_header} {
      // FIXME: outset borders
      box-shadow: inset #{$_border} $color_fg_div;
    }
  }

  &.top {
    > tabs {
      margin: rem($menuitem_padding / 2) rem($menuitem_padding) 0;

      > tab {
        min-height: $menuitem_height;
        padding: 0 rem($menuitem_padding * 2.5);
        border-bottom-width: $tab_indicator_size;
        box-shadow: none;
        &.reorderable-page {
          margin: 0 -1px;
          padding: rem($menuitem_padding / 2) rem($menuitem_padding * 1.5);
          border-left-width: 1px;
          border-right-width: 1px;
        }
      }
    }
  }

  &.bottom {
    > tabs {
      margin: 0 rem($menuitem_padding) rem($menuitem_padding / 2);

      > tab {
        min-height: $menuitem_height;
        padding: 0 rem($menuitem_padding * 2.5);
        border-top-width: $tab_indicator_size;
        box-shadow: none;
        &.reorderable-page {
          margin: 0 -1px;
          padding: rem($menuitem_padding / 2) rem($menuitem_padding * 1.5);
          border-left-width: 1px;
          border-right-width: 1px;
        }
      }
    }
  }

  &.left {
    > tabs {
      margin: rem($menuitem_padding) 0;

      > tab {
        padding: rem($menuitem_padding) rem($menuitem_padding * 1.5);
        border-right-width: $tab_indicator_size;
        box-shadow: none;
        &.reorderable-page {
          margin: -1px 0;
          border-bottom-width: 1px;
          border-top-width: 1px;
        }
      }
    }
  }

  &.right {
    > tabs {
      margin: rem($menuitem_padding) 0;

      > tab {
        padding: rem($menuitem_padding) rem($menuitem_padding * 1.5);
        border-left-width: $tab_indicator_size;
        box-shadow: none;
        &.reorderable-page {
          margin: -1px 0;
          border-bottom-width: 1px;
          border-top-width: 1px;
        }
      }
    }
  }
}

%reorderable_tab {
  @each $_tab, $_border, $_rad, $_line in
    (top, bottom, $r_1 $r_1 0 0, 0 1px),
    (bottom, top, 0 0 $r_1 $r_1, 0 -1px),
    (left, right, $r_1 0 0 $r_1, 1px 0),
    (right, left, 0 $r_1 $r_1 0, -1px 0) {

    &.#{$_tab} tab.reorderable-page {
      border: 1px solid transparent;
      border-radius: #{$_rad};
      background-color: transparent;
      &:hover {
        border-color: $color_fg_div;
        border-#{$_tab}-color: $color_fg_trk_out;
        border-#{$_border}-color: transparent;
        background-color: mix($color_base, $color_bg);
        box-shadow: inset #{$_line} $color_fg_trk_out;
      }
      &:checked {
        border-color: $color_fg_div;
        border-#{$_tab}-color: $color_bg_sel;
        border-#{$_border}-color: $color_base;
        background-color: $color_base;
        box-shadow: inset #{$_line} $color_bg_sel;
      }
    }
  }
}

%tab_arrows {
  > tabs > arrow {
    color: $color_fg_3;
    @include transition(reset);
    &:hover,
    &:active { color: $color_fg; }
    &:disabled { color: transparent; }
  }
}

notebook {
  padding: 0;

  &.frame {
    border: 1px solid $color_fg_div_sld;

    // remove madness borders around header
    > header { @extend %header_frame; }
  }

  > stack { @extend %notebook_stack; }

  > header {
    @extend %static_tabs;
    @extend %reorderable_tab;
    @extend %tab_arrows;
  }
}

notebook {
  tab {
    border: 0 solid transparent;
    background-color: transparent;
    color: $color_fg_3;
    font-weight: 500;
    @if $variant == dark {
      @include ink-reaction(tab-normal, $fc: $color_lbl_sel, $bs: 10, $i: 2); }
    @else {
      @include ink-reaction(tab-normal, $fc: $color_bg_sel, $bs: 10, $i: 2); }
    &:hover {
      // do not use alpha-blended borders
      border-color: mix($color_fg, $color_bg, percentage($alpha_track_out));
      color: $color_fg_2;
      transition-duration: $transition_d_standard;
    }
    &:checked {
      color: $color_lbl_sel;
      @if $variant == dark {
        @include ink-reaction(tab-active, $fc: $color_lbl_sel, $bs: 10);
      }
      @else {
        @include ink-reaction(tab-active, $fc: $color_bg_sel, $bs: 10);
      }
      &:hover { color: $color_lbl_sel; }
    }

    &.reorderable-page { // revert to fg
      &:hover { color: $color_fg_2; }
      // use shallower ink
      @include ink-reaction(tab-normal, $fc: $color_fg_3, $bs: 10, $i: 2);
      &:checked {
        color: $color_fg;
        @include ink-reaction(tab-active, $fc: $color_fg_3, $bs: 10);
        &:hover { color: $color_fg; }
      }
    }

    button.flat { color: $color_fg_3; }

    &:hover button.flat,
    &:checked button.flat {
      color: $color_fg_2;
      &:hover,
      &:active { color: $color_fg; }
    }
    &:disabled button.flat { color: $color_fg_dis; }
  }

  &:not(.reorderable-page) > entry {
    min-height: $menuitem_height;
    @include entry(flat-normal);
    &:focus { @include entry(flat-focus); }
    &:disabled { @include entry(flat-disabled); }
  }

  header { // child spacing
    tabs > arrow { // arrows
      @extend %arrow_size;
      margin: 0 rem($menuitem_padding);
      padding: 0;
      @include radius(0);
    }

    tab label { padding-bottom: rem($baseline, $sw: 1.0); }

    button { // buttons
      &, &.small-button {
        &, &.flat { @extend %tab_close_button; }
      }

      &.image-button { // revert to square
        @include radius($r_2);
      }
    }

    tab button { // tab close button
      &,
      &.image-button,
      &.small-button {
        &, &.flat {
          @include radius($r);
          &:dir(ltr):last-child { margin-left: rem($menuitem_padding); }
          &:dir(rtl):last-child { margin-right: rem($menuitem_padding); }
        }
      }
    }
  }
}

%tab_close_button {
  min-height: calc(#{$icon_size} + 1px + #{rem($menuitem_padding)});
  min-width: calc(#{$icon_size} + 1px + #{rem($menuitem_padding)});
  padding: 0;
  margin-top: rem($menuitem_padding / 2);
  margin-bottom: rem($menuitem_padding / 2);
}

// /**************
//  * Scrollbars *
//  **************/

scrollbar {
  @if $maj_ver == 3 {
    @at-root * { // disable steppers
      -GtkScrollbar-has-backward-stepper: false;
      -GtkScrollbar-has-forward-stepper: false;
    }
  }

  background-color: track($color_base, $alpha_foreground_3rd);

  // scrollbar border
  @each $_side,$_margin in ('top', '0 0 -2px 0'),
                           ('bottom', '-2px 0 0 0'),
                           ('left', '0 -2px 0 0'),
                           ('right', '0 0 0 -2px') {
    &.#{$_side} {
      border: none;

      .background scrolledwindow > &:not(.overlay-indicator) {
        // Negative margins can reduce the unwanted gap
        // since we don't have any outer borders and
        // Gtk seems to allocate 1px borders always when
        // overlay-indicator was disabled.
        margin: #{$_margin};
      }
    }
  }

  // slider coloring
  slider {
    background-color: track($color_fg, $alpha_foreground_3rd * $alpha_foreground_3rd);
    @include transition(std);
    &:hover { background-color: track($color_fg, $alpha_foreground_2nd * $alpha_foreground_3rd); }
    &:active { background-color: $color_fg; }
    &:disabled { opacity: $alpha_foreground_bdp; }
  }

  // slider sizing
  @each $_position,$_min_w,$_min_l in
  ('vertical', $slider_min_width, $slider_min_length),
  ('horizontal', $slider_min_length, $slider_min_width) {
    &.#{$_position} {
      slider {
        min-width: #{$_min_w};
        min-height: #{$_min_l};
        margin: 0;
        border-radius: 0;
        border: 0 none transparent;
      }
      @if $maj_ver == 3 {
        &.fine-tune {
          min-width: #{$_min_w};
          min-height: #{$_min_l};
          margin: 0;
          border-radius: 0;
          border: 0 none transparent;
        }
      }
      @else {
        range.fine-tune {
          min-width: #{$_min_w};
          min-height: #{$_min_l};
          margin: 0;
          border-radius: 0;
          border: 0 none transparent;
        }
      }
    }
  }

  &.overlay-indicator {
    &:not(.dragging):not(.hovering) { // Overlay scrolling indicator
      border-color: transparent;
      background-color: transparent;

      slider {
        margin: 0;
        border: 0 none transparent;
        // FIXME: for WebKitGtk2
        background-color: track(mix($color_fg_fix, $color_base_fix), $alpha_foreground_3rd);

        .background & { // standard color
          background-color: track($color_fg, $alpha_foreground_3rd * $alpha_foreground_3rd);
        }
      }

      button {
        min-width: $slider_min_width;
        min-height: $slider_min_width;
        border-radius: 0;
        border: none;
        background-color: track($color_fg, $alpha_foreground_3rd * $alpha_foreground_3rd);
        -gtk-icon-source: none;
      }

      // slider and button sizing
      @each $_position,$_min_w,$_min_l,$_button_s in
      ('vertical', $slider_min_width / 2, $slider_min_length, 'min-width'),
      ('horizontal', $slider_min_length, $slider_min_width / 2, 'min-height') {
        &.#{$_position} {
          slider {
            min-width: #{$_min_w};
            min-height: #{$_min_l};
            margin: 0;
          }

          button {
            #{$_button_s}: #{$_min_w};
            margin: 0;
          }
        }
      }
    }

    &.dragging,
    &.hovering { opacity: $alpha_foreground_bdp * 2; }

    &.hovering { // slow-down when deforming
      &.vertical slider {
        animation: slow_down_vert $transition_d_standard $transition_t_lin forwards;
      }

      &.horizontal slider {
        animation: slow_down_horz $transition_d_standard $transition_t_lin forwards;
      }
    }
  }
}

// /**********
//  * Switch *
//  **********/

switch {
  min-width: $switch_width - 4px; // reduce empty space in pixmaps
  min-height: $switch_height - 2px;
  margin-top: calc((#{rem($widget_size)} - (#{$switch_height} - 2px)) / 2);
  margin-bottom: calc((#{rem($widget_size)} - (#{$switch_height} - 2px)) / 2);
  background-size: $switch_width $switch_height;
  background-repeat: no-repeat;
  background-position: center center;
  font-size: 0;
  @include transition(dec-dec);

  slider { // set dummy sizes
    min-width: $icon_size;
    min-height: $icon_size;
  }

  &,
  slider,
  headerbar & image:disabled,
  .titlebar & image:disabled { // specificity bump
    color: transparent;
  }

  // use ugly pixmaps
  @extend %pixmap_switch;

  @if $variant == mixed {
    headerbar &,
    messagedialog & { @extend %inv_pixmap_switch; }
  }

  row:selected & {
    background-image: -gtk-scaled(
                      url("assets/toggle-off-selected-row.png"),
                      url("assets/toggle-off-selected-row@2.png"));
    &:hover {
      background-image: -gtk-scaled(
                        url("assets/toggle-off-selected-row-hover.png"),
                        url("assets/toggle-off-selected-row-hover@2.png"));
    }
    &:checked {
      background-image: -gtk-scaled(
                        url("assets/toggle-on-selected-row.png"),
                        url("assets/toggle-on-selected-row@2.png"));
      &:hover {
        background-image: -gtk-scaled(
                          url("assets/toggle-on-selected-row-hover.png"),
                          url("assets/toggle-on-selected-row-hover@2.png"));
      }
    }
  }
}

%pixmap_switch {
  background-image: -gtk-scaled(
                    url("assets/toggle-off#{$asset_suffix}.png"),
                    url("assets/toggle-off#{$asset_suffix}@2.png"));
  &:hover {
    background-image: -gtk-scaled(
                      url("assets/toggle-off-hover#{$asset_suffix}.png"),
                      url("assets/toggle-off-hover#{$asset_suffix}@2.png"));
  }
  &:checked {
    background-image: -gtk-scaled(
                      url("assets/toggle-on.png"),
                      url("assets/toggle-on@2.png"));
    &:hover {
      background-image: -gtk-scaled(
                        url("assets/toggle-on-hover.png"),
                        url("assets/toggle-on-hover@2.png"));
    }
    &:disabled,
    &:disabled:hover {
      background-image:
        -gtk-scaled(
          url("assets/toggle-on-insensitive#{$asset_suffix}.png"),
          url("assets/toggle-on-insensitive#{$asset_suffix}@2.png"));
    }
  }
  &:disabled,
  &:disabled:hover {
    background-image:
      -gtk-scaled(
        url("assets/toggle-off-insensitive#{$asset_suffix}.png"),
        url("assets/toggle-off-insensitive#{$asset_suffix}@2.png"));
  }
}

%inv_pixmap_switch {
  background-image: -gtk-scaled(
                    url("assets/toggle-off-dark.png"),
                    url("assets/toggle-off-dark@2.png"));
  &:hover {
    background-image: -gtk-scaled(
                      url("assets/toggle-off-hover-dark.png"),
                      url("assets/toggle-off-hover-dark@2.png"));
  }
  &:checked {
    background-image: -gtk-scaled(
                      url("assets/toggle-on.png"),
                      url("assets/toggle-on@2.png"));
    &:hover {
      background-image: -gtk-scaled(
                        url("assets/toggle-on-hover.png"),
                        url("assets/toggle-on-hover@2.png"));
    }
    &:disabled,
    &:disabled:hover {
      background-image:
        -gtk-scaled(
          url("assets/toggle-on-insensitive-dark.png"),
          url("assets/toggle-on-insensitive-dark@2.png"));
    }
  }
  &:disabled,
  &:disabled:hover {
    background-image:
      -gtk-scaled(
        url("assets/toggle-off-insensitive-dark.png"),
        url("assets/toggle-off-insensitive-dark@2.png"));
  }
}

// /*************************
//  * Check and Radio items *
//  *************************/

// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly

@each $w,$a in ('check', 'checkbox'),
               ('radio','radio') {
  @each $s,$as in ('','-unchecked'),
                  (':hover', '-unchecked-active'),
                  (':active', '-unchecked-active'),
                  (':disabled','-unchecked-insensitive'),
                  (':indeterminate', '-mixed'),
                  (':indeterminate:hover', '-mixed-active'),
                  (':indeterminate:active', '-mixed-active'),
                  (':indeterminate:disabled', '-mixed-insensitive'),
                  (':checked', '-checked'),
                  (':checked:hover', '-checked-active'),
                  (':checked:active', '-checked-active'),
                  (':checked:disabled','-checked-insensitive') {
    // workaround for WebKitGtk, FirefoxQuantum and LibreOffice
    #{$w}#{$s} {
      border-radius: if($w == check, $r_2, $r);
      background-color: if($variant ==dark, $color_bg, transparent);
      -gtk-icon-source:
        -gtk-scaled(url("assets/#{$a}#{$as}#{$asset_suffix}.png"),
                    url("assets/#{$a}#{$as}#{$asset_suffix}@2.png"));
    }

    // standard checks and radios
    .background:not(#MozillaGtkWidget) #{$w}#{$s} {
      @if $variant == dark { background-color: transparent; }
    }

    // dark-variant-only mode
    @if $variant == mixed {
      .background:not(#MozillaGtkWidget) headerbar #{$w}#{$s},
      messagedialog.background:not(#MozillaGtkWidget) #{$w}#{$s} {
        -gtk-icon-source: -gtk-scaled(url("assets/#{$a}#{$as}-dark.png"),
                                      url("assets/#{$a}#{$as}-dark@2.png"));
        background-color: transparent;
      }
    }
  }
}

.background:not(#MozillaGtkWidget) {
  // check/radio inside treeview
  treeview.view check,
  treeview.view radio {
    &, &:only-child {
      padding: 0; // FIXME: negative margin doesn't work.
    }
  }
}

// check/radio inside selected-rows
@each $w,$a in ('check', 'checkbox'),
               ('radio','radio') {
  @each $s,$as in ('','-unchecked'),
                  (':active', '-unchecked'),
                  (':indeterminate', '-mixed'),
                  (':indeterminate:active', '-mixed'),
                  (':checked', '-checked'),
                  (':checked:active', '-checked') {
    .background:not(#MozillaGtkWidget) {
      treeview.view,
      row {
        #{$w}:selected#{$s},
        #{$w}:selected:focus#{$s} {
          -gtk-icon-source:
            -gtk-scaled(url("assets/#{$a}#{$as}-selected.png"),
                        url("assets/#{$a}#{$as}-selected@2.png"));
          -gtk-icon-shadow: none;
        }
        // use dark variant for insensitive states
        #{$w}:selected:disabled,
        #{$w}:selected:focus:disabled {
          -gtk-icon-source:
            -gtk-scaled(url("assets/#{$a}-unchecked-insensitive-dark.png"),
                        url("assets/#{$a}-unchecked-insensitive-dark@2.png"));
        }
        #{$w}:selected:indeterminate:disabled,
        #{$w}:selected:focus:indeterminate:disabled {
          -gtk-icon-source:
            -gtk-scaled(url("assets/#{$a}-mixed-insensitive-dark.png"),
                        url("assets/#{$a}-mixed-insensitive-dark@2.png"));
        }
        #{$w}:selected:checked:disabled,
        #{$w}:selected:focus:checked:disabled {
          -gtk-icon-source:
            -gtk-scaled(url("assets/#{$a}-checked-insensitive-dark.png"),
                        url("assets/#{$a}-checked-insensitive-dark@2.png"));
        }
      }
    }
  }
}

// selection-mode
@each $s,$as in ('','-selectionmode'),
                (':hover', '-active-selectionmode'),
                (':active', '-active-selectionmode'),
                (':disabled', '-insensitive-selectionmode'),
                (':checked', '-checked-selectionmode'),
                (':checked:hover', '-checked-active-selectionmode'),
                (':checked:active', '-checked-active-selectionmode'),
                (':disabled:checked', '-checked-insensitive-selectionmode') {
  .background:not(#MozillaGtkWidget) {
    .view.content-view.check#{$s}:not(list),
    .content-view .tile check#{$s} {
      -gtk-icon-source:
        -gtk-scaled(url("assets/checkbox#{$as}#{$asset_suffix}.png"),
                    url("assets/checkbox#{$as}#{$asset_suffix}@2.png"));
      background-color: transparent;
    }
  }
}

checkbutton.text-button,
radiobutton.text-button {
  // FIXME: exclude damned FirefoxQuantum
  .background:not(#MozillaGtkWidget) & {
    min-height: $menuitem_height;
    padding: 0 rem($menuitem_padding, $sw: 1.0);
    @include transition(std);

    label { padding-bottom: rem($baseline, $sw: 1.0); }
  }

  color: $color_fg_2;
  &:hover,
  &:active,
  &:checked { color: $color_fg; }
  &:disabled,
  &:disabled:active,
  &:disabled:indeterminate {
    // set insensitive color, which is overridden otherwise
    // color: $color_fg_dis;
  }
}

.background:not(#MozillaGtkWidget) {
  .view.content-view.check:not(list),
  .content-view .tile check {
    @if $maj_ver == 3 {
      // define specific sizes before setting generic
      // check/radio sizes
      min-height: $icon_size * 2.5;
      min-width: $icon_size * 2.5;
    }
    @else {
      -gtk-icon-size: $icon_size * 2.5;
    }
    margin: 0; // remove unneeded spacing for animations
    padding: 0;
    outline-width: 0; // hide unneeded outlines
  }
}

radio,
check {
  @if $maj_ver == 3 {
    min-width: $icon_size;
    min-height: $icon_size;
    margin: 0;
    padding: 0;
  }
  @else {
    -gtk-icon-size: $icon_size;
  }

  // FIXME: exclude damned FirefoxQuantum as well
  .background:not(#MozillaGtkWidget) & {
    @include radius($r, none);
    margin: (-$icon_size / 3) rem($menuitem_padding);
    padding: ($icon_size / 3);
    @include ink-reaction(normal, $tr: ink-normal-std);
    &:hover { @include ink-reaction(active-dec, $tr: ink-active-std); }
    &:hover:checked,
    &:hover:indeterminate {
     @include ink-reaction(active-dec, $fc: $color_bg_sel, $tr: ink-active-std);
    }

    // icon transformations
    &,
    &:active {
      -gtk-icon-transform: scale(0);
    }

    &:not(:active) {
      -gtk-icon-transform: scale(1);
    }
  }

  .background:not(#MozillaGtkWidget) menuitem & {
    @extend %memnuitem_check_radio;
    margin: 0;
    &:dir(ltr) { margin-right: rem($menuitem_padding); }
    &:dir(rtl) { margin-left: rem($menuitem_padding); }
    &:not(:backdrop) { // unset transitions/animations
      -gtk-icon-transform: unset;
      @include transition(reset);
      animation: none;
    }
  }

  .background:not(#MozillaGtkWidget) popover modelbutton & {
    @extend %memnuitem_check_radio;
    margin: 0 rem($menuitem_padding);
  }
}

%memnuitem_check_radio {
  min-width: $icon_size;
  min-height: $icon_size;
  padding: 0;
  &:not(:backdrop) {
    background-image: none;
    color: inherit;
  }
}

// /************
//  * GtkScale *
//  ************/

%scale_trough {
  border-radius: 0;
  background-color: $color_fg_trk_out;
  box-shadow: none;
  &:disabled {
    color: $color_fg_dis;
    background-color: $color_fg_trk_out;
  }
}

%scale_highlight {
  border-radius: 0;
  background-color: $color_bg_acc;
  &:disabled {
    color: $color_fg_dis;
    background-color: $color_fg_trk_out;
  }
}

scale {
  @if $maj_ver == 4 {
    &:focus(visible) { outline: none; } // enforce hiding outlines
  }

  &, &.fine-tune {
    padding: ($scale_slider_size - $scale_trough_size) / 2;

    &.marks {
      &-before,
      &-after { // vertically centered placements
        &.horizontal { margin-top: $scale_trough_size / 2; }
      }
    }
  }

  slider,
  &.fine-tune slider {
    background-repeat: no-repeat;
    background-position: center;
    transition-property: background-image,
                         background-size,
                         box-shadow;
    transition-timing-function: $transition_t_acc;
    transition-duration: $transition_d_standard;

    @each $s, $as in ('', ''),
                     (':hover', '',),
                     (':active', '-active'),
                     (':disabled', '-insensitive') {
      &#{$s} {
        $_url: 'assets/slider#{$as}';
        background-image: -gtk-scaled(url('#{$_url}.png'),
                                      url('#{$_url}@2.png'));
        background-size: $scale;

        @if $s == ':hover' {
          $_url: 'assets/slider#{$as}';
          background-image: -gtk-scaled(url('#{$_url}.png'),
                                        url('#{$_url}@2.png')),
                            -gtk-scaled(url('#{$_url}.png'),
                                        url('#{$_url}@2.png'));
          background-size: $scale, 100% 100%;
        }
        @if $s == ':active' {
          background-size: 100% 100%;
        }
        @if $s == ':disabled' {
          $_url: 'assets/slider#{$as}#{$asset_suffix}';
          background-image: -gtk-scaled(url('#{$_url}.png'),
                                        url('#{$_url}@2.png'));
        }
      }
    }
  }

  slider,
  &.fine-tune slider {
    min-height: $scale_slider_size;
    min-width: $scale_slider_size;
    margin: -(($scale_slider_size - $scale_trough_size) / 2);
  }

  // the backing bit sizing
  trough {
    min-height: $scale_trough_size;
    min-width: $scale_trough_size;
    border-radius: 0;
    border-width: 0;
  }

  fill,
  highlight {
    min-height: 0;
    min-width: 0;
    border-radius: 0;
    border-width: 0;
  }

  // the backing bit styling
  trough { @extend %scale_trough; }

  // the colored part of the backing bit
  highlight { @extend %scale_highlight; }

  // switch to orange tracking bit
  &.fine-tune highlight { background-color: $color_warn; }

  // this is another differently styled part of the backing bit,
  // the most relevant use case is for example in media player
  // to indicate how much video stream as been cached
  fill {
    @extend %scale_trough;

    background-color: track($color_bg_acc, $alpha_track_1);

    &:disabled {
      border-color: transparent;
      background-color: transparent;
    }
  }

  @if &maj_ver == 3 {
    // same opacity value with dim-label
    @if $variant == mixed {
      .osd &,
      .app-notification &,
      .floating-bar &,
      headerbar &,
      messagedialog & {
        value { color: track($color_fg_inv, $alpha_foreground_3rd); }
      }
    }
    @else {
      value { color: track($color_fg, $alpha_foreground_3rd); }
    }
  }

  separator {
    color: transparent;
    background-color: $color_bg_trk;
  }
}

scale { // marks color
  @if $maj_ver == 3 {
    marks {
      color: track(currentColor, $alpha_foreground_3rd);
      @each $marks_class, $marks_pos, $marks_margin in (top, top, bottom),
                                                       (bottom, bottom, top),
                                                       (top, left, right),
                                                       (bottom, right, left) {
        &.#{$marks_class} {
          margin-#{$marks_margin}: $_marks_distance;
          margin-#{$marks_pos}: -($_marks_distance + $_marks_length);
        }
      }
    }

    &.horizontal {
      indicator {
        min-height: $_marks_length;
        min-width: 1px;
      }
    }

    &.vertical {
      indicator {
        min-height: 1px;
        min-width: $_marks_length;
      }
    }
  }
  @else {
    &.horizontal > marks,
    &.vertical > marks {
      color: track(currentColor, $alpha_foreground_3rd);

      indicator { background-color: currentColor; }
    }

    &.horizontal > value,
    &.vertical > value {
      // same opacity value with dim-label
      color: track(currentColor, $alpha_foreground_3rd);
    }

    // NEED_REVIEW: need to compute proper values in future
    &.horizontal > value {
      &.left { margin-right: 9px; }

      &.right { margin-left: 9px; }
    }

    &.vertical > value {
      &.top { margin-bottom: 9px; }

      &.bottom { margin-top: 9px; }
    }

    @each $d, $_top, $_bottom, $_h, $_w in
      ('horizontal', bottom, top, height, width),
      ('vertical', right, left, width, height) {

      &.#{$d} > marks {
        &.top { margin-#{$_top}: $_marks_distance; }

        &.bottom { margin-#{$_bottom}: $_marks_distance; }

        indicator {
          min-#{$_h}: $_marks_length;
          min-#{$_w}: 1px;
        }
      }
    }
  }
}

// scale with marks
@each $d,$dn in ('horizontal', 'horz'),
                ('vertical', 'vert') {
  @each $ws,$w,$we in  (':last-child:not(:only-child)',
                        'scale-has-marks-above', 'scale_marks_above'),
                       (':first-child:not(:only-child)',
                        'scale-has-marks-below', 'scale_marks_below') {
    scale.#{$d} {
      %#{$w}-#{$dn},
      contents#{$ws} > trough > slider {
        @each $s,$as in ('',''),
                        (':hover',''),
                        (':active','-active'),
                        (':disabled','-insensitive') {
          &#{$s} {
            @extend %#{$we}_#{$dn}; // negative margin makes trough shrinking
            $_url: 'assets/slider-#{$dn}-#{$w}#{$as}';
            background-image: -gtk-scaled(url('#{$_url}.png'),
                                          url('#{$_url}@2.png'));

            @if $s == ':hover' {
              $_url: 'assets/slider-#{$dn}-#{$w}';
              background-image: -gtk-scaled(url('#{$_url}.png'),
                                            url('#{$_url}@2.png')),
                                -gtk-scaled(url('#{$_url}.png'),
                                            url('#{$_url}@2.png'));
              background-size: $scale, 100% 100%;
            }
            @if $s == ':active' { background-size: 100% 100%; }
            @if $s == ':disabled' {
              $_url: 'assets/slider-#{$dn}-#{$w}#{$as}#{$asset_suffix}';
              background-image: -gtk-scaled(url('#{$_url}.png'),
                                            url('#{$_url}@2.png'));
            }
          }
        }
      }
    }
  }
}

$thick_side: $scale_slider_size * 3 / 4;
$thin_side: $scale_slider_size / 2;

scale { // scales for color
  &.color,
  &.fine-tune.color {
    // min-height: 0;
    // min-width: 0;

    // not actual trough color
    trough {
      min-width: $scale_trough_size * 2;
      min-height: $scale_trough_size * 2;
      border-radius: 0;
      background-color: transparent;
    }

    slider {
      min-height: $scale_slider_size;
      min-width: $scale_slider_size;
      margin: -($scale_slider_size - $scale_trough_size * 2);
    }

    &.horizontal {
      margin: 0 (-$thin_side) $thin_side;
      padding: 0 ($thin_side);

      slider {
        &,
        &:hover,
        &:active,
        &:disabled { @extend %scale-has-marks-above-horz; }
      }
    }

    &.vertical {
      &:dir(ltr) {
        margin: (-$thin_side) (-$thin_side) (-$thin_side) $thin_side;
        padding: $thin_side $thin_side $thin_side 0;

        slider {
          &,
          &:hover,
          &:active,
          &:disabled { @extend %scale-has-marks-below-vert; }
        }
      }

      &:dir(rtl) {
        margin: (-$thin_side) $thin_side (-$thin_side) (-$thin_side);
        padding: $thin_side 0 $thin_side $thin_side;

        slider {
          &,
          &:hover,
          &:active,
          &:disabled { @extend %scale-has-marks-above-vert; }
        }
      }
    }
  }
}

%scale_marks_above_horz {
  margin: (-$thick_side) (-$thin_side) (-$thin_side) (-$thin_side);
}

%scale_marks_below_horz {
  margin: (-$thin_side) (-$thin_side) (-$thick_side) (-$thin_side);
}

%scale_marks_above_vert {
  margin: (-$thin_side) (-$thin_side) (-$thin_side) (-$thick_side);
}

%scale_marks_below_vert {
  margin: (-$thin_side) (-$thick_side) (-$thin_side) (-$thin_side);
}

// /*****************
//  * Progress bars *
//  *****************/

progressbar {
  // sizing
  &.horizontal {
    trough,
    progress {
      min-width: 0;
      min-height: $progress_size;
      border-style: none;
    }

    @if $maj_ver == 4 {
      trough { min-width: 150px; } // NEEDS_REVIEW
    }
  }

  &.vertical {
    trough,
    progress {
      min-width: $progress_size;
      min-height: 0;
      border-style: none;
    }

    @if $maj_ver == 4 {
      trough { min-height: 80px; } // NEEDS_REVIEW
    }
  }

  // FIXME: insensitive state missing and some other state
  // should be set probably
  font-size: 90%;
  color: $color_fg_3;

  trough {
    box-shadow: none;
    border-radius: 0;
    background-color: track($color_bg_acc, $alpha_track_out);
  }

  progress {
    box-shadow: none;
    border-radius: 0;
    background-color: $color_bg_acc;
    &.left {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
    &.right {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
    &.top {
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }
    &.bottom {
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }
  }

  &.osd {
    &.horizontal {
      min-width: 0;
      min-height: $progress_size;
    }
    &.vertical {
      min-width: $progress_size;
      min-height: 0;
    }

    trough {
      border-style: none;
      box-shadow: none;
      background-color: track($color_bg_acc, $alpha_track_out);
    }

    @if $maj_ver == 4 {
      // makes the progress indicator disappear, when the fraction is 0
      &.empty progress { all: unset; }
    }

    progress {
      background-image: none;
      background-color: $color_bg_acc;
      border-style: none;
      border-radius: 0;
    }
  }
}

// /*************
//  * Level Bar *
//  *************/

levelbar {
  &.horizontal {
    block {
      @if $maj_ver == 3 {
        min-width: $progress_size * 9;
        min-height: $progress_size;
      }
      @else { min-height: $progress_size; }
    }

    trough { padding: ($progress_size / 2) 1px; }

    &.discrete block { margin: 0 1px; }
  }
  &.vertical {
    block {
      @if $maj_ver == 3 {
        min-width: $progress_size;
        min-height: $progress_size * 9;
      }
      @else { min-width: $progress_size; }
    }

    trough { padding: 1px ($progress_size / 2); }

    &.discrete block { margin: 1px 0; }
  }

  block {
    border-radius: 0;
    border: none;
    box-shadow: none;

    &.low { background-color: $color_warn; }

    &:not(.empty),
    &.high { background-color: $color_bg_acc; }

    &.full,
    &.filled { background-color: $color_bg_sccs; }

    &.empty { background-color: $color_fg_trk_out; }
  }
}

// /****************
//  * Print dialog *
// *****************/

printdialog {
  @if $maj_ver == 3 {
    paper {
      padding: 0;
      color: $color_fg;
      border: 1px solid $color_fg_div;
      background-color: $color_base;
    }
  }
  @else {
    drawing {
      padding: 0;
      border: none;
      color: $color_fg;
      background-color: $color_base;
    }
  }

  .dialog-action-box { margin: rem(12px); }
}

// /**********
//  * Frames *
//  **********/

%basic_frame {
  margin: 0;
  padding: 0;
  border-radius: 0;
  border: 1px solid $color_fg_div;
  box-shadow: none;
}

@if $maj_ver == 3 {
  frame > border,
  .frame {
    @extend %basic_frame;

    &.flat { border-style: none; }
  }
}
@else {
  frame,
  .frame {
    @extend %basic_frame;

    &.flat { border-style: none; }
  }
}

actionbar {
  @if $maj_ver == 3 {
    > frame > border { border-width: 1px 0 0; }
  }
  @else {
    > frame { border-width: 1px 0 0; }
  }

  > revealer > box { border-top: 1px solid $color_fg_div; }
}

%scrolledwindow,
scrolledwindow {
  viewport.frame { // avoid double borders when viewport inside
                   // scrolled window
    border-style: none;
  }

  // This is used by GtkScrolledWindow,
  // when content is touch-dragged past boundaries.
  // This draws a box on top of the content, the size changes programmatically.
  overshoot {
    &.top { @include overshoot(top); }
    &.bottom { @include overshoot(bottom); }
    &.left { @include overshoot(left); }
    &.right { @include overshoot(right); }
  }

  junction { // the small square between two scrollbars
    border-color: transparent;
    // the border image is used to add the missing dot 
    // between the borders, details, details, details...
    border-image: linear-gradient(to bottom,
                                  $color_fg_div 1px,
                                  transparent 1px) 0 0 0 1 / 0 1px stretch;
    background-color: $color_base;

    &:dir(rtl) { border-image-slice: 0 1 0 0; }
  }
}

// /*********
//  * Lists *
//  *********/

list {
  border-color: $color_fg_div;
  background-color: $color_base;
}

row {
  @if $maj_ver == 3 { padding: 2px rem($menuitem_padding); }
  @else {
    &.expander { padding: 0; } // unset padding

    // move root padding to its childs
    &.expander .row-header { padding: 2px rem($menuitem_padding); }

    list.separators &:not(:first-child) {
      // draw list separators
      border-top: 1px solid $color_fg_div_sld;
    }
  }
}

row.activatable {
  @include ink-reaction(normal, $fc: $color_fg_3, $tr: ink-normal-row, $bs: 7);

  &.has-open-popup, // this is for indicating which sidebar row
                    // generated a popover
  &:hover {         // see https://bugzilla.gnome.org/show_bug.cgi?id=754411
    background-color: $color_bg_trk;
    @include transition(ink-normal-row);
  }
  &:active {
    // use shallower ink
    @include ink-reaction(active-dec, $fc: $color_fg_3, $tr: ink-active-row);
  }
  &:selected {
    &:hover {
      background-color: mix($color_fg_sel, $color_bg_sel, percentage($alpha_track_1));
    }
  }
}

// button and entry spacing
row {
  button.small-button {
    min-width: calc(#{rem($small_widget)} - 1px * 2);
    min-height: calc(#{rem($small_widget)} - 1px * 2);
    margin: rem($widget_size - $small_widget) / 2 0;
    padding: 0;
    @include radius($r);
    &.flat {
      min-width: rem($small_widget);
      min-height: rem($small_widget);
    }
  }

  // .round-button is used in some other places
  // reset spacing for 'eject' button
  placessidebar & {
    button.image-button:not(.text-button):not(.round-button),
    button.circular {
      min-width: $icon_size;
      min-height: $icon_size;
      margin: 0; // unset outer margins
      padding: rem(4px); // Same as of image.sidebar-icon
    }
  }
}

row:selected { @extend %selected_items; }

// /*********************
//  * App Notifications *
//  *********************/

%app_slider {
  margin: $shadow_margin_2;
  padding: $toolbar_padding;
  @include radius(0 0 $r_8 $r_8, none);
  background-clip: border-box;
  box-shadow: $z-depth-2;
}

.app-notification {
  @extend %app_slider;
  @if $variant == mixed {
    background-color: track($color_bg_tooltip_inv, $alpha_osd);
    color: $color_fg_inv;
  }
  @else {
    background-color: track($color_bg_tooltip, $alpha_osd);
    color: $color_fg;
  }

  &,
  > box.horizontal {
    > label { padding: 0 rem($entry_lr_space); }
  }

  box.vertical {
    > label {
      &#summary {
        color: if($variant == mixed, $color_fg_inv, $color_fg);
        font-weight: 700;
      }

      &#body {
        color: if($variant == mixed, $color_fg_inv_2, $color_fg_2);
      }
    }
  }

  border { border: none; }

  button { 
    @if $variant == mixed {
      @extend %inv-action-area-button;
    }
    @else {
      @extend %action-area-button;
    }
  }
}

// /*************
//  * Expanders *
//  *************/

%expander_label {
  color: $color_fg_2;
  &:hover,
  &:active { color: $color_fg; }
  &:selected { color: $color_fg_sel; }
  &:disabled { color: $color_fg_dis; }
}

%expander_label_spacing {
  margin-bottom: rem($baseline, $sw: 1.0);
  // spacer between arrow and label
  &:dir(ltr) { padding-left: rem($menu_padding, $sw: 1.0); }
  &:dir(rtl) { padding-right: rem($menu_padding, $sw: 1.0); }
}

%expander_arrow {
  @extend %arrow_size;
  -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
  &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }
  &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
  &:not(:hover):not(:active) { color: track(currentColor, $alpha_foreground_2nd); }
  &:selected { color: $color_fg_sel; }
  &:disabled { color: $color_fg_dis; }
}

@if $maj_ver == 3 {
  expander {
    label { @extend %expander_label; }

    title {
      padding: rem($menu_padding) rem($menuitem_padding);

      > arrow { @extend %expander_arrow; }
    }

    > label { @extend %expander_label_spacing; }
  }
}
@else {
  expander {
    @extend %expander_label;
    @extend %expander_arrow;

    &-widget {
      label { @extend %expander_label; }

      title { padding: rem($menu_padding) rem($menuitem_padding); }

      > label { @extend %expander_label_spacing; }
    }
  }
}

// /************
//  * Calendar *
//  ************/

calendar {
  margin: rem($menuitem_padding) 0;
  padding: if($ref_weight < 1.0, 2px 2px, 4px 3px);
  border: 1px solid $color_fg_div;
  color: $color_fg;
  font-weight: 500;
  &:selected {
    background-image: image($color_bg_sel);
    background-repeat: no-repeat;
    background-position: center top;
    background-size: if($ref_weight < 1.0, 100% calc(100% - (2px * 2)),
                                           100% calc(100% - (4px * 2)));
    color: $color_fg_sel;
  }

  &.header {
    border: 1px solid transparent;
    border-bottom-color: if($variant == dark, track(white, $alpha_div_2),
                                              $color_fg_div);
  }

  &.button,
  &.header.button {
    @include button(flat-normal, $tc: $color_fg_3);
    &:hover {
      @include button(flat-hover, $tc: $color_fg_2);
    }
    &:active {
      @include button(flat-active, $tc: $color_fg_2);
    }
    &:disabled {
      @include button(flat-disabled);
    }
  }

  &:indeterminate { color: track($color_fg, $alpha_foreground_3rd * $alpha_foreground_3rd); }

  &.highlight { // padding for week-number column
    padding-top: 0;
    padding-bottom: if($ref_weight < 1.0, 2px * 2, 4px * 2);
    color: $color_fg_3;
  }
}

// /***********
//  * Dialogs *
//  ***********/

messagedialog {
  &.background {
    color: if($variant == light, $color_fg, $color_fg_inv);
    background-color:
      if($variant == light, track($color_bg_dark, $alpha_osd),
                            track($color_bg_dark_inv, $alpha_osd));

    &.csd {
      // rounded bottom border styling for csd version
      border-bottom-left-radius: $r_8;
      border-bottom-right-radius: $r_8;

      // specificity bump to override generic headerbar radius
      &:not(.maximized):not(.fullscreen):not(.tiled):not(.solid-csd) {
        &:not(.tiled-top):not(.tiled-bottom) {
          &:not(.tiled-left):not(.tiled-right) {
            .titlebar {
              min-height: unset; // reset unneeded min-height
              border-top-left-radius: $r_8;
              border-top-right-radius: $r_8;
              background-color:
                if($variant == light, track($color_bg_dark, $alpha_osd),
                                      track($color_bg_dark_inv, $alpha_osd));
            }
          }
        }
      }
    }

    // use opaque
    &.solid-csd {
      background-color:
        if($variant == light, $color_bg_dark, $color_bg_dark_inv);
    }
  }

  .dialog-action-box {
    margin: 0;
    padding: 0;
    border-width: 0;

    buttonbox.dialog-action-area { margin: -6px; }
  }

  @if $maj_ver == 4 {
    // prevent labels running into action-area
    box.dialog-vbox.vertical { border-spacing: 10px; }

    label.title {
      font-size: 15px;
      font-weight: 700;
    }
  }

  .titlebar {
    min-height: $titlebutton_small + 3px + 2px;
    border-style: none;
    border-top-left-radius: $r_2;
    border-top-right-radius: $r_2;
    color: if($variant == light, $color_fg, $color_fg_inv);
    background-color:
      if($variant == light, $color_bg_dark, $color_bg_dark_inv);
  }

  &.background {
    @if $variant == mixed {
      entry {
        &, &.combo { @extend %inv_entry; }
      }

      button { @extend  %inv_button; }

      combobox { @extend %inv_combobox; }
    }
  }

  @if $variant == mixed {
    checkbutton.text-button,
    radiobutton.text-button {
      color: $color_fg_inv_2;
      &:hover,
      &:active,
      &:checked { color: $color_fg_inv; }
      &:disabled,
      &:disabled:active,
      &:disabled:indeterminate { color: $color_fg_dis_inv; }
    }
  }

  @if $variant == mixed {
    expander {
      label { color: $color_fg_inv; }

      title {
        label,
        arrow {
          color: $color_fg_inv_2;
          &:hover,
          &:active { color: $color_fg_inv; }
          &:disabled { color: $color_fg_dis_inv; }
        }
      }
    }

    textview.view { // scrolled text-views
      &, > text {
        background-color: $color_base;
        color: $color_fg;
        caret-color: $color_fg;
      }
    }
  }

  &.background,
  &.csd.background {
    .dialog-action-area button {
      @include radius(0);
      @if $variant == mixed { @extend %inv-action-area-button; }
      @else { @extend %action-area-button; }
    }
  }

  &.csd.background {
    .dialog-action-area.linked button {
      margin: 2px;
      @include radius(0);
      &:first-child {
        margin-right: 0;
        @include radius(0 0 0 $r_8);
      }
      &:last-child {
        margin-left: 0;
        @include radius(0 0 $r_8 0);
      }
      &:only-child {
        margin: 2px;
        @include radius(0 0 $r_8 $r_8);
      }
    }
  }
}

filechooser {
  .dialog-action-box { border-top: 1px solid $color_fg_div; }

  #pathbarbox {
    border-bottom: 0 none transparent;
    background-color: $color_bg;
  }

  // override defaults to prevent to be bold
  box > paned.horizontal > separator {
    background-image: image($color_fg_div_sld);
  }
}

filechooserbutton:drop(active) {
  box-shadow: none;
  border-color: transparent;
}

// /***********
//  * Sidebar *
//  ***********/

%sidebar_template {
  background-color: $color_bg;
}

%sidebar_row_template {
  min-height: rem($small_widget);
  background-color: transparent;
  color: $color_fg_2;
  font-weight: 500;
  &:hover {
    background-color: $color_bg_trk;
    color: $color_fg;
  }
  &:selected { @extend %selected_sidebar_row; }

  &:dir(ltr) { padding: 0 0 0 rem($menuitem_padding); }
  &:dir(rtl) { padding: 0 rem($menuitem_padding) 0 0; }
}

%sidebar_treeview {
  min-height: rem($small_widget);
  background-color: transparent;
  box-shadow: none;
  font-weight: 500;
  &:hover {
    background-color: $color_bg_trk;
    color: $color_fg;
  }
  &:selected {
    &, &:focus {
      background-color: $color_bg_trk;
      color: $color_lbl_sel;
      &:hover {
        background-color: $color_bg_trk;
        color: $color_lbl_sel;

        label { color: $color_lbl_sel; }
      }
    }
  }
}

%selected_sidebar_row {
  outline-width: 0; // unset focus outlines
  background-color: $color_bg_trk;
  color: $color_lbl_sel;

  &:dir(ltr) { @include radius(0 $r $r 0); }
  &:dir(rtl) { @include radius($r 0 0 $r); }

  &:focus { outline-width: 0; }

  label { color: $color_lbl_sel; }

  &:hover {
    background-color: $color_bg_trk;
    color: $color_lbl_sel;

    label { color: $color_lbl_sel; }
  }

  button {
    color: track($color_lbl_sel, $alpha_foreground_2nd);
    &:hover,
    &:active,
    &:checked { color: $color_lbl_sel; }
    &:disabled { color: $color_fg_dis; }
  }
}

// FIXME: exclude treeview node for lollypop's sidebar
// FIXME2: exclude separator node for HdyLeafLet
.sidebar:not(treeview):not(separator) {
  border: none;
  color: $color_fg_2;

  .frame { background-color: transparent; }

  treeview.view { @extend %sidebar_treeview; }

  // fill actual background
  background-color: $color_bg;

  row {
    @extend %sidebar_row_template;

    &.sidebar-row {
      margin: -1px 0; // subtract gaps
    }
  }
}

stacksidebar {
  row {
    @extend %sidebar_row_template;

    > label {
      padding-left: rem($pathbar_min_size * 1.5, $sw: 1.0);
      padding-right: rem($pathbar_min_size * 1.5, $sw: 1.0);
    }

    &.needs-attention > label { @extend %needs_attention; }
  }

  scrolledwindow > .frame {
    &:dir(ltr) { border-right: 1px solid $color_fg_div; }
    &:dir(rtl) { border-left: 1px solid $color_fg_div; }

    list { @extend %sidebar_template; }
  }

  separator { // hide separators
    min-height: 0;
    background-color: transparent;
  }
}

// /****************
//  * File chooser *
//  ****************/

placessidebar {
  @extend %scrolledwindow; // needs for overshoot / undershoot

  @if $maj_ver == 4 {
    // viewport.frame is deprecated
    > scrolledwindow.frame { border-style: none; } // for double-borders
  }

  list {
    // Background color for Nautilus and FileChooser sidebar
    @extend %sidebar_template;
  }

  row {
    // Needs overriding of the GtkListBoxRow padding
    // Actual padding is embedded into child elements
    @extend %sidebar_row_template;

    // Using margins/padding directly in the row
    // will make the animation of the new bookmark row jump
    > revealer { padding: 0 12px; }

    image.sidebar-icon {
      opacity: $alpha_foreground_2nd;
      &:dir(ltr) { padding-right: rem($pathbar_min_size * 2, $sw: 1.0); }
      &:dir(rtl) { padding-left: rem($pathbar_min_size * 2, $sw: 1.0); }
    }

    label.sidebar-label {
      padding-bottom: rem($baseline, $sw: 1.0);
      &:dir(ltr) { padding-right: rem($pathbar_min_size * 1.5, $sw: 1.0); }
      &:dir(rtl) { padding-left: rem($pathbar_min_size * 1.5, $sw: 1.0); }
    }

    button.image-button { // Eject button for removable storages
      @include button(flat-normal);
      &:hover { @include button(flat-hover); }
      &:active { @include button(flat-active); }
      &:disabled { @include button(flat-disabled); }
      &:checked { @include button(flat-checked); }
      &:checked:disabled { @include button(flat-checked-disabled); }
    }

    // looks like the label doesn't get all the states so work around
    &:selected:disabled label { color: $color_fg_dis_sel; }

    &.sidebar-placeholder-row {
      min-height: 2px;
      padding: 0 $menuitem_padding;
      background-image: image($color_fg_drop);
      background-clip: content-box;
    }

    &.sidebar-new-bookmark-row { color: $color_lbl_sel; }

    &:drop(active):not(:disabled) {
      color: $color_fg_drop;
      background-color: $color_bg_drop;
      // draw vertical indicators
      &:dir(ltr) { box-shadow: inset $progress_size 0 $color_fg_drop; }
      &:dir(rtl) { box-shadow: inset (-$progress_size) 0 $color_fg_drop; }

      &:selected {
        background-color: $color_fg_drop;

        &,
        .sidebar-label,
        .sidebar-icon { color: $color_fg; }
      }
    }
  }
}

placesview {
  .server-list-button > image {
  }

  .server-list-button:checked > image {
  }

  row.activatable:hover { background-color: transparent; }

  // this selects the "connect to server" label
  > actionbar > revealer > box {
    @if $maj_ver == 3 {
      > label {
        padding-left: rem($menuitem_padding);
        padding-right: rem($menuitem_padding);
      }
    }
    @else { // NEEDS_REVIEW
      > box { border-spacing: 6px; }
    }
  }
}

// /*********
//  * Paned *
//  *********/

paned {
  > separator {
    min-width: 1px;
    min-height: 1px;
    border-style: none;
    background-color: transparent;
    -gtk-icon-source: none; // defeats the ugly default handle decoration
    // using background instead of a border
    // since the border will get rendered twice (?)
    // FIXME: some damned non-native apps (like wxGtk3) can't render
    // alpha-blended pane separators at all.
    background-image: image($color_fg_div_sld);
    background-size: $separator_narrow;

    .background & {
      // do not across over GtkHeaderBar with solid border
      &,
      &:backdrop,
      &:selected {
        // FIXME: still happened double-border though
        background-image: image($color_fg_div_pane);
      }
    }

    .background > grid.vertical & { // do not use transparentize
      &,
      &:backdrop,
      &:selected {
        background-image: image($color_fg_div_sld);
      }
    }

    &.wide {
      min-width: rem(6px);
      min-height: rem(6px);
      margin: 0;
      padding: 0;
      // FIXME: use opaque borders to avoid double-border
      background-color: $color_bg;
      background-image: image($color_fg_div_sld),
                        image($color_fg_div_sld);
      background-size: $separator_wide;

      &:backdrop,
      &:selected { // FIXME: is this needed?
        background-image: image($color_fg_div_sld),
                          image($color_fg_div_sld);
      }
    }
  }

  &.horizontal > separator {
    background-repeat: repeat-y;

    &:dir(ltr) {
      margin: 0 rem(-$menuitem_padding) 0 0;
      padding: 0 rem($menuitem_padding) 0 0;
      background-position: left;
    }
    &:dir(rtl) {
      margin: 0 0 0 rem(-$menuitem_padding);
      padding: 0 0 0 rem($menuitem_padding);
      background-position: right;
    }

    &.wide {
      background-repeat: repeat-y, repeat-y;
      background-position: left, right;

      &:dir(ltr),
      &:dir(rtl) { // reset spacing
        margin: 0;
        padding: 0;
      }
    }
  }

  &.vertical > separator {
    margin: 0 0 rem(-$menuitem_padding) 0;
    padding: 0 0 rem($menuitem_padding) 0;
    background-repeat: repeat-x;
    background-position: top;

    &.wide {
      margin: 0; // reset spacing
      padding: 0;
      background-repeat: repeat-x, repeat-x;
      background-position: bottom, top;
    }
  }
}

// /************
//  * GtkVideo *
//  ************/

@if $maj_ver == 4 {
  video {
    background: black; // use pitch-black

    image.osd { // NEEDS_REVIEW
      min-width: $icon_size * 4;
      min-height: $icon_size * 4;
      border-radius: $icon_size * 2;
    }
  }
}

// /**************
//  * GtkInfoBar *
//  **************/

%inforbar_box {
  padding: $toolbar_padding;
  border-bottom: 1px solid $color_fg_div_sld; // do not use transparentize
  background-color: $color_bg_dark;
}

infobar {
  @if $maj_ver == 3 {
    @if $mnr_ver < 23 { @extend %inforbar_box; }
    @else {
      > revealer > box { @extend %inforbar_box; }
    }
  }
  @else {
    > revealer > box { @extend %inforbar_box; }
  }

  selection {
    &, &:focus { @extend %selected_items; }
  }

  &.info,
  &.question,
  &.warning,
  &.error {
    &, buttonbox:not(.linked) {
      button:not(.destructive-action):not(.suggested-action) {
        @extend %flat_button;
      }
    }
  }
}

@each $_type, $_color in (info, $color_bg_info),
                         (question, $color_bg_ques),
                         (warning, $color_bg_warn),
                         (error, $color_bg_err) {
  infobar.#{$_type} {
    @if $maj_ver == 3 {
      @if $mnr_ver < 23 {
        background-color: if($variant == dark,
                             mix($_color, $color_bg, percentage($alpha_track_1)),
                             mix($_color, $color_bg_dark, percentage($alpha_track_2)));
      }
      @else {
        > revealer > box {
          background-color: if($variant == dark,
                               mix($_color, $color_bg, percentage($alpha_track_1)),
                               mix($_color, $color_bg_dark, percentage($alpha_track_2)));
        }
      }
    }
    @else {
      > revealer > box {
        background-color: if($variant == dark,
                             mix($_color, $color_bg, percentage($alpha_track_1)),
                             mix($_color, $color_bg_dark, percentage($alpha_track_2)));
      }
    }
    color: mix($color_fg, $_color, percentage($alpha_foreground_3rd));

    progressbar { // use 'white' bit and trough
      trough { background-color: track($_color, $alpha_track_out); }

      progress { background-color: $_color; }
    }

  }
}

// /************
//  * Tooltips *
//  ************/

tooltip {
  &.background {
    @if $variant == mixed {
      // FIXME: Eclipse specific tooltip widgets needs non-inverted backgrounds
      // even if alpha-value was 0.1%, so real backgrounds are drawn with
      // background-image property instead.
      background-color: track($color_base, 0.001);
      background-image: image(track($color_bg_tooltip_inv, ($alpha_osd + 0.001)));
    }
    @else {
      background-color: track($color_bg_tooltip, $alpha_osd);
    }
  }

  label, // default foregrounds
  image {
    color: if($variant == mixed, $color_fg_inv, $color_fg);
  }

  &.csd {
    @include radius($r_2, none);

    @if $maj_ver == 3 {
      // add inner padding (use non-scalable unit instead)
      > box {
        label { padding: if($ref_weight < 1.0, 0px 1px 1px, 1px 2px 2px); }
      }
    }
  }

  @if $maj_ver == 4 {
    // add inner padding (use non-scalable unit instead)
    padding: if($ref_weight < 1.0, 6px 7px 7px, 7px 8px 8px);
  }
}

.tooltip:not(tooltip) {
  // protect the child widget foregrounds for damned Eclipse's debug tooltips
  > * > label { color: $color_fg; }
}

// /*****************
//  * Color Chooser *
//  *****************/

colorswatch {
  // This widget is made of two boxes one on top of the other,
  // the lower box is colorswatch {} the other one is
  // colorswatch > .overlay {}, colorswatch has the programmatically set
  // background, so most of the style is applied to the overlay box.
  @include radius($r_2);
  box-shadow: $z-depth-1;
  @include transition(std);

  // do not use roundness
  &, &.overlay { @include radius(0, none); }

  // hover effect
  &:hover { box-shadow: $z-depth-2; }

  // no hover effect for the colorswatch in the color editor
  GtkColorEditor & {
    @include radius($r, none); // same radius as the entry
    &:hover { box-shadow: $z-depth-1; }
  }

  // indicator and keynav outline colors
  &.color-dark { color: track(white, $alpha_foreground_2nd); }

  &.color-light { color: track(black, $alpha_foreground_2nd); }

  // make the add color button looks like, well, a button
  &#add-color-button {
    background-image: linear-gradient(to right,
                                      $color_bg_err 25%,
                                      $color_bg_warn 25%,
                                      $color_bg_warn 50%,
                                      $color_bg_info 50%,
                                      $color_bg_info 75%,
                                      $color_bg_ques 75%);
    color: white;
  }

  &#editor-color-sample {
    min-width: rem($widget_size);
    min-height: rem($widget_size);
    // FIXME: 32px hard-coded height in widget-factory?
    margin: calc((#{rem($widget_size)} - 32px) / 2) 0;
    @include radius($r_2, none);
    box-shadow: inset 0 0 0 1px $color_fg_div_sld;
  }
}

// colorchooser spacing
colorchooser overlay > grid {
  // FIXME: above 'editor-color-sample' needs extra
  @if rem($widget_size) < (32px / $ref_size * 1rem) {
    padding-top: calc((32px - #{rem($widget_size)}) / 2);
  }
}

// colorscale popup
colorchooser .popover.osd {
  padding: $toolbar_padding;
  border: none;
  @include radius($r_8, none);
  box-shadow: none;
  color: if($variant == light, $color_fg, $color_fg_inv);
  background-color: if($variant == light, $color_bg_dark,
                                          $color_bg_dark_inv);

  label {
    color: if($variant == light, $color_fg_acc, $color_fg_acc_inv);
    font-weight: 700;
  }
}

// /********
//  * Misc *
//  ********/

// content view (grid/list)
.content-view {
  background-color: $color_bg;
  @if $maj_ver == 4 {
    &:hover { -gtk-icon-filter: brightness(1.2); }
  }
}

// Decouple the font of context menus from their entry/textview
.context-menu {
  font-weight: 400;
  font-size: 100%;
}

.scale-popup {
  .osd & { @extend %osd; }

  .osd & .vertical button.flat,
  .vertical button.flat { // +/- buttons on GtkVolumeButton popup
    &:first-child { // '+' button
      &:hover {
        @include button(flat-hover, $tc: $color_bg_sccs);
      }
      &:disabled {
        @include button(flat-disabled, $tc: $color_bg_sccs);
      }
    }
    &:last-child { // '-' button
      &:hover {
        @include button(flat-hover, $tc: $color_err);
      }
      &:disabled {
        @include button(flat-disabled, $tc: $color_err);
      }
    }
  }

  .osd & button,
  button { @include radius($r); }
}

button.flat.scale { // standalone Speaker/Mic buttons
  // I assume both are image-button *by default*
  // with the image-button/text-button classes automatically applied
  // depending on the button child these selectors can be deleted.
  // @extend %image_button;
  padding: 0;
  @include radius($r);
}

%floating_bar {
  border: 1px solid transparent;
  color: if($variant == mixed, $color_fg_inv, $color_fg);
  background-color: if($variant == mixed, $color_bg_tooltip_inv,
                                          $color_bg_tooltip);
  font-size: 90%;
  opacity: $alpha_osd;
}

.floating-bar {
  @extend %floating_bar;
  padding: 0;

  label { min-height: rem($icon_size * 1.75); }

  button {
    @extend %fb_child_spacing;
    @if $variant == mixed {
      @extend %inv-action-area-button;
    }
    @else {
      @extend %action-area-button;
    }
  }

  &.bottom.left { @extend %floating_bar_left; }

  &.bottom.right { @extend %floating_bar_right; }
}

%fb_child_spacing {
  min-height: rem($icon_size * 1.75);
  min-width: rem($icon_size * 1.75);
  margin: 0;
  padding: 0;
}

%floating_bar_left {
  @include radius(0 $r_4 0 0, none);
  border-width: 1px 1px 0 0;
}

%floating_bar_right {
  @include radius($r_4 0 0 0, none);
  border-width: 1px 0 0 1px;
}

// /**********************
//  * Window Decorations *
//  *********************/

decoration {
  margin: $deco_margin; // this is used for the resize cursor area
  @include radius($r_2 $r_2 0 0, none);
  border-width: 0;
  background-color: transparent;
  box-shadow: $z-depth-4;
  @include transition(normal-deco);

  &:backdrop {
    // the transparent shadow here is to enforce that the shadow extents don't
    // change when we go to backdrop, to prevent jumping windows.
    // The biggest shadow should be in the same order then in the active state
    // or the jumping will happen during the transition.
    box-shadow: $z-depth-2-backdrop;
  }

  .fullscreen &,
  .maximized & {
    &, &:backdrop { border-radius: 0; }
  }

  @if $maj_ver == 3 {
    @if $mnr_ver > 23 {
      // FIXME: maxd SSDs seem to introduce unwanted window edge artifacts
      // when the child modal-dialog is attached on GNOME 3.32, mystery...
      window.fullscreen:not(.csd) &,
      window.maximized:not(.csd) & {
        &, &:backdrop {
          box-shadow: none;
          transition-duration: 0s;
        }
      }
    }
  }
  @else {
    window.fullscreen:not(.csd) &,
    window.maximized:not(.csd) & {
      &, &:backdrop {
        box-shadow: none;
        transition-duration: 0s;
      }
    }
  }

  @each $_constraint,
        $_shadow in ('', $z-depth-2-backdrop-tiled),
                    ('-top', $z-depth-2-backdrop-tiled-top),
                    ('-bottom', $z-depth-2-backdrop-tiled-bottom),
                    ('-left', $z-depth-2-backdrop-tiled-left),
                    ('-right' $z-depth-2-backdrop-tiled-right) {
    // draw empty shadows + window edges when tiled
    // FIXME: window node was not needed semantically, but Solus build seems
    // to draw tiled-edges in GtkDialogs. Mystery...
    window.tiled#{$_constraint} & {
      border-radius: 0;
      box-shadow: #{$_shadow};
    }
  }

  // server-side decorations as used by mutter
  .ssd & { box-shadow: $z-depth-2; }

  // 'tiled' state in X11-SSD mode
  @each $_constraint,
        $_shadow in ('', $z-depth-2-tiled),
                    ('-top', $z-depth-2-tiled-top),
                    ('-bottom', $z-depth-2-tiled-bottom),
                    ('-left', $z-depth-2-tiled-left),
                    ('-right' $z-depth-2-tiled-right) {
    // draw empty shadows + window edges when tiled
    window.ssd.tiled#{$_constraint} & { box-shadow: #{$_shadow}; }
  }

  .popup & { box-shadow: none; }

  .csd.popup & {
    @include radius($r_4, none);
    box-shadow: $z-depth-3;
  }

  tooltip.csd & {
    @include radius($r_2, none);
    box-shadow: none;
    @include transition(reset);
  }

  messagedialog.csd & {
    @include radius($r_8, none);
    box-shadow: $z-depth-4;
    &:backdrop { box-shadow: $z-depth-2-backdrop; }
  }

  .solid-csd & {
    margin: 0;
    padding: 2px + 1px; // actual outset borders + inset border-frame
    border-radius: 0;
    border: none;
    background-color: $color_fg_div_sld;
    @if $variant == light {
      box-shadow: inset 0 0 0 2px $color_bg_dark,
                  inset 0 1px $color_fg_div_top;
    }
    @else {
      box-shadow: inset 0 0 0 2px $color_bg_dark_inv,
                  inset 0 1px $color_fg_div_top;
    }
  }
}

// Window manager buttons
.csd headerbar:not(.default-decoration),
.solid-csd headerbar:not(.default-decoration) {
  > box.horizontal { // hide vertical separators
    &.left,
    &.right {
      separator.vertical {
        min-width: 0;
        background-color: transparent;
      }
    }
  }

  button.titlebutton {
    // optimize sizes with flat-style
    min-width: calc(#{rem($widget_size)} - 0.5px * 2);
    min-height: calc(#{rem($widget_size)} - 0.5px * 2);
    margin: calc(#{$toolbar_padding} + 0.75px)
            0
            calc(#{$toolbar_padding} + 0.5px);
    padding: 0;
    @include radius($r, none);
    @if $variant == light {
      @extend %flat_button;
    }
    @else {
      @extend %inv_flat_button;
    }

    &.close {
      &:hover {
        background-color: $color_bg_dest;
        color: $color_fg_sel;
      }
      &:active {
        background-color: $color_bg_dest;
        color: $color_fg_sel;
        @include ink-reaction(
                   active-close-dec, $fc: $color_bg_sel, $tr: ink-active-dec);
      }
    }
  }
}

// specific button styling for Mutter's SSDs, Metacity's CSDs and XWayland
%ssd_button {
  min-width: $titlebutton_small;
  min-height: $titlebutton_small;
  margin: 0; // reset outer margins
  padding: 0;
  @include radius($r, none);
  @if $variant == light { @extend %flat_button; }
  @else { @extend %inv_flat_button; }
}

.csd headerbar.titlebar.default-decoration {
  @if $maj_ver == 3 {
    button.titlebutton { @extend %ssd_button; }
  }
  @else {
    button.titlebutton,
    menubutton.titlebutton { @extend %ssd_button; } // for appmenu
  }
}

.ssd .titlebar,
headerbar.titlebar.default-decoration {
  button.titlebutton {
    @extend %ssd_button;
    &:not(.close) {
      &:active { // draw solid bg instead
        background-color: if($variant == mixed,
                             track($color_fg_inv,  $alpha_track_2),
                             track($color_fg, $alpha_track_2));
      }
      &:backdrop {
        color: if($variant == mixed, track($color_fg_inv_2, $alpha_foreground_bdp),
                                     track($color_fg_2, $alpha_foreground_bdp));
        &:hover {
          color: if($variant == mixed, track($color_fg_inv, $alpha_foreground_bdp),
                                       track($color_fg, $alpha_foreground_bdp));
        }
        &:active { color: if($variant == mixed, $color_fg_inv, $color_fg); }
      }
    }

    &.close {
      color: if($variant == mixed, $color_fg_inv_2, $color_fg_2);
      &:hover {
        background-color: $color_bg_dest;
        color: $color_fg_sel;
      }
      &:active {
        background-color: $color_bg_sel;
        color: $color_fg_sel;
      }
      &:backdrop {
        color: if($variant == mixed, track($color_fg_inv_2, $alpha_foreground_bdp),
                                     track($color_fg_2, $alpha_foreground_bdp));
        &:hover {
          background-color: track($color_bg_dest, $alpha_foreground_bdp);
          color: track($color_fg_sel, $alpha_foreground_bdp);
        }
        &:active {
          background-color: $color_bg_sel;
          color: $color_fg_sel;
        }
      }
    }
  }

  @if $maj_ver == 4 {
    menubutton.titlebutton { @extend %ssd_button; } // for appmenu
  }
}

// /*************
//  * Selection *
//  *************/

%selected_items {
  background-color: $color_bg_sel;
  color: $color_fg_sel;
  &:disabled {
    background-color: track($color_bg_sel, $alpha_foreground_dis);
    color: $color_fg_dis_sel;
  }
  &:focus {
    background-color: $color_bg_sel;
    color: $color_fg_sel;
    &:disabled {
      background-color: track($color_bg_sel, $alpha_foreground_dis);
      color: $color_fg_dis_sel;
    }
  }
}

%selected_texts {
  @if $variant == dark {
    background-color: $color_bg_sel;
    color: $color_fg_sel;
    &:disabled {
      background-color: track($color_bg_sel, $alpha_foreground_dis);
      color: $color_fg_dis_sel;
    }
  }
  @else {
    background-color: track($color_bg_sel, $alpha_foreground_bdp);
    color: $color_fg;
    &:disabled {
      background-color: track($color_bg_sel, $alpha_track_out);
      color: $color_fg_dis;
    }
  }
  &:focus {
    @if $variant == dark {
      background-color: $color_bg_sel;
      color: $color_fg_sel;
      &:disabled {
        background-color: track($color_bg_sel, $alpha_foreground_dis);
        color: $color_fg_dis_sel;
      }
    }
    @else {
      background-color: track($color_bg_sel, $alpha_foreground_bdp);
      color: $color_fg;
      &:disabled {
        background-color: track($color_bg_sel, $alpha_track_out);
        color: $color_fg_dis;
      }
    }
  }
}

// FIXME: needs to be done widget by widget,
// this wildcard should really die
*:not(decoration):not(window):drop(active) {
  &, &:focus {
    border-color: $color_fg_drop;
    box-shadow: inset 0 0 0 1px $color_fg_drop;
    caret-color: $color_fg_drop;

    @if $variant == mixed {
      headerbar & {
        border-color: $color_fg_drop_inv;
        box-shadow: inset 0 0 0 1px $color_fg_drop_inv;
        caret-color: $color_fg_drop_inv;
      }
    }
  }
}

// /**********************
//  * Touch Copy & Paste *
//  *********************/

// touch selection handlebars for the Popover.osd above
cursor-handle {
  min-width: $handle_width;
  min-height: $handle_height;
  padding: 0 ($handle_width / 2);
  border: none;
  background: none;
  box-shadow: none;

  &.top:dir(ltr),
  &.bottom:dir(rtl) { // start-handle
    -gtk-icon-source:
      -gtk-scaled(url('assets/handle-start#{$asset_suffix}.png'),
                  url('assets/handle-start#{$asset_suffix}@2.png'));
    -gtk-icon-transform: scale(0.9);
    &:hover,
    &:active {
      -gtk-icon-transform: scale(1.0);
    }
  }

  &.top:dir(rtl),
  &.bottom:dir(ltr) { // end-handle
    -gtk-icon-source:
      -gtk-scaled(url('assets/handle-end#{$asset_suffix}.png'),
                  url('assets/handle-end#{$asset_suffix}@2.png'));
    -gtk-icon-transform: scale(0.9);
    &:hover,
    &:active {
      -gtk-icon-transform: scale(1.0);
    }
  }

  &.insertion-cursor {
    &:dir(ltr),
    &:dir(rtl) {
      -gtk-icon-source: -gtk-scaled(
        url('assets/slider-horz-scale-has-marks-above#{$asset_suffix}.png'),
        url('assets/slider-horz-scale-has-marks-above#{$asset_suffix}@2.png'));
      -gtk-icon-transform: scale(0.9);
      &:hover,
      &:active { -gtk-icon-transform: scale(1.0); }
    }
  }
}

@if $maj_ver == 3 {
  popover.background.touch-selection { background-color: $color_bg_dark; }
}
@else {
  popover.touch-selection > contents.background { background-color: $color_bg_dark; }
}

// /*******************
//  * Shortcut Window *
//  *******************/

@if $maj_ver == 4 {
  shortcut { border-spacing: 6px; }
}

.keycap {
  min-width: rem($widget_size / 2, $sw: 1.0);
  min-height: rem($widget_size / 2, $sw: 1.0);
  padding: rem((($widget_size / 2) - ($ref_size + $baseline)) / 2, $sw: 1.0)
           rem((($widget_size / 2) - $ref_size) / 2, $sw: 1.0)
           rem((($widget_size / 2) - ($ref_size - $baseline)) / 2, $sw: 1.0);
  border: none;
  @include radius($r_2, none);
  @if $variant == mixed {
    background-color: $color_bg_dark_inv;
    color: $color_fg_inv;
  }
  @else {
    background-color: $color_bg_dark;
    color: $color_fg;
  }
  box-shadow: $z-depth-1;
  font-weight: 700;

  // shortcut keycaps for Gnome-builder
  tooltip.background & {
    background-color: $color_bg_sgst;
    color: $color_fg_sel;
    box-shadow: none;
  }
}

@if $maj_ver == 3 {
  shortcut.horizontal {
    padding-bottom: 6px; // reserve drop-shadow region

    tooltip.background & { padding: 0; } // reset for tooltip nodes
  }
}
@else {
  shortcuts { // NEEDS_REVIEW
    &-group {
    }

    &-section {
      margin: 20px;
    }
  }

  .shortcuts-search-results {
    margin: 20px;
    border-spacing: 24px;
  }
}

// /*************
//  * App Icons *
//  *************/

@if $maj_ver == 4 {
  // These classes strongly depend on user's icon-theme. Currently I don't
  // think we should hightlighten those icon edges because those icons are
  // not the very part of important clickable widgets in most cases...
  .lowres-icon { -gtk-icon-shadow: none; }

  // mainly for 'About' box
  .icon-dropshadow { -gtk-icon-shadow: none; }
}

// /****************
//  * Emoji Picker *
//  ****************/

popover.emoji {
  &-picker {
    padding: $popover_padding;

    scrolledwindow.view {
      margin: $popover_padding 0;
      background-color: $color_bg_dark;
    }
  }

  &-completion {
    @if $maj_ver == 3 {
      arrow {
        border: none;
        background: none;
      }
    }

    contents row box { padding: 2px 10px; } // NEEDS_REVIEW
  }
}

@if $maj_ver == 4 {
  popover.entry-completion contents { padding: 0; }
}

flowboxchild.emoji { // emoji tiled view
  padding: 0;
  @include radius($r_2, none);
  font-weight: 400;

  label {
    padding: $menu_padding;
    font-size: $icon_size; // use fixed label size
    color: $color_fg_2;
  }

  widget:hover label { // no active/checked states
    background-color: $color_bg_trk;
    color: $color_fg;
  }
}

popover.emoji-picker button.emoji-section.flat {
  min-height: rem($widget_size - 4px, $sw: 1.0);
  min-width: rem($widget_size - 4px, $sw: 1.0);
  padding: 0;
  @if $maj_ver == 3 {
    @if $mnr_ver > 23 { @include radius($r); }
    @else { @include radius($r_2); }
  }
  @else { @include radius($r); }
  &:checked {
    background-color: $color_bg_trk;
    color: $color_lbl_sel;
  }

  label {
    margin: 0;
    padding: 0;
    font-size: $icon_size * 1.5; // use fixed label size
  }
}
