// /******************
//  * Budgie-Desktop *
//  ******************/

// main container
.budgie-container { background-color: transparent; }

@import 'panel';

@each $along_side, $opp_side in (top, bottom),
                                (bottom, top),
                                (left, right),
                                (right, left) {
  // panel shadow styling
  .#{$along_side} .shadow-block {
    background-color: transparent;
    background-image: linear-gradient(to #{$opp_side},
                                      track(black, 0.23),
                                      track(black, 0.08),
                                      transparent);
  }
}

// wnck tasklist styling
.budgie-panel button#tasklist-button {
  box-shadow: none; // unset standard wnck styling
  @include ink-reaction(normal, $tr: ink-normal-dec);

  label { margin-bottom: 0; } // unset baseline

  image {
    min-width: 0;
    min-height: $icon_size * 1.5;

    .left &,
    .right & {
      min-width: $icon_size * 1.5;
      min-height: 0;
    }
  }

  label,
  image { opacity: $alpha_foreground_2nd; }

  &:hover,
  &:active,
  &:checked {
    box-shadow: none;

    label,
    image { opacity: 1.0; }
  }

  &:active {
    @include ink-reaction(active-dec, $tr: ink-active-dec);
  }
}

// icon tasklist styling
%icon_tasklist_droptarget,
box.pinned { // drop-target
  &:drop(active) {
    border: none;
    border-radius: 0;
    background-color: $color_bg_drop;
    box-shadow: inset 0 0 0 1px $color_fg_drop;
  }
}

.budgie-panel {
  @at-root %budgie_icon_tasklist_button,
  button.flat.launcher {
    min-width: $icon_size;
    min-height: $icon_size;
    padding: 0;
    border-radius: 0;
    @if $variant == mixed {
      @include button(flat-normal, $tc: $color_fg_inv);
      @include ink-reaction(
                 normal, $fc: $color_fg_inv, $tr: ink-normal-dec, $bs: 10, $i: 2);
    }
    @else {
      @include button(flat-normal, $tc: $color_fg);
      @include ink-reaction(
                 normal, $fc: $color_fg, $tr: ink-normal-dec, $bs: 10, $i: 2);
    }

    > image {
      opacity: $alpha_foreground_2nd;
      transition: opacity $transition_d_standard $transition_t_dec,
                  background-image 0s;
    }

    &:hover {
      @if $variant == mixed { @include button(flat-hover, $tc: $color_fg_inv); }
      @else { @include button(flat-hover, $tc: $color_fg); }
      @if $maj_ver == 3 { -gtk-icon-effect: highlight; }
      @else { -gtk-icon-filter: brightness(1.2); }

      > image { opacity: 1.0; }
    }
    &:active {
      @if $variant == mixed {
        @include button(flat-active, $tc: $color_fg_inv);
        @include
          ink-reaction(
            active-dec, $fc: $color_fg_inv, $tr: ink-active-dec, $bs: 10, $i: 2);
      }
      @else {
        @include button(flat-active, $tc: $color_fg);
        @include
          ink-reaction(
            active-dec, $fc: $color_fg, $tr: ink-active-dec, $bs: 10, $i: 2);
      }

      > image { opacity: 1.0; }
    }
    &:checked {
      @if $variant == mixed { @include button(flat-hover, $tc: $color_fg_inv); }
      @else { @include button(flat-hover, $tc: $color_fg); }
      &:hover {
        @if $maj_ver == 3 { -gtk-icon-effect: highlight; }
        @else { -gtk-icon-filter: brightness(1.2); }
      }

      > image { opacity: 1.0; }
    }
  }

  @at-root %running_budgie_icon_tasklist_button,
  .unpinned button.flat.launcher,
  .pinned button.flat.launcher.running {
    &:hover {
      @if $maj_ver == 3 { -gtk-icon-effect: highlight; }
      @else { -gtk-icon-filter: brightness(1.2); }
    }

    > image {
      background-repeat: no-repeat;
      transition: opacity $transition_d_standard $transition_t_dec,
                  background-image 0s;
      opacity: 1.0;
    }

    &:hover,
    &:active,
    &:checked {
      > image { background-image: none; }
    }
  }
}

// draw underscores and dots
@each $position, $_line, $_dot in (top, 0 3px, 6px 3px),
                                  (bottom, 0 -3px, 6px 3px),
                                  (left, 3px 0, 3px 6px),
                                  (right, -3px 0, 3px 6px) {
  .#{$position} .budgie-panel {
    button#tasklist-button,
    button.flat.launcher {
      &:hover {
        @if $variant == mixed {
          box-shadow: inset #{$_line} track($color_fg_inv, $alpha_foreground_bdp);
        }
        @else {
          box-shadow: inset #{$_line} track($color_fg, $alpha_foreground_bdp);
        }
      }
      &:active,
      &:checked {
        box-shadow: inset #{$_line} $color_bg_sel;
      }
    }

    .unpinned button.flat.launcher,
    .pinned button.flat.launcher.running {
      > image {
        background-image:
          if($variant == light,
             image($color_bg_sel),
             image(saturate(lighten($color_bg_sel, percentage($alpha_track_2)),
                   percentage($alpha_track_2))));
        background-size: #{$_dot};
        background-position: #{$position} center;
      }

      &:hover,
      &:active,
      &:checked {
        box-shadow: inset #{$_line} $color_bg_sel;
      }
    }
  }
}

// upcoming icon tasklist
widget.icon-tasklist {
  > box:drop(active) { // drop-target
    @extend %icon_tasklist_droptarget;
  }
}

box:not(.unpinned):not(.pinned) > revealer > button.flat.launcher {
  transition: opacity $transition_d_standard $transition_t_standard,
              background-color $transition_d_long $transition_t_dec,
              background-image $transition_d_long $transition_t_dec,
              box-shadow $transition_d_none $transition_t_dec; // exclude box-shadows

  &:hover,
  &:checked,
  &.running { box-shadow: none; } // unset before drawing indicators

  &:active {
    box-shadow: none;
    transition: opacity $transition_d_standard $transition_t_standard,
                background-color $transition_d_long $transition_t_dec,
                background-image $transition_d_long $transition_t_dec,
                box-shadow $transition_d_none $transition_t_dec;
  }
}

@each $position, $_line, $_bg_p, $_bg_s in
(top, 0 3px, bottom, '100% calc(100% - 3px)'),
(bottom, 0 -3px, top, '100% calc(100% - 3px)'),
(left, 3px 0, right, 'calc(100% - 3px) 100%'),
(right, -3px 0, left, 'calc(100% - 3px) 100%') {
  .#{$position} {
    box:not(.unpinned):not(.pinned) > revealer > button.flat.launcher {
      &:not(:checked):hover {
        @if $variant == mixed {
          box-shadow: inset #{$_line} track($color_fg_inv, $alpha_foreground_bdp);
        }
        @else {
          box-shadow: inset #{$_line} track($color_fg, $alpha_foreground_bdp);
        }

        &.running { box-shadow: inset #{$_line} $color_bg_sel; }
      }
      &:checked {
        // unset default backgrounds before starting -image property
        &, &:hover { background-color: transparent; }

        // FIXME: background-color is drawn 'above' its line-indicators,
        // it means we need to avoid those regions when filling backgrounds.
        image {
          background-position: #{$_bg_p};
          background-size: #{$_bg_s};
          background-repeat: no-repeat;
          @if $variant == mixed {
            background-image: image(track($color_fg_inv, $alpha_track_1));
          }
          @else {
            background-image: image(track($color_fg, $alpha_track_1));
          }
        }
      }
    }
  }
}

// end region
.end-region > widget > widget {
  > box.horizontal { // 'Stats Indicator'
    > widget > widget > image { // 'bluetooth'
      &:dir(ltr) { margin: 0 2px 0 -1px; }
      &:dir(rtl) { margin: 0 -1px 0 2px; }
    }

    > widget.sound-applet > widget > image { // 'sound'
      min-width: $icon_size + 2px;
      margin: 0;
    }

    > widget > widget > box.horizontal > image,
    box.battery-icon.horizontal > image { // 'battery'
      min-width: $icon_size + 6px;
    }
  }

  box.battery-icon { // 'percent label'
    &.horizontal > label.percent-label {
      &:dir(ltr) { margin: 0 -6px 0 3px; }
      &:dir(rtl) { margin: 0 3px 0 -6px; }
    }

    &.vertical > label.percent-label {
      font-size: 75%;
      &:dir(ltr) { margin-right: -2px; }
      &:dir(rtl) { margin-left: -2px; }
    }
  }

  > image { // 'Notification' and 'User Indicator'
    min-width: $icon_size + 4px;
  }
}

// budgie specific popover widgets
window.budgie-popover:not(.csd) {
  &.background {
    @extend %popover;
    @include radius($r_4, none);
    border: 1px solid $color_fg_div_sld;
    background-clip: border-box;
    background-color: $color_bg_dark;
    box-shadow: $z-depth-2; // FIXME: we can't expose depth-3

    separator.horizontal {
      @if $variant == dark {
        background-color: track(white, $alpha_div_2);
      }
    }

    *:not(.linked):not(combobox):not(spinbutton) > entry:not(.combo) {
      @extend %flat_entry_sizing;
      @extend %flat_entry_styling;
    }
  }

  > frame.container { // generic popover spacing
    &,
    > border {
      border-style: none; // hide container borders
      background-color: transparent;
    }

    stack { // icon-tasklist/clock popover stack
      separator.horizontal { margin: rem($menu_padding) 0; }

      &.clock-applet-stack { padding: 0; }

      &.icon-popover-stack { padding: $popover_padding; }
    }
  }

  &.budgie-menu,
  &.caffeine-popover,
  &.night-light-indicator,
  &.places-menu,
  &.user-menu,
  &.workspace-popover {
    > frame.container { padding: $popover_padding; }
  }
}

// icon-tasklist popover styling
$requested_height: 32px; // hard-coded

stack.icon-popover-stack {
  box.horizontal > button.flat {
    min-height: $requested_height;
    min-width: $requested_height;

    &:first-child:not(:only-child) {
      font-weight: 500; // text-buttons
    }
    &:not(:first-child):not(:only-child) {
      &:not(:last-child) { // 'close' buttons
        @include button(flat-normal, $tc: $color_bg_dest);
        @include ink-reaction(normal, $fc: $color_bg_dest);
        &:hover { @include button(flat-hover, $tc: $color_bg_dest); }
        &:active {
          @include button(flat-active, $tc: $color_bg_dest);
          @include ink-reaction(active-dec, $fc: $color_bg_dest);
        }
        &:disabled { @include button(flat-disabled, $tc: $color_bg_dest); }
        &:checked { @include button(flat-checked, $tc: $color_bg_dest); }
      }
    }
  }

  grid.horizontal { // bottom button container
    > button.flat.image-button { // switch to outlined button array
      @extend %action-area-button;
      min-height: $requested_height;
    }
  }
}

// main menu styling
%budgie_trigger_button {
  min-width: $icon_size;
  min-height: $icon_size;
  padding: 0;
  @include radius(0, none);
  background-color: transparent;
  color: if($variant == mixed, $color_fg_inv, $color_fg);
  font-weight: 700; // enforce bold weight
  &:not(:disabled) {
    background-color: transparent;
    background-image: none;
    animation: none;
  }
}

button.flat.budgie-menu-launcher {
  @extend %budgie_trigger_button;

  box.horizontal > label {
    &:dir(ltr) { margin-left: -$icon_size / 4; }
    &:dir(rtl) { margin-right: -$icon_size / 4; }
  }
}

.budgie-menu {
  scrolledwindow,
  list,
  row,
  scrollbar { // reset styling
    min-width: 0;
    min-height: 0;
    border: none;
    background: none;
    box-shadow: none;
  }

  entry { margin-bottom: $popover_padding; }

  row.activatable { // reset background
    padding: 0;
    background-image: none;
    background-color: $color_bg_dark;
    color: $color_fg_2;
    transition-duration: $transition_d_none;

    // FIXME: enlarge vertical spacing with padding of icons
    image { padding: rem($menuitem_padding) 0; }

    &:hover,
    &:selected {
      background-image: none;
      background-color: $color_bg_dark;
      // child button node has hover state already
      color: $color_fg_2;
      transition-duration: $transition_d_none;
    }
  }

  .categories { // left-paned elements of GtkPopover
    background-color: transparent;
    &:dir(ltr) {
      margin-right: $popover_padding;
      border-right: 1px solid if($variant == dark, track(white, $alpha_div_2),
                                                   $color_fg_div);
    }
    &:dir(rtl) {
      margin-left: $popover_padding;
      border-left: 1px solid if($variant == dark, track(white, $alpha_div_2),
                                                  $color_fg_div);
    }

    button.flat.radio.category-button {
      @include radius(0);
      &:not(:active) { transition-duration: $transition_d_short; } // use list-transition
      &:checked {
        &, &:hover {
          background-image: none;
          background-color: $color_bg_trk;
          color: $color_lbl_sel;
        }
        &:disabled {
          color: track($color_fg_sel, $alpha_foreground_bdp);

          label { color: inherit; }
        }

        &:dir(ltr) { @include radius(0 $r $r 0); }
        &:dir(rtl) { @include radius($r 0 0 $r); }
      }

      > box > label { // tweak vertical spacing and font weight
        padding: 0 rem($menuitem_padding, $sw: 1.0);
        font-weight: 500;
      }
    }
  }
}

// user-indicator styling
.user-menu {
  frame.container {
    separator { min-height: 0; } // hide separator
  }

  list,
  row { // reset styling
    border: none;
    background: none;
    box-shadow: none;
  }

  row {
    &, .indicator-item { // stop weird and unhandled ripple-effect
      &:active,
      &:selected {
        background-image: none;
        animation: none;
      }
    }

    &.activatable {
      background-image: none;
      background-color: $color_bg_dark;
      color: $color_fg_2;
      transition-duration: $transition_d_none;

      .indicator-item {
        label,
        image { color: $color_fg_2; }
      }

      // FIXME: enlarge vertical spacing with padding of icons
      image { padding: rem($menuitem_padding) 0; }

      &:hover,
      &:selected {
        background-image: none;
        background-color: $color_bg_dark;
        color: $color_fg_2;
        transition-duration: $transition_d_none;

        .indicator-item {
          label,
          image { color: $color_fg_2; }

          &:hover,
          &:active,
          &:checked {
            label,
            image { color: $color_fg; }
          }
        }
      }
    }
  }

  // top-row (user-name and avatar)
  > frame.container > box.vertical row.activatable:first-child {
    margin-bottom: $popover_padding;
    outline-width: 0;

    button.indicator-item {
      border: 1px solid transparent;
      @include button(normal);
      font-weight: 500;
      transition-timing-function: $transition_t_standard;
      transition-property: background-color;
      transition-duration: $transition_d_standard;

      label,
      image:first-child {
        &:dir(ltr) { margin-left: -$icon_size / 4; } // align childs
        &:dir(rtl) { margin-right: -$icon_size / 4; }
      }

      image {
        color: $color_fg_2;
        &:first-child { // avatar image
          min-width: $icon_size * 1.5;
          opacity: $alpha_foreground_2nd;
        }
      }

      &:hover {
        @include button(hover);

        image:first-child { opacity: 1.0; }
      }
    }
  }
}

// raven styling
$raven_box_spacing: 4px;
$switcher_width: (250px + $raven_box_spacing * 2) / 2;
$switcher_height: $widget_size - if($ref_weight < 1.0, 10.7px, 5.3px);

%raven_switcher_radio_button {
  min-height: rem($switcher_height, $sw: 1.0);
  outline-style: none; // unset outlines
}

.raven-frame { // hide frame
  > border { border: none 0 transparent; }
}

.raven {
  padding: 0;
  border: none;
  color: $color_fg_2;
  background-color: $color_bg;

  .raven-header {
    color: $color_fg_3;
    font-weight: 500;

    &.top {
      background-color: transparent;

      stackswitcher.linked {
        margin: -$raven_box_spacing 0 0;

        button.text-button.radio { // switcher buttons
          @extend %raven_switcher_radio_button;
          min-width: $switcher_width;
        }
      }
    }
  }

  scrolledwindow > .frame { // stacking raised-grid
    // FIXME: Do not set any L/R margins and borders
    padding: 0 $raven_box_spacing;

    > box.vertical > box.vertical {
      margin: $raven_box_spacing 0; // do not set L/R margins
      border-radius: $r_2;
      background-color: $color_base;
      // draw side edges via opaque box-shadows
      box-shadow: inset 1px 0 $color_fg_div_sld,
                  inset -1px 0 $color_fg_div_sld,
                  $z-depth-1;
    }

    .raven-header {
      margin-top: -$raven_box_spacing * 2; // unset parent margin
      border-radius: $r_2 $r_2 0 0;
    }

    .raven-background {
      margin-bottom: -$raven_box_spacing * 2; // unset parent margin
      border-radius: 0 0 $r_2 $r_2;
    }

    // audio app/device switcher
    box.audio-widget {
      // placehoder label
      widget.raven-background stack > box > revealer > box.vertical > label {
        @extend %dim_label;
        font-size: 90%;
      }

      list { // apps/devices list
        &.apps-list,
        &.sound-devices {
          margin: 0 1px; // stop touching the parent L/R edges
        }

        &.sound-devices row.activatable { // devices list rows
          &:selected {
            background-color: track($color_bg_sel, $alpha_track_2);
            &:dir(ltr) { box-shadow: inset 4px 0 $color_bg_sel; }
            &:dir(rtl) { box-shadow: inset -4px 0 $color_bg_sel; }

            &, label { color: $color_fg; }
          }

          > box > label {
            &:dir(ltr) { margin-left: 4px; }
            &:dir(rtl) { margin-right: 4px; }
          }
        }
      }

      stackswitcher.linked {
        padding: 0 $raven_box_spacing; // limit child spacing

        > button.text-button.radio {
          @extend %raven_switcher_radio_button;
          min-width: rem($switcher_height, $sw: 1.0);
          margin-bottom: if($ref_weight < 1.0, 3px, 4px);
          border: 1px solid transparent;
          @include button(normal);
          box-shadow: none;
          &:hover { @include button(hover); }
          &:active { @include button(active); }
          &:checked {
            @include button(checked);
            &:hover { @include button(checked-hover); }
          }
          &:disabled { @include button(flat-disabled); }

          &:dir(ltr),
          &:dir(rtl) { @include radius($r, none); }

          &:first-child {
            &:dir(ltr) { margin-right: if($ref_weight < 1.0, 3px, 4px); }
            &:dir(rtl) { margin-left: if($ref_weight < 1.0, 3px, 4px); }
          }
          &:last-child {
            &:dir(ltr) { margin-left: if($ref_weight < 1.0, 3px, 4px); }
            &:dir(rtl) { margin-right: if($ref_weight < 1.0, 3px, 4px); }
          }
        }
      }
    }
  }

  .powerstrip {
    background-color: $color_bg_dark;
    box-shadow: none;

    button.flat.image-button {
      min-width: rem($switcher_width, $sw: 1.0) * 2  / 3;
      min-height: rem($switcher_height + 1px, $sw: 1.0);
      margin: -($raven_box_spacing + 1px); // vertically gapless placement
      padding: 0;
    }
  }

  button.flat.expander-button { // expander arrow buttons
    min-width: rem($widget_size);
    min-height: rem($widget_size);
    padding: 0;
    @include radius($r);
    color: $color_fg_3;
    &:hover,
    &:active { color: $color_fg; }

    &:dir(ltr) { margin-right: rem($baseline * 2); }
    &:dir(rtl) { margin-left: rem($baseline * 2); }
  }

  button.flat.image-button.primary-control { // 'close' button in MPRIS
    color: $color_fg_3;
    &:hover { @include button(flat-hover, $tc: $color_bg_dest); }
    &:active {
      @include button(flat-active, $tc: $color_bg_dest);
      @include ink-reaction(active-dec, $fc: $color_bg_dest, $tr: ink-active-dec);
    }
  }

  calendar {
    border: none;
    background-color: transparent;
  }

  // notification list
  box.vertical > stack > box.vertical {
    > .raven-header {
      margin-top: -$raven_box_spacing; // reduce top margin
      border-bottom: 1px solid $color_fg_div;
    }

    > .raven-background > viewport.frame {
      padding: 0; // reset padding for full-width list node

      list { background-color: transparent; }

      > list > row.activatable {
        padding-bottom: 4px;
        border-bottom: 1px solid $color_fg_div;
        background-color: transparent;
        &:selected {
          background-color: track($color_bg_sel, $alpha_track_2);
          &:dir(ltr) { box-shadow: inset 4px 0 $color_bg_sel; }
          &:dir(rtl) { box-shadow: inset -4px 0 $color_bg_sel; }

          > grid > *, // legacy
          > box.vertical * {
            color: $color_fg;
            opacity: 1.0;
          }
        }

        > box.vertical > box.horizontal > button.image-button { // 'dismiss'
          // left-most image size = 32px?
          min-width: if($ref_weight < 1.0, $icon_size * 1.5, $icon_size * 2);
          min-height: if($ref_weight < 1.0, $icon_size * 1.5, $icon_size * 2);
          margin: if($ref_weight < 1.0, $icon_size * 0.5 0, 0);
        }

        // sub-list rows grouping
        list {
          @include radius($r_2, none);
          border: 1px solid $color_fg_div;

          > row.activatable {
            border-bottom: 1px solid $color_fg_div;
            &:last-child { border-bottom: none; }
            &:dir(ltr) { padding: 2px rem($baseline * 2) 2px 8px; }
            &:dir(rtl) { padding: 2px 8px 2px rem($baseline * 2); }

            &:selected {
              background-color: track($color_bg_sel, $alpha_track_2);
            }

            // title labels
            box.horizontal > label:first-child { font-weight: 700; }
          }
        }
      }
    }
  }

  box.mpris-widget { // MPRIS root box container
    // dim placeholder asset
    &.no-album-art widget > image { opacity: $alpha_foreground_3rd; }
  }

  .raven-mpris { // MPRIS overlaid widget
    margin-bottom: $raven_box_spacing * 2; // bottom-most 8px is dead
    background-color: track($color_base, (1 - $alpha_track_1));
    color: $color_fg;
    box-shadow: inset 1px 0 $color_fg_div_sld,
                inset -1px 0 $color_fg_div_sld,
                inset 0 -1px $color_fg_div_sld;

    button.image-button {
      margin: 0 rem(5.3px) if($ref_weight < 1.0, $raven_box_spacing * 1.5,
                                                 $raven_box_spacing * 2);
      @extend %action-area-button;
    }

    > box.vertical > box.horizontal > image { // header icons
      padding: rem(5.3px / 2) 0;
      color: $color_fg_3; // tone down
      &:dir(ltr) { margin: 0 (4px + 1px) 0 -4px; }
      &:dir(rtl) { margin: 0 -4px 0 (4px + 1px); }
    }
  }
}

// some specific scale styling
box.audio-widget,
window.sound-popover.background {
  scale.horizontal.marks-after { // overdrive-mode scale
    padding-top: 0; // unset default padding
    padding-bottom: 0;

    trough { // overdrive-mode trough styling
      background-color: transparent; // unset default trough color
      @each $_dir, $_opp_end in (ltr, right),
                                (rtl, left) {
        &:dir(#{$_dir}) {
          background-image:
            linear-gradient(to $_opp_end,
                            $color_fg_trk_out calc(66% - 1px),
                            track($color_bg_dest, $alpha_track_out) calc(66% - 1px),
                            track($color_bg_dest, $alpha_track_out) 100%);
        }
      }
    }

    mark {
      // hide label for vertically centered troughs
      label { font-size: 0; }
    }
  }
}

// clock-applet styling
widget.budgie-clock-applet > widget > box > label {
  font-size: 100%;
  &:first-child {
    &:dir(ltr) { margin-left: 3px - 1px; }
    &:dir(rtl) { margin-right: 3px - 1px; }
  }
  &:last-child {
    &:dir(ltr) { margin-right: 3px + 2px; }
    &:dir(rtl) { margin-left: 3px + 2px; }
  }

  .top &,
  .bottom & {
    &:only-child {
      &:dir(ltr) {
        margin-left: 3px - 1px;
        margin-right: 3px - 2px;
      }
      &:dir(rtl) {
        margin-left: 3px - 2px;
        margin-right: 3px - 1px;
      }
    }
  }

  .left &,
  .right & {
    font-size: 80%;
    &:first-child {
      margin-top: 3px + 2px;
      margin-bottom: 0;
    }
    &:last-child {
      margin-top: 0;
      margin-bottom: 3px + 1px;
      // specificity bump
      &:only-child { margin-top: 3px + 2px; }
    }
  }
}

// popover of sound-indicator styling
window.sound-popover.background box.horizontal {
  > button.flat.image-button { // horizontal layout
    &:first-child { // '-' button
      @include button(flat-normal, $tc: $color_fg);
      @include ink-reaction(normal, $fc: $color_err, $tr: ink-normal-dec);
      &:hover { @include button(flat-hover, $tc: $color_err); }
      &:active {
        @include button(flat-active, $tc: $color_err);
        @include ink-reaction(active-dec, $fc: $color_err, $tr: ink-active-dec);
      }
    }

    &:last-child { // '+' button
      @include button(flat-normal, $tc: $color_fg);
      @include ink-reaction(normal, $fc: $color_bg_sccs, $tr: ink-normal-dec);
      &:hover { @include button(flat-hover, $tc: $color_bg_sccs); }
      &:active {
        @include button(flat-active, $tc: $color_bg_sccs);
        @include ink-reaction(active-dec, $fc: $color_bg_sccs, $tr: ink-active-dec);
      }
    }
  }
}

// night-light-indicator styling
.night-light-indicator {
  .view-header {
    label {
      @extend %dim_label;
      font-size: 15px;
      font-weight: 400;
      &:dir(ltr) { padding-left: 4px; }
      &:dir(ltr) { padding-right: 4px; }
    }
  }

  box.vertical > button.flat.display-settings-button { font-weight: 500; }
}

// places-indicator styling
.places-menu {
  box.places-section-header {
    padding: 0;

    > button.flat:not(.image-button) { // an actual child
      padding: $toolbar_padding;
      @include radius(0);

      box.horizontal {
        > label { font-weight: 500; }

        > image {
          &:first-child {
            color: $color_bg_acc;
            &:dir(ltr) { margin-left: 4px; }
            &:dir(rtl) { margin-right: 4px; }
          }
          &:not(:first-child) { // 'arrow'
            // same margins with 'eject' button
            &:dir(ltr) { margin-right: $toolbar_padding; }
            &:dir(rtl) { margin-left: $toolbar_padding; }
          }
        }
      }
    }

    button.image-button { margin: rem($baseline * 2) rem(5.3px) rem(4px); }
  }

  .alternative-label { // 'always expanded' option
    font-size: 15px; // same size with 'Local volumes' label?
    font-weight: 400;
    &:dir(ltr) { padding: 0 0 3px 3px; }
    &:dir(rtl) { padding: 0 3px 3px 0; }
  }

  box.vertical > revealer {
    > list { // drop-down list
      border: 1px solid $color_fg_div;
      background-color: $color_bg_dark;

      &.always-expand { // 'always expanded' option
        // unset revealer elevations
        border: none;
        background-color: transparent;
      }
    }
  }

  list {
    background-color: transparent;

    > row.activatable {
      transition: none;
      &:hover,
      &:active {
        color: $color_fg;
        background: none;
      }
    }

    label.dim-label {
      font-size: 90%;
      font-weight: 700;
    }
  }

  box.unlock-area {
    border-width: 1px 0 1px;
    border-style: solid none solid;
    border-color: $color_fg_div;
    background-color: $color_bg;
  }
}

// keyboard indicator applet
.top,
.bottom {
  widget.keyboard-indicator >  widget > box.horizontal {
    > widget > image {
      margin-top: rem(-0.7px, $sw: 1.0);
      &:dir(ltr) { padding: $baseline 0 0 3px; }
      &:dir(rtl) { padding: $baseline 3px 0 0; }
    }

    > stack > widget.keyboard-label > label {
      margin-top: rem(-0.7px, $sw: 1.0);
      &:dir(ltr) { padding: $baseline 3px rem($baseline, $sw: 1.0) 0; }
      &:dir(rtl) { padding: $baseline 0 rem($baseline, $sw: 1.0) 3px; }
    }
  }
}

// separator applet
.budgie-panel > box > widget > separator {
  background-color: $color_fg_panel_inv;
}

// workspace-switcher applet
widget > box.workspace-switcher {
  // main container
  > box.workspace-layout {
    widget.workspace-item {
      @if $variant == mixed {
        background-image: image(track($color_fg_inv, $alpha_foreground_bdp));
      }
      @else {
        background-image: image(track($color_fg, $alpha_foreground_bdp));
      }
      background-repeat: no-repeat;
      transition-duration: $transition_d_none; // for underline-indicators

      &.current-workspace { background-image: image($color_bg_sel); }

      @each $position, $_size in (top, calc(100% - 4px) 3px),
                                 (bottom, calc(100% - 4px) 3px),
                                 (left, 3px calc(100% - 4px)),
                                 (right, 3px calc(100% - 4px)) {
        .#{$position} & {
          background-position: #{$position} center;
          background-size: #{$_size};
        }
      }

      button.workspace-icon-button {
        min-width: $icon_size;
        min-height: $icon_size;
        padding: 4px;
        @include radius($r_2, none);

        > image { opacity: $alpha_foreground_3rd; }

        &:hover,
        &:active {
          @if $maj_ver == 3 { -gtk-icon-effect: highlight; }
          @else { -gtk-icon-filter: brightness(1.2); }

          > image { opacity: $alpha_foreground_2nd; }
        }
      }

      // counter
      label.workspace-more-label {
        font-weight: 700;
        opacity: $alpha_foreground_3rd;
      }

      &.current-workspace {
        button.workspace-icon-button {
          > image { opacity: 1.0; }

          &:hover,
          &:active {
            @if $maj_ver == 3 { -gtk-icon-effect: highlight; }
            @else { -gtk-icon-filter: brightness(1.2); }
          }
        }

        label.workspace-more-label { opacity: 1.0; }
      }
    }
  }

  // 'plus' button
  button.image-button.workspace-add-button { // expanded?
    min-width: $icon_size;
    min-height: $icon_size;
    padding: 4px;
    @include radius(0);
    @if $variant == mixed { @extend %inv-action-area-button; }
    @else { @extend %action-area-button; }
  }
}

window.budgie-popover.workspace-popover {
  $max_children_per_line: 4;
  $requested_width: 150px;

  box.workspace-popover-button-box {
    > button.flat { // 'Rename' and 'Remove'
      min-width: $requested_width;
      font-weight: 500;
    }

    // hide unneeded separators
    > separator.horizontal {
      min-height: 0;
      margin: 0;
      background-color: transparent;
    }
  }

  flowboxchild { // apps icon grid
    button.flat:not(:active) {
      transition-property: opacity,
                           border-color,
                           border-image,
                           background-color,
                           background-image,
                           box-shadow,
                           icon-shadow;
      transition-timing-function: $transition_t_dec;
      transition-duration: $transition_d_standard;
    }

    image {
      padding: ($requested_width - $icon_size * ($max_children_per_line + 1))
               / ($max_children_per_line * 2)
               0;
    }
  }
}

// show-desktop applet
.budgie-panel {
  // specificity bump to prevent conflicts
  > box > widget > button.flat:not(.raven-trigger):not(.budgie-menu-launcher) {
    @extend %budgie_trigger_button;
    @if $variant == mixed {
      @include ink-reaction(normal, $fc: $color_bg_sel, $tr: ink-normal-dec);
      &:active {
        @include button(flat-active, $tc: $color_fg_inv);
        @include ink-reaction(active-dec, $fc: $color_fg_inv, $tr: ink-active-dec);
      }
    }
    &:checked {
      @if $variant == mixed {
        @include button(flat-checked, $tc: $color_lbl_sel_inv);
      }
      @else {
        @include button(flat-checked, $tc: $color_lbl_sel);
      }
    }

    .top &,
    .bottom & { padding: 0 4px; }

    .left &,
    .right & { padding: 2px 0; }
  }
}

// notifications
%budgie_notification_window_base,
.budgie-notification-window,
.budgie-osd-window {
  border-radius: $r_8;
  background-color: transparent;

  .drop-shadow { border-radius: $r_8; }
}

%budgie_notification_window_styling,
.budgie-notification-window .drop-shadow {
  // draw actual backgrounds
  @if $variant == mixed { background-color: track($color_bg_tooltip_inv, $alpha_osd); }
  @else { background-color: track($color_bg_tooltip, $alpha_osd); }
}

.budgie-osd-window .drop-shadow {
  @if $variant == mixed { background-color: track($color_bg_dark_inv, $alpha_osd); }
  @else { background-color: track($color_bg_dark, $alpha_osd); }
  margin: $shadow_margin_3;
}

%budgie_notification,
.budgie-notification,
.budgie-osd {
  background-color: transparent;
  @if $variant == mixed { color: $color_fg_inv; }
  @else { color: $color_fg; }
  
  .notification-title {
    @if $variant == mixed { color: $color_fg_inv_2; }
    @else { color: $color_fg_2; }
    font-size: 110%;
    font-weight: 500;
  }

  .notification-body {
    @if $variant == mixed { color: $color_fg_inv; }
    @else { color: $color_fg; }
    font-size: 90%;
    font-weight: 400;
  }

  .budgie-osd-text {
    @if $variant == mixed { color: $color_fg_inv; }
    @else { color: $color_fg; }
    font-size: 110%;
  }

  progressbar { // mimic level-bar
    min-height: 4px;
    padding: 2px;

    trough {
      background-color: $color_fg_trk_out;
      @if $variant == mixed { color: $color_fg_inv; }
      @else { color: $color_fg; }
    }

    progress { background-color: $color_bg_sccs; }
  }
}

.budgie-notification,
.budgie-osd,
.budgie-session-dialog,
.budgie-polkit-dialog,
.drop-shadow {
  button { // OSD-style buttons
    @if $variant == mixed { @extend %inv-action-area-button; }
    @else { @extend %action-area-button; }

    &.suggested-action,
    &.destructive-action {
      // hide unneeded shadows
      &:not(:disabled) { box-shadow: none; }
    }
  }
}

// alt-tab apps switcher styling
$child_margin: 2px;

window.budgie-switcher-window {
  border-radius: $r_8;
  background-color: transparent;

  // draw actual backgrounds and shadows
  .drop-shadow {
    margin: $shadow_margin_4; // reserve area for shadows
    padding: $budgie_osd_margin $budgie_osd_margin ($budgie_osd_margin / 4);
    border-radius: $r_8;
    @if $variant == mixed { background-color: track($color_bg_dark_inv, $alpha_osd); }
    @else { background-color: track($color_bg_dark, $alpha_osd); }
    box-shadow: $z-depth-4; // raise to level-4

    label.budgie-switcher-title { // bottom label for app titles
      // prepare for tall and dense fonts
      min-height: 13.3px * 2; // use non-scaling unit
      color: if($variant == mixed, $color_fg_inv, $color_fg);
      font-weight: 500;
    }
  }

  flowboxchild { // icon-tiles
    margin: $child_margin;
    @include radius($r_2);
    color: if($variant == mixed, $color_fg_acc_inv_2, $color_fg_acc_2);
    background-color: transparent;
    &:hover,
    &:active {
      background-color: track($color_bg_acc, $alpha_track_1);
      color: if($variant == mixed, $color_fg_acc_inv, $color_fg_acc);
    }
    &:selected { // use the same values with Gnome-Shell
      background-color: track($color_bg_acc, $alpha_track_2);
      color: if($variant == mixed, $color_fg_acc_inv, $color_fg_acc);
      @if $maj_ver == 3 { -gtk-icon-effect: highlight; }
      @else { -gtk-icon-filter: brightness(1.2); }
      &:disabled {
        @if $variant == mixed {
          background-color: track($color_fg_inv, $alpha_track_1);
        }
        @else {
          background-color: track($color_fg, $alpha_track_1);
        }
        @if $maj_ver == 3 { -gtk-icon-effect: dim; }
        @else { -gtk-icon-filter: opacity(0.5); }

        &, label { color: if($variant == mixed, $color_fg_dis_inv, $color_fg_dis); }
      }
    }
  }
}

// run-dialog styling
.background.csd.budgie-run-dialog {
  border: none;
  @if $variant == mixed {
    background-color: track($color_bg_dark_inv, $alpha_osd);
  }
  @else {
    background-color: track($color_bg_dark, $alpha_osd);
  }

  // specific 8px rounded corners need decoration
  // radii as well.
  &,
  decoration { @include radius($r_8, none); }

  scrolledwindow {
    margin: 0 $budgie_osd_margin $budgie_osd_margin;
    border: 1px solid if($variant == light, $color_fg_div,
                                            track(white, $alpha_div_2));
    background-color: transparent;

    list {
      background-color: transparent;

      row.activatable {
        background-color: transparent;
        color: if($variant == mixed, $color_fg_inv_2, $color_fg_2);

        .dim-label {
          color: if($variant == mixed, $color_fg_inv_2, $color_fg_2);
          opacity: 1.0;
        }

        &:hover,
        &:active {
          background-color: $color_bg_trk;
          color: if($variant == mixed, $color_fg_inv, $color_fg);

          .dim-label {
            color: if($variant == mixed, $color_fg_inv, $color_fg);
            opacity: 1.0;
          }
        }
      }
    }
  }

  entry.search {
    min-width: $icon_size * 25;
    min-height: rem($widget_size * 1.2);
    margin: $budgie_osd_margin;
    @include radius($r_4 $r_4 0 0, none);
    @if $variant == mixed {
      @include entry(flat-normal, $tc: $color_fg_inv);
      caret-color: $color_fg_inv;
      &:focus { @include entry(flat-focus, $tc: $color_fg_inv); }
      &:disabled { @include entry(flat-disabled, $tc: $color_fg_inv); }

      selection { @extend %selected_items; }
    }
    @else {
      @include entry(flat-normal, $tc: $color_fg);
      caret-color: $color_fg;
      &:focus { @include entry(flat-focus, $tc: $color_fg); }
      &:disabled { @include entry(flat-disabled, $tc: $color_fg); }
    }
    font-size: 110%;

    image {
      @if $variant == mixed {
        &:not(:hover):not(:active) { color: $color_fg_inv_2; }
        &:active { color: $color_bg_inv; }
        &:disabled { color: $color_fg_dis_inv; }
      }
      @else {
        &:not(:hover):not(:active) { color: $color_fg_2; }
        &:active { color: $color_fg; }
        &:disabled { color: $color_fg_dis; }
      }
    }
  }

  scrollbar {
    border: none;
    background: none;

    slider {
      @if $variant == mixed {
        background-color: track($color_fg_inv_3, $alpha_foreground_3rd);
        &:hover {
          background-color: track($color_fg_inv_2, $alpha_foreground_3rd);
        }
        &:active { background-color: $color_fg_inv; }
      }
      &:disabled { opacity: $alpha_foreground_bdp; }
    }
  }
}

// session-dialog and polkit-dialog styling
.budgie-session-dialog,
.budgie-polkit-dialog {
  border-radius: $r_8;
  border-width: 0;
  @if $variant == mixed {
    background-color: track($color_bg_dark_inv, $alpha_osd);
    color: $color_fg_inv;
  }
  @else {
    background-color: track($color_bg_dark, $alpha_osd);
    color: $color_fg;
  }
  font-weight: 700;

  decoration { // composite with drop-shadows
    border-radius: $r_8;
    box-shadow: $z-depth-4;
    &:backdrop {
      box-shadow: $z-depth-2-backdrop;
      transition: none;
    }
  }

  buttonbox.linked > button:not(.flat) {
    border: 2px solid transparent;
    @include radius(0);
    &:first-child {
      @include radius(0 0 0 $r_8);
      border-right-width: 0;
    }
    &:last-child {
      @include radius(0 0 $r_8 0);
      border-left-width: 0;
    }
  }
}

// polkit-dialog specific styling
.budgie-polkit-dialog {
  entry {
    @include radius($r_4 $r_4 0 0, none);
    @if $variant == mixed {
      @include entry(flat-normal, $tc: $color_fg_inv);
      caret-color: $color_fg_inv;
      &:focus {
        @include entry(flat-focus, $tc: $color_fg_inv);
      }
      &:disabled {
        @include entry(flat-disabled, $tc: $color_fg_inv);
      }

      selection { @extend %selected_items; }
    }
    @else {
      @include entry(flat-normal, $tc: $color_fg);
      caret-color: $color_fg;
      &:focus {
        @include entry(flat-focus, $tc: $color_fg);
      }
      &:disabled {
        @include entry(flat-disabled, $tc: $color_fg);
      }
    }
  }

  .message {
    color: if($variant == mixed, $color_fg_inv_2, $color_fg_2);
  }

  .failure {
    color: $color_err;
    font-weight: 700;
  }
}

// raven-controller applet
button.flat.raven-trigger {
  @extend %budgie_trigger_button;

  image { margin: 0 3px; } // add internal spacing

  .left &,
  .right & {
    image { margin: 3px 0; } // add internal spacing
  }
}

// misc settings
.drop-shadow {
  margin: $shadow_margin_4;
  background-color: transparent;
  background-image: none;
  box-shadow: $z-depth-4;
}

// settings-window
window.background.budgie-settings-window.csd {
  > box.horizontal > scrolledwindow > viewport.frame { // left-pane
    &:dir(ltr) { border-right: 1px solid $color_fg_div; }
    &:dir(rtl) { border-left: 1px solid $color_fg_div; }
  }

  box.settings-page.vertical { // right-pane
    // reserve the margin for raised widget's drop-shadows
    box.settings-frame.vertical > grid.horizontal { margin-bottom: 8px; }

    // hide double-borders
    buttonbox.inline-toolbar { border-style: none none solid; }

    frame > box.vertical > overlay { // inline header
      > label.dim-label { // title
        font-size: 110%;
        font-weight: 500;
      }

      > button.popup.suggested-action.toggle { // 'plus' button
        @extend %gnome-software_round_button;
        margin: 8px; // prevent truncated drop-shadow
      }
    }

    frame > box.vertical > list > row {
      &:dir(ltr) { padding-right: 12px; }
      &:dir(rtl) { padding-left: 12px; }

      button.desutructive-action.round-button {
        @extend %gnome-software_round_button;
      }
    }
  }
}

// pixel-saver-applet
%pixel_saver_button {
  min-width: $icon_size;
  min-height: $icon_size;
  padding: 0;
  border: none;
  background: none;
  color: if($variant == mixed, $color_fg_inv, $color_fg);
  @include transition(reset);

  image {
    border-radius: $r;
    background-size: $icon_size $icon_size;
    background-position: center center;
    background-repeat: no-repeat;
  }

  &:hover,
  &:active {
    background: none;
    color: if($variant != light, $color_fg_sel, black);
    @include transition(reset);

    image { -gtk-icon-shadow: none; }
  }

  // hide unneeded button images when Raven widget was shown
  &:disabled image { opacity: 0; }
}

%pixel_saver_button_ink_reaction {
  &:hover image {
    @if $variant != light {
      background-image: image(track($color_fg_sel, $alpha_track_1));
    }
    @else {
      background-image: image(track(black, $alpha_track_1));
    }
  }

  &:active image {
    @if $variant != light {
      background-image: image(track($color_fg_sel, $alpha_track_2));
    }
    @else {
      background-image: image(track(black, $alpha_track_2));
    }
  }
}

%pixel_saver_label_spacing {
  > widget > label {
    &:dir(ltr) { padding-right: 3px; }
    &:dir(rtl) { padding-left: 3px; }
  }
}

.budgie-panel > box > widget > box {
  // FIXME: Ubuntu-budgie has a downstream patch breaking our theming,
  // there's no specific style-classes.
  > button.flat.image-button {
    @extend %pixel_saver_button;
    @extend %pixel_saver_button_ink_reaction;
  }

  &.horizontal {
    @extend %pixel_saver_label_spacing;

    > button.flat.image-button { padding: 0 3px; }
  }
}

.budgie-panel box.titlebar { // Github original applet
  border-radius: 0;
  background: unset;

  > widget > label { // titles
    color: if($variant == mixed, $color_fg_inv, $color_fg);
  }

  > button.image-button.titlebutton {
    @extend %pixel_saver_button;

    &.close {
      &:hover image {
        background-image: image($color_bg_dest);
        color: $color_fg_sel;
      }

      &:active image {
        background-image: image($color_bg_sel);
        color: $color_fg_sel;
      }
    }

    &:not(.close) { @extend %pixel_saver_button_ink_reaction; }
  }

  &.horizontal { // spacing
    @extend %pixel_saver_label_spacing;
    padding: 0 3px;

    > button.image-button.titlebutton { padding: 0 3px; }
  }
}

menuitem.budgie-menubar { // appindicator-applet?
  // app's override seems to set its L/R padding only,
  // so this is NOT the theme-specific issue for me!
  padding: unset; // unset T/B padding as well
  @include radius(0, none); // clear roundness
  &:backdrop { opacity: 1.0; } // unset fade-effect
}

// /*******************
//  * Lightdm-Greeter *
//  *******************/

%greeter_panel_window {
  background-image: image($color_bg_panel);
  background-color: transparent;
  color: if($variant == mixed, $color_fg_inv, $color_fg);
  box-shadow: none;
  font-weight: 700;
  text-shadow: none;

  &.background { background-color: transparent; }

  > * > * { background-color: transparent; } // FIXME: ugly wildcard

  // avoid translucent top-bar
  &.osd { opacity: 1.0; } // >= 2.0.5
}

%greeter_panel_menubar {
  border: none;
  background-color: transparent;
  color: if($variant == mixed, $color_fg_inv, $color_fg);

  &:hover {
    color: if($variant != light, $color_fg_sel, black);
    box-shadow: inset 0 2px $color_bg_sel;

    label,
    image { color: if($variant != light, $color_fg_sel, black); }
  }
}

%greeter_panel_menubar_menuitem {
  // flip underline-indicator vertically
  padding: rem(5.3px, $sw: 1.0) 0;
  @include radius(0, none);
  background-color: transparent;
  &:hover { box-shadow: inset 0 2px $color_bg_sel; }
}

%greeter_panel_menu_menuitem {
  padding: $toolbar_padding rem($entry_lr_space);
  color: $color_fg_2;
  font-weight: 400;
  text-shadow: none;

  label { color: $color_fg_2; }

  &:hover {
    color: $color_fg;

    label { color: $color_fg; }
  }
  &:disabled {
    color: $color_fg_dis;

    label { color: $color_fg_dis; }
  }
}

%greeter_entry {
  min-height: rem($widget_size);
  @include radius($r_4 $r_4 0 0, none);
  font-family: monospace;
  @if $variant == mixed {
    @include entry(flat-normal, $tc: $color_fg_inv);
    caret-color: $color_fg_inv;
    &:focus { @include entry(flat-focus, $tc: $color_fg_inv); }
    &:disabled { @include entry(flat-disabled, $tc: $color_fg_inv); }

    selection { @extend %selected_items; }
  }
  @else {
    @include entry(flat-normal, $tc: $color_fg);
    caret-color: $color_fg;
    &:focus { @include entry(flat-focus, $tc: $color_fg); }
    &:disabled { @include entry(flat-disabled, $tc: $color_fg); }
  }
}

%non_csd_menu {
  margin: unset;
  padding: 1px;
  border-radius: 0;
  border: 1px solid $color_fg_div_sld;
  background-clip: border-box;
}

// gtk-greeter
.lightdm-gtk-greeter {
  // top-panel styling
  #panel_window {
    @extend %greeter_panel_window;

    menubar {
      @extend %greeter_panel_menubar;

      label,
      image {
        padding: 0 rem($menuitem_padding, $sw: 1.0);
        color: if($variant == mixed, $color_fg_inv, $color_fg);
      }

      @if $maj_ver == 3 {
        > menuitem { @extend %greeter_panel_menubar_menuitem; }
      }
      @else {
        > box > menuitem { @extend %greeter_panel_menubar_menuitem; }
      }

      menu menuitem { @extend %greeter_panel_menu_menuitem; }
    }
  }

  // main container
  #login_window,
  #restart_dialog,
  #shutdown_dialog {
    padding: 0;
    border: 0 none transparent;
    background-color: transparent;
    box-shadow: none;

    > box { // set actual raised dialog styling
      margin: $shadow_margin_4;
      border-radius: $r_8;
      box-shadow: $z-depth-4;
      @if $variant == mixed {
        background-color: track($color_bg_dark_inv, $alpha_osd);
        color: $color_fg_inv;
      }
      @else {
        background-color: track($color_bg_dark, $alpha_osd);
        color: $color_fg;
      }
    }

    button:not(.combo) {
      min-height: rem($widget_size * 1.2);
      min-width: rem($widget_size * 1.2);
      padding: 0 rem($txt_button_lr_space * 1.2);
      @if $variant == mixed { @extend %inv_flat_button; }
      @else { @extend %flat_button; }
    }
  }

  @each $node_id_1, $node_id_2, $_color in
  ('#login_window', '#login_button', $color_bg_sgst),
  ('#restart_dialog', '#restart_button', $color_bg_dest),
  ('#shutdown_dialog', '#shutdown_button', $color_bg_dest) {
    #{$node_id_1} button#{$node_id_2} {
      @include button(raised-normal, $c: $_color, $tc: $color_fg_sel_2);
      @include ink-reaction(normal, $fc: $color_fg_sel, $tr: ink-normal-dec);
      &:hover { @include button(raised-hover, $c: $_color, $tc: $color_fg_sel); }
      &:active {
        @include button(raised-active, $c: $color_bg_sel, $tc: $color_fg_sel);
        @include ink-reaction(active-dec, $fc: $color_fg_sel, $tr: ink-active-dec);
      }
      &:checked { @include button(raised-checked); }
      &:disabled {
        @if $variant == mixed {
          @include button(raised-disabled, $tc: $color_fg_inv);
        }
        @else { @include button(raised-disabled, $tc: $color_fg); }
      }
    }
  }

  #login_window {
    button.combo {
      @if $variant == mixed { @extend %inv_combobox; }

      cellview { padding-bottom: 0; }
    }

    entry { @extend %greeter_entry; }

    infobar { // notification revealer
      border: none;
      font-weight: 700;
      font-size: 110%;
      transition: none; // transition causes visual glitches

      &.error,
      &.info { // .info class for XFce4-screensaver
        @if $maj_ver == 3 {
          @if $mnr_ver < 23 { background-color: transparent; }
          @else {
            > revealer > box { background-color: transparent; }
          }
        }
        @else {
          > revealer > box { background-color: transparent; }
        }
      }

      &.error {
        margin: 0 4px; // prevent unwanted overflow
        color: $color_err;
      }

      &.info { color: $color_info; }
    }
  }

  #content_frame { padding-bottom: 14px; }

  #buttonbox_frame {
    padding-top: 8px; // reserve gap between infobar and buttonbox
  }

  // non-CSD context menus
  window.background.popup > menu { @extend %non_csd_menu; }
}

// slick-greeter
$greeter_panel_height: 32px; // pixmap height
$greeter_panel_shadow: 11px; // pixmap shadow region

%greeter_panel_menubar_menuitem_misc {
  padding: 0 rem($entry_lr_space);
  color: if($variant != dark, $color_fg_inv, $color_fg);

  label { color: if($variant != dark, $color_fg_inv, $color_fg); }

  image { color: if($variant != dark, $color_fg_inv, $color_fg); }

  &:hover { box-shadow: inset 0 2px $color_bg_sel; }

  label { margin: 0 2px rem($baseline, $sw: 1.0); }
}

window.background.lightdm {
  // top-panel
  menubar {  // broken
    @extend %greeter_panel_menubar;
    padding-top: ($greeter_panel_height - $greeter_panel_shadow - $icon_size)
                 / 2;
    font-weight: 700;
    text-shadow: none;

    @if $maj_ver == 3 {
      > menuitem {
        @extend %greeter_panel_menubar_menuitem;
        @extend %greeter_panel_menubar_menuitem_misc;
      }
    }
    @else {
      > box > menuitem {
        @extend %greeter_panel_menubar_menuitem;
        @extend %greeter_panel_menubar_menuitem_misc;
      }
    }
  }

  window.background.popup > menu {
    @extend %non_csd_menu;

    menuitem  { @extend %greeter_panel_menu_menuitem; }
  }

  button {
    &:not(.option-button):not(.toggle-button) {
      min-width: $icon_size;
      min-height: $icon_size;
      padding: rem(6.7px, $sw: 1.0);
      @include radius($r);
    }

    &.flat.option-button { // session logo button
      min-width: $icon_size;
      min-height: $icon_size;
      padding: rem(6.7px, $sw: 1.0);
      @include radius($r);
      @if $variant != dark { @extend %inv_flat_button; }
      @else { @extend %flat_button; }

      image { opacity: $alpha_foreground_2nd; }

      &:hover,
      &:active {
        image { opacity: 1.0; }
      }
    }

    &,
    &.toggle-button { // session list rows
      min-width: $icon_size;
      min-height: $icon_size;
      @if $variant != dark { @extend %inv_flat_button; }
      @else { @extend %flat_button; }

      image { opacity: $alpha_foreground_2nd; }

      &:hover,
      &:active,
      &.selected { image { opacity: 1.0; } }
    }

    &.toggle-button {
      padding: 0 rem(13.3px);
      @include radius(0);
      font-weight: 500;

      &.selected { // selected row
        &, &:hover {
          @include button(flat-normal, $tc: $color_fg_sel);
          background-image: image($color_bg_sel);

          image { opacity: 1.0; }
        }
      }
    }
  }

  entry,
  .lightdm-combo entry {
    @extend %greeter_entry;
    @if $variant != dark {
      @include entry(flat-normal, $tc: $color_fg_inv);
      caret-color: $color_fg_inv;
      &:focus { @include entry(flat-focus, $tc: $color_fg_inv); }
      &:disabled { @include entry(flat-disabled, $tc: $color_fg_inv); }
    }

    selection { @extend %selected_items; }
  }

  entry:active { // for spinner
    -gtk-icon-source: -gtk-icontheme('process-working-symbolic');
    animation: spinner 1s linear infinite;
  }

  .lightdm-combo {
    border-radius: 0;
    background-color: transparent;
  }
}