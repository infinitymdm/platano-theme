/*
 *  This file is part of plata-theme
 *
 * Copyright (C) 2018-2020 Tista <tista.gma500@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 */

//
// Import resources
//

@import 'resources/animations';

//
// Default shadows
//

$z-depth-1: 0 1px 2px rgba(0, 0, 0, 0.28);
$z-depth-2: 0 2.5px 4.5px rgba(0, 0, 0, 0.34);
$z-depth-3: 0 4.5px 5.5px rgba(0, 0, 0, 0.38);
$z-depth-4: 0 10px 14px rgba(0, 0, 0, 0.44);
$z-depth-5: 0 14px 19px rgba(0, 0, 0, 0.50);

// tile borders + dummy z-depth-2 area
$z-depth-2-tiled: 0 2.5px 4.5px transparent,
                  1px 0 $div_sld_dark_fg, // side-edges
                  -1px 0 $div_sld_dark_fg;
$z-depth-2-tiled-top: 0 2.5px 4.5px transparent,
                      0 1px $div_sld_dark_fg;
$z-depth-2-tiled-bottom: 0 2.5px 4.5px transparent,
                         0 -1px $div_sld_dark_fg;
$z-depth-2-tiled-left: 0 2.5px 4.5px transparent,
                       1px 0 $div_sld_dark_fg;
$z-depth-2-tiled-right: 0 2.5px 4.5px transparent,
                        -1px 0 $div_sld_dark_fg;

// z-depth-2.5 actual shadows + dummy z-depth-4 area
$z-depth-2-backdrop: 0 10px 14px transparent,
                     0 4.5px 5.5px rgba(0, 0, 0, 0.13),
                     $z-depth-2;
$z-depth-2-backdrop-tiled: 0 10px 14px transparent,
                           1px 0 $div_sld_dark_fg,
                           -1px 0 $div_sld_dark_fg;
$z-depth-2-backdrop-tiled-top: 0 10px 14px transparent,
                               0 1px $div_sld_dark_fg;
$z-depth-2-backdrop-tiled-bottom: 0 10px 14px transparent,
                                  0 -1px $div_sld_dark_fg;
$z-depth-2-backdrop-tiled-left: 0 10px 14px transparent,
                                1px 0 $div_sld_dark_fg;
$z-depth-2-backdrop-tiled-right: 0 10px 14px transparent,
                                 -1px 0 $div_sld_dark_fg;

// Nautilus Desktop Label shadow
$z-depth-1-label: 0 0 1px rgba(0, 0, 0, 0.26),
                  0 1px 2px rgba(0, 0, 0, 0.26),
                  0 2px 3px rgba(0, 0, 0, 0.32);

//
// Shape radius
//
// $r: amount of border-radius
// $r_out: amount of outline-radius
//

@mixin radius($r, $r_out: $r) {
  @if $r_out == none {
    border-radius: #{$r};
  }
  @else {
    border-radius: #{$r};
    -gtk-outline-radius: #{$r_out};
  }
}

//
// Transitions
//
// $n: type name
// $p: properties
// $t: timing
// $d: duration
//

@mixin transition($n, $p: $tr_p_std, $t: $tr_t_std, $d: $tr_d_std) {
  @if $n == std {
    transition-property: $p;
    transition-timing-function: $t;
    transition-duration: $d;
  }
  @else if $n == dec {
    transition-property: $p;
    transition-timing-function: $tr_t_dec;
    transition-duration: $d;
  }
  @else if $n == acc-acc {
    transition-property: $p;
    transition-timing-function: $tr_t_acc;
    transition-duration: $tr_d_sht;
  }
  @else if $n == dec-dec {
    transition-property: $p;
    transition-timing-function: $tr_t_dec;
    transition-duration: $tr_d_lng;
  }
  @else if $n == ink-normal-std {
    transition-property: $tr_p_ink_n;
    transition-timing-function: $tr_t_std;
    transition-duration: $tr_d_std;
  }
  @else if $n == ink-normal-dec {
    transition-property: $tr_p_ink_n;
    transition-timing-function: $tr_t_dec;
    transition-duration: $tr_d_lng;
  }
  @else if $n == ink-active-std {
    transition-property: $tr_p_ink_a;
    transition-timing-function: $tr_t_std;
    transition-duration: $tr_d_std;
  }
  @else if $n == ink-active-dec {
    transition-property: $tr_p_ink_a;
    transition-timing-function: $tr_t_dec;
    transition-duration: $tr_d_lng;
  }
  @else if $n == ink-active-acc {
    transition-property: $tr_p_ink_a;
    transition-timing-function: $tr_t_acc;
    transition-duration: $tr_d_lng;
  }
  @else if $n == ink-normal-combo {
    transition-property: $tr_p_combo;
    transition-timing-function: $tr_t_dec;
    transition-duration: $tr_d_std;
  }
  @else if $n == ink-active-combo {
    transition-property: $tr_p_ink_combo;
    transition-timing-function: $tr_t_dec;
    transition-duration: $tr_d_lng;
  }
  @else if $n == normal-deco {
    transition-property: $tr_p_deco;
    transition-timing-function: $tr_t_dec;
    transition-duration: $tr_d_std;
  }
  @else if $n == ink-normal-tab {
    transition: border-color $tr_d_std $tr_t_std,
                border-image $tr_d_std $tr_t_std,
                background-size 0s $tr_t_dec,
                background-image 0s $tr_t_dec,
                background-color $tr_d_std $tr_t_std,
                box-shadow $tr_d_std $tr_t_std;
  }
  @else if $n == ink-active-tab {
    transition: border-color $tr_d_std $tr_t_std,
                border-image $tr_d_std $tr_t_std,
                background-size $tr_d_lngr $tr_t_dec,
                background-image $tr_d_lngr $tr_t_dec,
                background-color $tr_d_std $tr_t_std,
                box-shadow $tr_d_std $tr_t_std;
  }
  @else if $n == ink-normal-row {
    transition: border-color $tr_d_std $tr_t_std,
                border-image $tr_d_std $tr_t_std,
                background-size ($tr_d_lng * 2) $tr_t_dec,
                background-image ($tr_d_lng * 2) $tr_t_dec,
                background-color $tr_d_std $tr_t_std,
                box-shadow $tr_d_std $tr_t_std;
  }
  @else if $n == ink-active-row {
    transition: border-color $tr_d_std $tr_t_std,
                border-image $tr_d_std $tr_t_std,
                background-size 0s $tr_t_dec,
                background-image 0s $tr_t_dec,
                background-color $tr_d_std $tr_t_std,
                box-shadow $tr_d_std $tr_t_std;
  }
  @else if $n == reset {
    transition-property: all;
    transition-timing-function: $tr_t_lin;
    transition-duration: $tr_d_non;
    transition-delay: $tr_d_non;
    animation: none;
  }
}

//
// Animations
//
// $n: type name
// $d: duration
// $t: timing
//

@mixin animation($n, $d: $tr_d_std, $t: $tr_t_std) {
  @if $n == active-std {
    animation: ink-std $d $t forwards;
  }
  @if $n == active-dec {
    animation: ink-dec $tr_d_lng $tr_t_dec forwards;
  }
}

//
// Ink reactions
//
// $t: type
// $fc: ink color
// $bs: background scale
// $i: ink intensity
// $tr: transition
//

@mixin ink-reaction(
         $t, $fc: currentColor, $bs: 8, $i: 1.0, $tr: ink-normal-std) {
  @if $t == normal {
    background-image:
      radial-gradient(circle farthest-corner at center,
                      track($fc, 0 * $i) percentage(1 / $bs),
                      transparent 0%);
    background-size: percentage($bs) percentage($bs);
    background-repeat: no-repeat;
    background-position: center center;
    @include transition($tr);
  }
  @else if $t == active-std {
    background-image:
      radial-gradient(circle farthest-corner at center,
                      track($fc, $a_trk_1 *$i) percentage(1 / $bs),
                      transparent 0%);
    background-size: 0 0;
    @include transition($tr);
    @include animation(active-std);
    transition-delay: $tr_d_dly; // reduce early ink ringing artifacts
  }
  @else if $t == active-dec {
    background-image:
      radial-gradient(circle farthest-corner at center,
                      track($fc, $a_trk_1 * $i) percentage(1 / $bs),
                      transparent 0%);
    background-size: 0 0;
    @include transition($tr);
    @include animation(active-dec);
    transition-delay: $tr_d_dly;
  }
  @else if $t == active-close-dec {
    background-image: radial-gradient(circle farthest-corner at center,
                                      $fc percentage(1 / $bs),
                                      transparent 0%);
    background-size: 0 0;
    @include transition($tr);
    @include animation(active-dec);
    transition-delay: $tr_d_dly;
  }
  @if $t == tab-normal {
    background-image:
      radial-gradient(circle farthest-corner at center,
                      track($fc, $a_trk_2 * $i) percentage(1 / $bs),
                      transparent 0%);
    background-size: 0 0;
    background-repeat: no-repeat;
    background-position: center center;
    @include transition(ink-normal-tab);
    transition-delay: $tr_d_dly;
  }
  @else if $t == tab-active {
    border-color: $sel_bg;
    background-image:
      radial-gradient(circle farthest-corner at center,
                      track($fc, 0 * $i) percentage(1 / $bs),
                      transparent 0%);
    background-size: percentage($bs) percentage($bs);
    @include transition(ink-active-tab);
    transition-delay: $tr_d_dly;
  }
}

//
// Entries
//
// $t: entry type
// $c: background color
// $tc: text color
// $fc: focus color
// $ln: linked state
//
// possible $t values:
// normal, focus, disabled, flat-normal, flat-focus, flat-disabled,
// block-cursor;
//

@mixin entry($t, $c: $base, $tc: $fg, $fc: $sel_bg) {
  @if $t == normal {
    border-color: mix($tc, $c, percentage($a_div_1));
    background-color: mix($tc, $c, percentage($a_trk_1 / 2));
    color: track($tc, $a_fg_2nd);
  }
  @else if $t == focus {
    border-color: $fc;
    background-color: $c;
    color: $tc;
  }
  @else if $t == disabled {
    border-color: mix($tc, $c, percentage($a_div_1 * $a_fg_dis));
    background-color: mix($tc, $c, percentage($a_trk_1 / 2 * $a_fg_dis));
    color: track($tc, $a_fg_dis);
  }
  @else if $t == flat-normal {
    border: none;
    background-color: track($tc, $a_trk_1 / 2);
    color: track($tc, $a_fg_2nd);
    box-shadow: inset 0 -2px $trk_out_fg;
  }
  @else if $t == flat-focus {
    border: none;
    background-color: track($tc, $a_trk_1);
    color: $tc;
    box-shadow: inset 0 -2px $fc;
  }
  @else if $t == flat-disabled {
    border: none;
    background-color: track($tc, $a_trk_1 / 2 * $a_fg_dis);
    color: track($tc, $a_fg_dis);
    box-shadow: none;
  }
  @else if $t == block-cursor {
    // flip fg <-> bg
    background-color: $tc;
    color: $c;
  }
}

@mixin linked-entry-outline($dir: ltr, $cld: first) {
  @if $cld == only { border-width: 2px; }
  @if $cld == center {
    border-left-width: 1px;
    border-right-width: 1px;
  }
  @if $cld == vert-center {
    border-top-width: 1px;
    border-bottom-width: 1px;
  }
  @else if $cld == first {
    @if $dir == ltr { border-right-width: 1px; }
    @if $dir == rtl { border-left-width: 1px; }
    @if $dir == vert { border-bottom-width: 1px; }
  }
  @else if $cld == last {
    @if $dir == ltr { border-left-width: 1px; }
    @if $dir == rtl { border-right-width: 1px; }
    @if $dir == vert { border-top-width: 1px; }
  }
}

//
// Buttons
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
//

@mixin button($t, $c: $base, $tc: $fg) {
  @if $t == normal {
    border-color: mix($tc, $c, percentage($a_div_1));
    background-color: $c;
    color: track($tc, $a_fg_2nd);
  }
  @else if $t == hover {
    border-color: mix($tc, $c, percentage($a_trk_1));
    background-color: mix($tc, $c, percentage($a_trk_1));
    color: $tc;
  }
  @else if $t == active {
    border-color: mix($tc, $c, percentage($a_div_1));
    background-color: mix($tc, $c, percentage($a_trk_1));
    color: $tc;
  }
  @else if $t == checked {
    border-color: $sel_bg;
    background-color: $sel_bg;
    color: $sel_fg;
  }
  @else if $t == checked-hover {
    border-color: mix($sel_fg, $sel_bg, percentage($a_trk_1));
    background-color: mix($sel_fg, $sel_bg, percentage($a_trk_1));
    color: $sel_fg;
  }
  @else if $t == checked-disabled {
    border-color: mix($tc, $c, percentage($a_trk_1));
    background-color: mix($tc, $c, percentage($a_trk_1));
    color: track($tc, $a_fg_dis);
  }
  @else if $t == disabled {
    border-color: mix($tc, $c, percentage($a_div_1 * $a_fg_dis));
    background-color: mix($tc, $c, percentage($a_trk_1 / 2 * $a_fg_dis));
    color: track($tc, $a_fg_dis);
  }
  @else if $t == flat-normal {
    border: none;
    background-color: track($tc, 0);
    color: track($tc, $a_fg_2nd);
  }
  @else if $t == flat-hover {
    border: none;
    background-color: track($tc, $a_trk_1);
    color: $tc;
  }
  @else if $t == flat-lined-hover {
    border: none;
    background-color: track($tc, $a_trk_1);
    color: $tc;
    box-shadow: inset 0 -2px track($tc, $a_trk_out);
  }
  @else if $t == flat-active {
    border: none;
    background-color: track($tc, $a_trk_1);
    color: $tc;
  }
  @else if $t == flat-checked {
    border: none;
    background-color: track($tc, $a_trk_2);
    color: $tc;
  }
  @else if $t == flat-lined-checked {
    border: none;
    background-color: track($tc, 0);
    color: $tc;
    box-shadow: inset 0 -2px $sel_bg;
  }
  @else if $t == flat-checked-disabled {
    border: none;
    background-color: track($tc, $a_trk_1 * $a_fg_dis);
    color: track($tc, $a_fg_dis);
  }
  @else if $t == flat-disabled {
    border: none;
    background-color: track($tc, 0);
    color: track($tc, $a_fg_dis);
  }
  @else if $t == raised-normal {
    border-color: $c;
    background-color: $c;
    color: $tc;
    box-shadow: $z-depth-1;
  }
  @else if $t == raised-hover {
    border-color: mix($tc, $c, percentage($a_trk_1));
    background-color: mix($tc, $c, percentage($a_trk_1));
    color: $tc;
    box-shadow: $z-depth-2;
  }
  @else if $t == raised-active {
    border-color: $c;
    background-color: $c;
    color: $tc;
    box-shadow: $z-depth-2;
  }
  @else if $t == raised-checked {
    border-color: $sel_bg;
    background-color: $sel_bg;
    color: $sel_fg;
    box-shadow: $z-depth-1;
  }
  @else if $t == raised-checked-disabled {
    border-color: mix($tc, $c, percentage($a_trk_1));
    background-color: mix($tc, $c, percentage($a_trk_1));
    color: track($tc, $a_fg_dis);
    box-shadow: none;
  }
  @else if $t == raised-disabled {
    border-color: transparent;
    background-color: track($tc, ($a_trk_1));
    color: track($tc, $a_fg_dis);
    box-shadow: none;
  }
}

//
// Combobuttons
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
//

@mixin combobutton($t, $c: $base, $tc: $fg) {
  @if $t == normal {
    border: none;
    background-color: track($tc, $a_trk_1);
    color: track($tc, $a_fg_2nd);
  }
  @else if $t == hover {
    background-color: track($tc, $a_trk_1 * 1.5);
    color: $tc;
  }
  @else if $t == active {
    background-color: track($tc, $a_trk_1 * 1.5);
    color: $tc;
  }
  @else if $t == checked {
    background-color: track($tc, $a_trk_1 * 1.5);
    color: $tc;
  }
  @else if $t == disabled {
    background-color:
      mix($tc, $c, percentage(($a_trk_1 * 2 / 3) * $a_fg_dis));
    color: track($tc, $a_fg_dis);
    box-shadow: inset 0 0 0 1px
                mix($tc, $c, percentage($a_div_1 * $a_fg_dis));
  }
  @else if $t == solid-normal {
    background-color: mix($tc, $c, percentage($a_trk_1));
    color: track($tc, $a_fg_2nd);
  }
  @else if $t == solid-hover {
    background-color: mix($tc, $c, percentage($a_trk_1 * 1.5));
    color: $tc;
  }
  @else if $t == solid-active {
    background-color: mix($tc, $c, percentage($a_trk_2));
    color: $tc;
  }
  @else if $t == solid-checked {
    background-color: mix($tc, $c, percentage($a_trk_2));
    color: $tc;
  }
  @else if $t == solid-disabled {
    background-color:
      mix($tc, $c, percentage(($a_trk_1 * 2 / 3) * $a_fg_dis));
    color: track($tc, $a_fg_dis);
    box-shadow: inset 0 0 0 1px
                mix($tc, $c, percentage($a_div_1 * $a_fg_dis));
  }
}

//
// Overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

@mixin overshoot($p, $t:normal, $c:$fg) {
  background-size: 150% 50%;

  @if ($p == left) or ($p == right) { background-size: 50% 150%; }

  background-image: radial-gradient(circle farthest-side at $p,
                                    track($c, $a_trk_1) 50%,
                                    track($c, $a_trk_1) 50%,
                                    transparent);
  background-repeat: no-repeat;
  background-position: $p;
  // reset some properties to be sure to not inherit them somehow
  background-color: transparent;
  border: none;
  box-shadow: none;
  transition: none;
}
